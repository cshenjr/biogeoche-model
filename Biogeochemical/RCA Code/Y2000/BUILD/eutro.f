      MODULE ALLOCEUTRO
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: SK1415,SK2614,SK150,SK2114
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: SK15P,SK200,SK210,SK220
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: SK240,SK250,SR260
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: SK2324,SK26OC
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: RPOP_DDA,LPOP_DDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: RDOP_DDA,LDOP_DDA,PO4T_DDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: RPON_DDA,LPON_DDA,RDON_DDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: LDON_DDA,NH4T_DDA,NO23_DDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: BSI_DDA,SIT_DDA,RPOC_DDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: LPOC_DDA,RDOC_DDA,LDOC_DDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: EXDOC_DDA,REPOC_DDA 	  
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: REDOC_DDA,O2EQ_DDA,DO_DDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: ECMSAL_DDA,ECMTEM_DDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: DPO4_DDA,DNH4_DDA,DSI_DDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: POP_DDA,DOP_DDA,TP_DDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: PON_DDA,DON_DDA,TN_DDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: POC_DDA,DOC_DDA,TOC_DDA

      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: HYDSAL_DDA,HYDTEMP_DDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: PHYT1_DMIN,PHYT1_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: PHYT2_DMIN,PHYT2_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: PHYT3_DMIN,PHYT3_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: POP_DMIN,POP_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: DOP_DMIN,DOP_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: DPO4_DMIN,DPO4_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: TP_DMIN,TP_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: PON_DMIN,PON_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: DON_DMIN,DON_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: DNH4_DMIN,DNH4_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: NO23_DMIN,NO23_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: TN_DMIN,TN_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: BSI_DMIN,BSI_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: DSI_DMIN,DSI_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: POC_DMIN,POC_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: DOC_DMIN,DOC_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: TOC_DMIN,TOC_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: O2EQ_DMIN,O2EQ_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: DO_DMIN,DO_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: HYDSAL_DMIN,HYDSAL_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: HYDTEMP_DMIN,HYDTEMP_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: CHLA1_DMIN,CCHL1_DMIN
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: CHLA2_DMIN,CCHL2_DMIN
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: CHLA3_DMIN,CCHL3_DMIN
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: CHLA1_DMAX,CCHL1_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: CHLA2_DMAX,CCHL2_DMAX
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: CHLA3_DMAX,CCHL3_DMAX

      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: SAL_GDA,PHYT1_GDA,PHYT2_GDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: PHYT3_GDA,TPOP_GDA,TDOP_GDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: TPON_GDA,TDON_GDA,NO23_GDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: TPSI_GDA,TPOC_GDA,TDOC_GDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: DPO4_GDA,DNH4_GDA,DSI_GDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: O2EQ_GDA,BOTBODHS_GDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: TGPP_GDA,TNPP_GDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: TRESP_GDA,SKE_GDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: ECMTMP_GDA,ECMSAL_GDA
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: REDOC_GDA,REPOC_GDA,OMEGA1	    !SCQ
      END MODULE ALLOCEUTRO
cOPTION CROSSREF ON
cOPTION SYMTABLE ON
cPAGEWIDTH 132
C
C***********************************************************************
C 
C 
      SUBROUTINE   TUNER
C 
C 
C***********************************************************************
C 
C 
C                                  Integrated Eutrophication Model - IEM
C                                  -------------------------------------
C                         Provides users with the choice of the standard
C                         HydroQual eutrophication algal growth modeling
C                         framework -or- the Laws-Chalup algal growth
C                         modeling framework
C
C                                                  Standard   Law-Chalup 
C              Variable Nutrient Stoichiometry         Y           Y
C                        Variable C:Chla Ratio         N           Y
C                      Respiration = f(growth)         N           Y
C
C                           Coupling to the Sediment Nutrient Flux Model
C 
C***********************************************************************
C 
C 
C     SYSTEMS                                                      UNITS
C 
C     -------                                                      -----
C        1 - SALINITY (SAL)                                          PPT
C
C     PHYTOPLANKTON
C        2 - WINTER DIATOMS (PHYT1)                               MG C/L
C        3 - SUMMER ASSEMBLAGE (PHYT2)                            MG C/L
C        4 - FALL ASSEMBLAGE (PHYT3)                              MG C/L
C
C     PHOSPHORUS
C        5 - REFRACTORY PARTICULATE ORGANIC (RPOP)                MG P/L
C        6 - LABILE PARTICULATE ORGANIC (LPOP)                    MG P/L
C        7 - REFRACTORY DISSOLVED ORGANIC (RDOP)                  MG P/L
C        8 - LABILE DISSOLVED ORGANIC (LDOP)                      MG P/L
C        9 - TOTAL DISSOLVED INORGANIC (PO4T)                     MG P/L
C
C     NITROGEN
C       10 - REFRACTORY PARTICULATE ORGANIC (RPON)                MG N/L
C       11 - LABILE PARTICULATE ORGANIC (LPON)                    MG N/L
C       12 - REFRACTORY DISSOLVED ORGANIC (RDON)                  MG N/L
C       13 - LABILE DISSOLVED ORGANIC (LDON)                      MG N/L
C       14 - TOTAL AMMONIA (NH4T)                                 MG N/L
C       15 - NITRITE + NITRATE (NO23)                             MG N/L
C
C     SILICA
C       16 - BIOGENIC - UNAVAILABLE (BSI)                        MG SI/L
C       17 - TOTAL INORGANIC (SIT)                               MG SI/L
C
C     CARBON
C       18 - REFRACTORY PARTICULATE ORGANIC (RPOC)                MG C/L
C       19 - LABILE PARTICULATE ORGANIC (LPOC)                    MG C/L
C       20 - REFRACTORY DISSOLVED ORGANIC (RDOC)                  MG C/L
C       21 - LABILE DISSOLVED ORGANIC (LDOC)                      MG C/L
C       22 - ALGAL EXUDATE - DISSOLVED ORGANIC (EXDOC)            MG C/L
C
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C       23 - REACTIVE PARTICULATE ORGANIC - CSO/WWTP (REPOC)      MG C/L
C       24 - REACTIVE DISSOLVED ORGANIC - CSO/WWTP (REDOC)        MG C/L
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
C       25 - O2*  - AQUEOUS SOD (O2EQ)                           MG O2/L
C       26 - DISSOLVED OXYGEN (DO)                               MG O2/L
C 
C***********************************************************************
C 
C     CONSTANTS 
C     --------- 
C                  NAMES AND DESCRIPTIONS OF CONSTANTS
C 
C   NO   NAME      DESCRIPTION                                     UNITS
C    1   AGMOPT  ALGAL GROWTH MODEL OPTION
C                = 0 USE STANDARD OR TRADITIONAL ALGAL GROWTH KINETICS
C                = 1 USE LAWS-CHALUP FORMULATION
C    2   ACTALG  NUMBER OF ACTIVE ALGAL GROUPS TO SIMULATE
C                = 1 JUST ONE GROUP WILL BE SIMULATED USING SYSTEM 2
C                = 2 TWO GROUPS WILL BE SIMULATED USING SYSTEMS 2 AND 3
C                = 3 THREE GROUPS WILL BE SIMULATED (SYSTEMS 2 THRU 4)
C    3   KAOPT   REAERATION FORMULATION OPTION
C                = 0 USE SPATIALLY CONSTANT KL  (KA = KL/DEPTH)
C                = 1 USE SPATIALLY VARIABLE KL
C                = 2 USE VELOCITY SHEAR AND OXYGEN DIFFUSIVITY
C                = 3 USE WIND SHEAR FORMULATION
C    4   KEOPT   EXTINCTION COEFFICIENT OPTION                        /M
C                = 0 KE IS A CONSTANT (SPATIALLY AND TEMPORALLY
C                    INVARIANT
C                = 1 KE IS A SPATIALLY VARIABLE BUT CONSTANT IN TIME
C                    (USING 2-D PARAMETER ARRAY)
C                = 2 KE IS SPATIALLY INVARIANT BUT VARIES IN TIME
C                    (USING TIME-VARIABLE FUNCTION)
C                = 3 KE IS SPATIALLY VARIABLE AND CAN VARY IN TIME,
C                    (USING 2-D PARAMETER ARRAY AND ONE TIME-VARIABLE
C                     FUNCTION)
C                = 4 KE IS SPATIALLY AND TEMPORALLY VARIABLE
C                    (REQUIRES SEPARATE INPUT FILE)
C 
C   IF <AGMOPT> = 0  THEN THE USER HAS CHOSEN TO USE THE STANDARD OR
C       TRADITIONAL EUTROPHICATION MODEL AND THE FOLLOWING CONSTANTS
C       (9 Thru 104) ARE SET ASIDE TO SPECIFY THE ALGAL COEFFICIENTS
C   Algal Group 1
C    9   TOPT1   OPTIMAL GROWTH TEMPERATURE FOR DIATOMS            DEG C
C   10   K1BETA1 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
C                RATE BELOW TOPT1
C   11   K1BETA2 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
C                RATE ABOVE TOPT1
C   12   K1C     SATURATED PHYTOPLANKTON GROWTH RATE                /DAY
C                (AT TEMPERATURE = TOPT1)
C   13   K1T     TEMPERATURE COEFFICIENT 
C   14   IS1     SATURATING ALGAL LIGHT INTENSITY                 LY/DAY
C   15   KMN1    HALF SATURATION CONSTANT FOR NITROGEN            MG N/L
C   16   KMP1    HALF SATURATION CONSTANT FOR PHOSPHOROUS         MG P/L
C   17   KMS1    HALF SATURATION CONSTANT FOR SILICA             MG SI/L
C   18   K1RB    BASAL/RESTING RESPIRATION RATE -or-                /DAY
C                ENDOGENOUS RESPIRATION RATE AT 20 DEG C            /DAY
C   19   K1RT    TEMPERATURE COEFFICIENT 
C   20   K1RG    GROWTH-RATE-DEPENDENT RESPIRATION COEFFICIENT 
C   21   K1GRZC  DEATH RATE DUE TO GRAZING                          /DAY
C   22   K1GRZT  TEMPERATURE COEFFICIENT 
C   23   CCHL1   CARBON TO CHLOROPHYLL RATIO                MG C/MG CHLA
C   24   CRBP11  CARBON TO PHOSPHORUS RATIO - NON-P LIMITED    MG C/MG P
C   25   CRBP12  CARBON TO PHOSPHORUS RATIO - P LIMITED        MG C/MG P
C   26   CRBP13  COEFFICIENT DETERMINING RANGE OF P LIMITATION    L/MG P
C   27   CRBN11  CARBON TO NITROGEN RATIO - NON-N LIMITED      MG C/MG N
C   28   CRBN12  CARBON TO NITROGEN RATIO - N LIMITED          MG C/MG N
C   29   CRBN13  COEFFICIENT DETERMINING RANGE OF N LIMITATION    L/MG N
C   30   CRBS11  CARBON TO SILICA RATIO - NON-SI LIMITED      MG C/MG SI
C   31   CRBS12  CARBON TO SILICA RATIO - SI LIMITED          MG C/MG SI
C   32   CRBS13  COEFFICIENT DETERMINING RANGE OF SI LIMITATION  L/MG SI
C   33   XKC1    CHLOROPHYLL SELF-SHADING EXTINCTION          M2/MG CHLA
C                COEFFICIENT FOR ALGAL GROUP 1
C   34   VSBAS1  BASE ALGAL SETTLING RATE - GROUP 1                M/DAY
C   35   VSNTR1  NUTRIENT STRESSED ALGAL SETTLING RATE - GROUP 1   M/DAY
C
C   Algal Group 2
C   41   TOPT2   OPTIMAL GROWTH TEMPERATURE FOR DIATOMS            DEG C
C   42   K2BETA1 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
C                RATE BELOW TOPT2
C   43   K2BETA2 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
C                RATE ABOVE TOPT2
C   44   K2C     SATURATED PHYTOPLANKTON GROWTH RATE                /DAY
C                (AT TEMPERATURE = TOPT2)
C   45   K2T     TEMPERATURE COEFFICIENT 
C   46   IS2     SATURATING ALGAL LIGHT INTENSITY                 LY/DAY
C   47   KMN2    HALF SATURATION CONSTANT FOR NITROGEN            MG N/L
C   48   KMP2    HALF SATURATION CONSTANT FOR PHOSPHOROUS         MG P/L
C   49   KMS2    HALF SATURATION CONSTANT FOR SILICA             MG SI/L
C   50   K2RB    BASAL/RESTING RESPIRATION RATE -or-                /DAY
C                ENDOGENOUS RESPIRATION RATE AT 20 DEG C            /DAY
C   51   K2RT    TEMPERATURE COEFFICIENT 
C   52   K2RG    GROWTH-RATE-DEPENDENT RESPIRATION COEFFICIENT 
C   53   K2GRZC  DEATH RATE DUE TO GRAZING                          /DAY
C   54   K2GRZT  TEMPERATURE COEFFICIENT 
C   55   CCHL2   CARBON TO CHLOROPHYLL RATIO                MG C/MG CHLA
C   56   CRBP21  CARBON TO PHOSPHORUS RATIO - NON-P LIMITED    MG C/MG P
C   57   CRBP22  CARBON TO PHOSPHORUS RATIO - P LIMITED        MG C/MG P
C   58   CRBP23  COEFFICIENT DETERMINING RANGE OF P LIMITATION    L/MG P
C   59   CRBN21  CARBON TO NITROGEN RATIO - NON-N LIMITED      MG C/MG N
C   60   CRBN22  CARBON TO NITROGEN RATIO - N LIMITED          MG C/MG N
C   61   CRBN23  COEFFICIENT DETERMINING RANGE OF N LIMITATION    L/MG N
C   62   CRBS21  CARBON TO SILICA RATIO - NON-SI LIMITED      MG C/MG SI
C   63   CRBS22  CARBON TO SILICA RATIO - SI LIMITED          MG C/MG SI
C   64   CRBS23  COEFFICIENT DETERMINING RANGE OF SI LIMITATION  L/MG SI
C   65   XKC2    CHLOROPHYLL SELF-SHADING EXTINCTION          M2/MG CHLA
C                COEFFICIENT FOR ALGAL GROUP 2
C   66   VSBAS2  BASE ALGAL SETTLING RATE - GROUP 2                M/DAY
C   67   VSNTR2  NUTRIENT STRESSED ALGAL SETTLING RATE - GROUP 2   M/DAY
C
C   Algal Group 3
C   73   TOPT3   OPTIMAL GROWTH TEMPERATURE FOR DIATOMS            DEG C
C   74   K3BETA1 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
C                RATE BELOW TOPT3
C   75   K3BETA2 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
C                RATE ABOVE TOPT3
C   76   K3C     SATURATED PHYTOPLANKTON GROWTH RATE                /DAY
C                (AT TEMPERATURE = TOPT3)
C   77   K3T     TEMPERATURE COEFFICIENT 
C   78   IS3     SATURATING ALGAL LIGHT INTENSITY                 LY/DAY
C   79   KMN3    HALF SATURATION CONSTANT FOR NITROGEN            MG N/L
C   80   KMP3    HALF SATURATION CONSTANT FOR PHOSPHOROUS         MG P/L
C   81   KMS3    HALF SATURATION CONSTANT FOR SILICA             MG SI/L
C   82   K3RB    BASAL/RESTING RESPIRATION RATE -or-                /DAY
C                ENDOGENOUS RESPIRATION RATE AT 20 DEG C            /DAY
C   83   K3RT    TEMPERATURE COEFFICIENT 
C   84   K3RG    GROWTH-RATE-DEPENDENT RESPIRATION COEFFICIENT 
C   85   K3GRZC  DEATH RATE DUE TO GRAZING                          /DAY
C   86   K3GRZT  TEMPERATURE COEFFICIENT 
C   87   CCHL3   CARBON TO CHLOROPHYLL RATIO                MG C/MG CHLA
C   88   CRBP31  CARBON TO PHOSPHORUS RATIO - NON-P LIMITED    MG C/MG P
C   89   CRBP32  CARBON TO PHOSPHORUS RATIO - P LIMITED        MG C/MG P
C   90   CRBP33  COEFFICIENT DETERMINING RANGE OF P LIMITATION    L/MG P
C   91   CRBN31  CARBON TO NITROGEN RATIO - NON-N LIMITED      MG C/MG N
C   92   CRBN32  CARBON TO NITROGEN RATIO - N LIMITED          MG C/MG N
C   93   CRBN33  COEFFICIENT DETERMINING RANGE OF N LIMITATION    L/MG N
C   94   CRBS31  CARBON TO SILICA RATIO - NON-SI LIMITED      MG C/MG SI
C   95   CRBS32  CARBON TO SILICA RATIO - SI LIMITED          MG C/MG SI
C   96   CRBS33  COEFFICIENT DETERMINING RANGE OF SI LIMITATION  L/MG SI
C   97   XKC3    CHLOROPHYLL SELF-SHADING EXTINCTION          M2/MG CHLA
C                COEFFICIENT FOR ALGAL GROUP 3
C   98   VSBAS3  BASE ALGAL SETTLING RATE - GROUP 3                M/DAY
C   99   VSNTR3  NUTRIENT STRESSED ALGAL SETTLING RATE - GROUP 3   M/DAY
C
C  105   KMPHYT  HALF SATURATION CONSTANT FOR PHYTOPLANKTON       MG C/L
C
C   IF <AGMOPT> = 1  THEN THE USER HAS CHOSEN TO USE THE LAWS/CHALUP
C       VERSION OF EUTROPHICATION MODEL AND THE FOLLOWING CONSTANTS
C       (9 Thru 104) ARE SET ASIDE TO SPECIFY THE ALGAL COEFFICIENTS
C   Algal Group 1
C   IF <AGMOPT> = 1  THEN THE FOLLOWING CONSTANTS (6 Thru 45) ARE USED
C       BY THE EUTROPHICATION MODEL AND MUST BE SPECIFIED BY THE USER
C    9   TOPT1   OPTIMAL GROWTH TEMPERATURE FOR DIATOMS            DEG C
C   10   K1BETA1 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
C                RATE BELOW TOPT1
C   11   K1BETA2 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
C                RATE ABOVE TOPT1
C   12   GPRE1   GROSS PHOTOSYNTHETIC RATE PER UNIT CELL            /DAY
C                (ASSOCIATED WITH PHOTOSYNTHETIC DARK REACTIONS)
C   13   GPR01   GROSS PHOTOSYNTHETIC RATE PER UNIT CELL   M2/MOL QUANTA
C                PER UNIT LIGHT INTENSITY UNDER NUTRIENT-SATURATED 
C                CONDITIONS AND ZERO IRRADIANCE
C   14   IS1     SATURATING ALGAL LIGHT INTENSITY                 LY/DAY
C   15   KMN1    HALF SATURATION CONSTANT FOR NITROGEN            MG N/L
C   16   KMP1    HALF SATURATION CONSTANT FOR PHOSPHOROUS         MG P/L
C   17   KMS1    HALF SATURATION CONSTANT FOR SILICA             MG SI/L
C   18   K1RB    BASAL OR RESTING RESPIRATION RATE                  /DAY 
C   19   K1RT    TEMPERATURE COEFFICIENT FOR BASAL/ENDOGENOUS
C                RESPIRATION 
C   20   K1RG    GROWTH-RATE-DEPENDENT RESPIRATION COEFFICIENT 
C   21   K1GRZC  DEATH RATE DUE TO GRAZING                          /DAY
C   22   K1GRZT  TEMPERATURE COEFFICIENT 
C   23   FSC1    FRACTION OF C ALLOCATED TO STRUCTURAL PURPOSES
C   24   WCCHL1  CARBON TO CHLOROPHYLL RATIO                MG C/MG CHLA
C   25   WCP1    CARBON TO PHOSPHORUS RATIO - NON-P LIMITED    MG C/MG P
C   26   WCN1    CARBON TO NITROGEN RATIO - NON-N LIMITED      MG C/MG N
C   27   WCS1    CARBON TO SILICA RATIO - NON-SI LIMITED      MG C/MG SI
C   28   QF1     QUOTIENT OF NUTRIENT-LIMITED NUTRIENT:C RATIOS
C                AT RELATIVE GROWTH RATES OF 0 AND 1
C   29   XKC1    CHLOROPHYLL SELF-SHADING EXTINCTION          M2/MG CHLA
C                COEFFICIENT FOR ALGAL GROUP 1
C   30   VSBAS1  BASE ALGAL SETTLING RATE - GROUP 1                M/DAY
C   31   VSNTR1  NUTRIENT STRESSED ALGAL SETTLING RATE - GROUP 1   M/DAY
C
C   Algal Group 2
C   41   TOPT2   OPTIMAL GROWTH TEMPERATURE FOR SUMMER GROUP       DEG C
C   42   K2BETA1 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
C                RATE BELOW TOPT2
C   43   K2BETA2 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
C                RATE ABOVE TOPT2
C   44   GPRE2   GROSS PHOTOSYNTHETIC RATE PER UNIT CELL            /DAY
C                (ASSOCIATED WITH PHOTOSYNTHETIC DARK REACTIONS)
C   45   GPR02   GROSS PHOTOSYNTHETIC RATE PER UNIT CELL   M2/MOL QUANTA
C                PER UNIT LIGHT INTENSITY UNDER NUTRIENT-SATURATED 
C                CONDITIONS AND ZERO IRRADIANCE
C   46   IS2     SATURATING ALGAL LIGHT INTENSITY                 LY/DAY
C   47   KMN2    HALF SATURATION CONSTANT FOR NITROGEN            MG N/L
C   48   KMP2    HALF SATURATION CONSTANT FOR PHOSPHOROUS         MG P/L
C   49   KMS2    HALF SATURATION CONSTANT FOR SILICA             MG SI/L
C   50   K2RB    BASAL OR RESTING RESPIRATION RATE                  /DAY 
C   51   K2RT    TEMPERATURE COEFFICIENT FOR BASAL/ENDOGENOUS
C                RESPIRATION 
C   52   K2RG    GROWTH-RATE-DEPENDENT RESPIRATION COEFFICIENT 
C   53   K2GRZC  DEATH RATE DUE TO GRAZING                          /DAY
C   54   K2GRZT  TEMPERATURE COEFFICIENT 
C   55   FSC2    FRACTION OF C ALLOCATED TO STRUCTURAL PURPOSES
C   55   WCCHL2  CARBON TO CHLOROPHYLL RATIO                MG C/MG CHLA
C   57   WCP2    CARBON TO PHOSPHORUS RATIO - NON-P LIMITED    MG C/MG P
C   58   WCN2    CARBON TO NITROGEN RATIO - NON-N LIMITED      MG C/MG N
C   59   WCS2    CARBON TO SILICA RATIO - NON-SI LIMITED      MG C/MG SI
C   60   QF2     QUOTIENT OF NUTRIENT-LIMITED NUTRIENT:C RATIOS
C                AT RELATIVE GROWTH RATES OF 0 AND 1
C   61   XKC2    CHLOROPHYLL SELF-SHADING EXTINCTION          M2/MG CHLA
C                COEFFICIENT FOR ALGAL GROUP 2
C   62   VSBAS2  BASE ALGAL SETTLING RATE - GROUP 2                M/DAY
C   63   VSNTR2  NUTRIENT STRESSED ALGAL SETTLING RATE - GROUP 2   M/DAY
C
C   Algal Group 3
C   73   TOPT3   OPTIMAL GROWTH TEMPERATURE FOR DIATOMS            DEG C
C   74   K3BETA1 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
C                RATE BELOW TOPT3
C   75   K3BETA2 TEMPERATURE CORRECTION EFFECT ON GROWTH     (DEG C)**-2
C                RATE ABOVE TOPT3
C   76   GPRE3   GROSS PHOTOSYNTHETIC RATE PER UNIT CELL            /DAY
C                (ASSOCIATED WITH PHOTOSYNTHETIC DARK REACTIONS)
C   77   GPR03   GROSS PHOTOSYNTHETIC RATE PER UNIT CELL   M2/MOL QUANTA
C                PER UNIT LIGHT INTENSITY UNDER NUTRIENT-SATURATED 
C                CONDITIONS AND ZERO IRRADIANCE
C   78   IS3     SATURATING ALGAL LIGHT INTENSITY                 LY/DAY
C   79   KMN3    HALF SATURATION CONSTANT FOR NITROGEN            MG N/L
C   80   KMP3    HALF SATURATION CONSTANT FOR PHOSPHOROUS         MG P/L
C   81   KMS3    HALF SATURATION CONSTANT FOR SILICA             MG SI/L
C   82   K3RB    BASAL OR RESTING RESPIRATION RATE                  /DAY 
C   83   K3RT    TEMPERATURE COEFFICIENT FOR BASAL/ENDOGENOUS
C                RESPIRATION 
C   84   K3RG    GROWTH-RATE-DEPENDENT RESPIRATION COEFFICIENT 
C   85   K3GRZC  DEATH RATE DUE TO GRAZING                          /DAY
C   86   K3GRZT  TEMPERATURE COEFFICIENT 
C   87   FSC3    FRACTION OF C ALLOCATED TO STRUCTURAL PURPOSES
C   88   WCCHL3  CARBON TO CHLOROPHYLL RATIO                MG C/MG CHLA
C   89   WCP3    CARBON TO PHOSPHORUS RATIO - NON-P LIMITED    MG C/MG P
C   90   WCN3    CARBON TO NITROGEN RATIO - NON-N LIMITED      MG C/MG N
C   91   WCS3    CARBON TO SILICA RATIO - NON-SI LIMITED      MG C/MG SI
C   92   QF3     QUOTIENT OF NUTRIENT-LIMITED NUTRIENT:C RATIOS
C                AT RELATIVE GROWTH RATES OF 0 AND 1
C   93   XKC3    CHLOROPHYLL SELF-SHADING EXTINCTION          M2/MG CHLA
C                COEFFICIENT FOR ALGAL GROUP 3
C   94   VSBAS3  BASE ALGAL SETTLING RATE - GROUP 3                M/DAY
C   95   VSNTR3  NUTRIENT STRESSED ALGAL SETTLING RATE - GROUP 3   M/DAY
C
C  105   KMPHYT  HALF SATURATION CONSTANT FOR PHYTOPLANKTON       MG C/L
C
C                   RECYCLE FRACTIONS
C  106   FRPOP   REFRACTORY PARTICULATE ORGANIC PHOSPHOROUS 
C  107   FLPOP   LABILE PARTICULATE ORGANIC PHOSPHOROUS 
C  108   FRDOP   REFRACTORY DISSOLVED ORGANIC PHOSPHOROUS 
C  109   FLDOP   LABILE DISSOLVED ORGANIC PHOSPHOROUS 
C  110   FPO4    DISSOLVED INORGANIC PHOSPHOROUS 
C  111   FRPON   REFRACTORY PARTICULATE ORGANIC NITROGEN
C  112   FLPON   LABILE PARTICULATE ORGANIC NITROGEN
C  113   FRDON   REFRACTORY DISSOLVED ORGANIC NITROGEN
C  114   FLDON   LABILE DISSOLVED ORGANIC NITROGEN
C  115   FNH4    AMMONIA 
C  116   FRPOC   REFRACTORY PARTICULATE ORGANIC CARBON
C  117   FLPOC   LABILE PARTICULATE ORGANIC CARBON
C  118   FRDOC   REFRACTORY DISSOLVED ORGANIC CARBON
C  119   FLDOC   LABILE DISSOLVED ORGANIC CARBON
C 
C            PHOSPHORUS HYDROLYSIS/MINERALIZATION RATES AT 20 DEG C 
C  120   K57C    HYDROLYSIS RATE OF RPOP TO RDOP                    /DAY
C  121   K57T    TEMPERATURE COEFFICIENT 
C  122   K68C    HYDROLYSIS RATE OF LPOP TO LDOP                    /DAY
C  123   K68T    TEMPERATURE COEFFICIENT 
C  124   K79C    MINERALIZATION RATE OF RDOP TO PO4                 /DAY
C  125   K79T    TEMPERATURE COEFFICIENT 
C  126   K89C    MINERALIZATION RATE OF LDOP TO PO4                 /DAY
C  127   K89T    TEMPERATURE COEFFICIENT 
C
C             NITROGEN HYDROLYSIS/MINERALIZATION RATES AT 20 DEG C 
C  128   K1012C  HYDROLYSIS RATE OF RPON TO RDON                    /DAY
C  129   K1012T  TEMPERATURE COEFFICIENT 
C  130   K1113C  HYDROLYSIS RATE OF LPON TO LDON                    /DAY
C  131   K1113T  TEMPERATURE COEFFICIENT 
C  132   K1214C  MINERALIZATION RATE of RDON TO NH4                 /DAY
C  133   K1214T  TEMPERATURE COEFFICIENT 
C  134   K1314C  MINERALIZATION RATE OF LDON TO NH4                 /DAY
C  135   K1314T  TEMPERATURE COEFFICIENT 
C                  NITRIFICATION/DENITIFICATION RATES
C  136   K1415C  NITRIFICATION RATE AT 20 DEG C                     /DAY
C  137   K1415T  TEMPERATURE COEFFICIENT 
C  138   KNIT    HALF SATURATION CONSTANT FOR NITRIF-            MG O2/L
C                ICATION OXYGEN LIMITATION 
C  139   K150C   DENITRIFICATION RATE AT 20 DEG C                   /DAY
C  140   K150T   TEMPERATURE COEFFICIENT 
C  141   KNO3    MICHAELIS CONSTANT FOR DENITRIFICATION          MG O2/L
C                OXYGEN LIMITATION 
C 
C                   SILICA MINERALIZATION RATES AT 20 DEG C 
C  142   K1617C  MINERALIZATION RATE OF BIOGENIC SI TO AVAIL SI     /DAY
C  143   K1617T  TEMPERATURE COEFFICIENT 
C
C                   CARBON HYDROLYSIS/OXIDATION RATES AT 20 DEG C 
C  144   K1820C  HYDROLYSIS RATE OF RPOC TO RDOC                    /DAY
C  145   K1820T  TEMPERATURE COEFFICIENT 
C  146   K1921C  HYDROLYSIS RATE OF LPOC TO LDOC                    /DAY
C  147   K1921T  TEMPERATURE COEFFICIENT 
C  148   K200C   OXIDATION RATE OF RDOC                             /DAY
C  149   K200T   TEMPERATURE COEFFICIENT 
C  150   K210C   OXIDATION RATE OF LDOC                             /DAY
C  151   K210T   TEMPERATURE COEFFICIENT 
C  152   KMLDOC  MICHAELIS CONSTANT FOR LDOC                      MG C/L
C  153   KDOC    HALF SATURATION CONSTANT FOR ORG CARBON         MG O2/L
C  154   K220C   ALGAL EXUDATE DOC OXIDATION RATE                   /DAY
C  155   K220T   TEMPERATURE COEFFICIENT
C  156   FLOCEX  FRACTION OF PRIMARY PRODUCTIVITY GOING TO
C                LABILE ORGANIC CARBON VIA EXUDATION
C
C                REPOC/REDOC ARE ASSOCIATED WITH SANITARY/CSO SOLIDS
C  157   K2324C  HYDROLYSIS RATE OF REPOC TO REDOC                  /DAY
C  158   K2324T  TEMPERATURE COEFFICIENT
C  159   K240C   REACTIVE DOC OXIDATION RATE                        /DAY
C  160   K240T   TEMPERATURE COEFFICIENT
C  161   CTOPCSO CARBON TO PHOSPHORUS RATIO OF CSO SOLIDS
C  162   CTONCSO CARBON TO NITROGEN RATIO OF CSO SOLIDS
C
C  163   K250C   OXIDATION RATE FOR AQUEOUS SOD                     /DAY
C  164   K250T   TEMPERATURE COEFFICIENT
C  165   KO2EQ   HALF SATURATION CONSTANT FOR O2*                MG O2/L
C 
C  166   KLMIN   IF <KAOPT> = 0, THEN KLMIN = KL                   M/DAY
C                IF <KAOPT> > 0, THEN KLMIN = MINIMUM VALUE FOR KL
C  167   DIFUS   DIFFUSIVITY OF OXYGEN ACROSS THE AIR-WATER      M^2/DAY
C                INTERFACE
C  168   KAT     TEMPERATURE CORRECTION COEFFICIENT FOR ATMOSPHERIC
C                  REAERATION
C
C  169   VSBAST  TEMPERATURE CORRECTION
C  170   VSPOM   PARTICULATE ORGANIC MATTER SETTLING RATE          M/DAY
C  171   VSPMT   TEMPERATURE CORRECTION
C  172   VSSEDT  TEMPERATURE CORRECTION FOR DEPOSITION TO SEDIMENT
C  173   BVCSO   POWER COEFF. FOR CSO SOLID SETTLING RATE (>=1) UNITLESS
C  174   CRCSO   CRITICAL REPOC CONC. FOR CSO SETTLING FUNCTION   MG C/L
C  175   VMINCSO MINIMUM SETTLING RATE FOR CSO SOLIDS              M/DAY
C                Vcso = VMINCSO+(VMAXCSO-VMINCSO)*(REPOC/CRCSO)**BVCSO)
C  176   VMAXCSO MAXIMUM SETTLING RATE FOR CSO SOLIDS              M/DAY
C  177   KADPO4  PARTITION COEFFICIENT FOR SORBED PHOSPHORUS     L/MG SS
C  178   KADSI   PARTITION COEFFICIENT FOR SORBED SILICA         L/MG SS
C  179   VSPIM   SETTLING RATE FOR PHOSPHOURS/SILICA SORBED TO     M/DAY
C                SUSPENDED SOLIDS
C  180   KECONST BASE (CHL-A CORRECTED) EXTINCTION COEFFICIENT        /M
C                (USED WHEN KEOPT=0,2)
C 
C***********************************************************************
C 
C     2-D PARAMETERS
C     --------------
C                       NAMES AND DESCRIPTIONS OF PARAMETERS
C 
C       NO  NAME           DESCRIPTION                             UNITS
C 
C        1 KL      TRANSFER COEFFICIENT FOR REAERATION             M/DAY
C        2 VSNET1  SETTLING EFFICIENCY FROM WATER COLUMN                  
C                  TO THE BED FOR ALGAL GROUP NO. 1
C        3 VSNET2  SETTLING EFFICIENCY FROM WATER COLUMN                  
C                  TO THE BED FOR ALGAL GROUP NO. 2
C        4 VSNET3  SETTLING EFFICIENCY FROM WATER COLUMN                  
C                  TO THE BED FOR ALGAL GROUP NO. 3
C        5 VSNET4  SETTLING EFFICIENCY FROM WATER COLUMN                  
C                  TO THE BED FOR NON-LIVING POM
C        6 KEBS    BASE (CHL-A CORRECTED) EXTINCTION COEFFICIENT      /M
C                  (USED WHEN KEOPT=1,3)
C 
C 
C***********************************************************************
C 
C     3-D PARAMETERS
C     --------------
C                       NAMES AND DESCRIPTIONS OF PARAMETERS
C 
C       NO  NAME           DESCRIPTION                             UNITS
C 
C        1 SSLDS   CONCENTRATION OF SUSPENDED SOLIDS             MG SS/L
C
C
C***********************************************************************
C 
C     TIME-VARIABLE FUNCTIONS 
C     ----------------------- 
C        1  ITOTSF  TOTAL DAILY SOLAR RADIATION                   LY/DAY
C        2  F       FRACTION OF DAYLIGHT                             DAY
C        3  WIND    WIND SPEED                                     M/SEC
C        4  KETVF   EXTINCTION COEFFICIENT (USED FOR KEOPT=2,3)       /M
C 
C***********************************************************************
C  
C     THE SEDIMENT SUBROUTINE RETURNS FLUXES BACK....
C      SODS                               [GM O2*/M2-DAY]
C      JHS                                [GM O2*/M2-DAY]
C      JCH4AQ                             [GM O2*/M2-DAY]
C      JCH4G                              [GM O2*/M2-DAY]
C      JNH4                               [MG N/M2-DAY]
C      JPO4                               [MG P/M2-DAY]
C      JNO3                               [MG N/M2-DAY]
C      JSI                                [MG SI/M2-DAY]
C
C 
C***********************************************************************
!
!=======================================================================
! The file was revised to write out state variables in NetCDF format   ! 
!                                 YUN LI, UMCES/HPL Feb-18-2011        !
!=======================================================================
!
      USE netcdf
!
      USE ALLOCEUTRO
      SAVE

      INCLUDE 'RCACM'
      INCLUDE 'NetCDFCM'

      PARAMETER  (NGDMP=28)  ! NUMBER OF GLOBAL DUMP VARIABLES
      CHARACTER   GDNAMES(NGDMP)*8,DDNAMES(5,NOSYS)*8

C        STATE-VARIABLES
      REAL
     .      SAL(NX,NY,NZ)   , CDSAL(NX,NY,NZ)
     .    , PHYT1(NX,NY,NZ) , CDPHYT1(NX,NY,NZ)
     .    , PHYT2(NX,NY,NZ) , CDPHYT2(NX,NY,NZ)
     .    , PHYT3(NX,NY,NZ) , CDPHYT3(NX,NY,NZ)
     .    , RPOP(NX,NY,NZ)  , CDRPOP(NX,NY,NZ)
     .    , LPOP(NX,NY,NZ)  , CDLPOP(NX,NY,NZ)
     .    , RDOP(NX,NY,NZ)  , CDRDOP(NX,NY,NZ)
     .    , LDOP(NX,NY,NZ)  , CDLDOP(NX,NY,NZ)
     .    , PO4T(NX,NY,NZ)  , CDPO4T(NX,NY,NZ)
      REAL
     .      RPON(NX,NY,NZ)  , CDRPON(NX,NY,NZ)
     .    , LPON(NX,NY,NZ)  , CDLPON(NX,NY,NZ)
     .    , RDON(NX,NY,NZ)  , CDRDON(NX,NY,NZ)
     .    , LDON(NX,NY,NZ)  , CDLDON(NX,NY,NZ)
     .    , NH4T(NX,NY,NZ)  , CDNH4T(NX,NY,NZ)
     .    , NO23(NX,NY,NZ)  , CDNO23(NX,NY,NZ)
     .    , BSI(NX,NY,NZ)   , CDBSI(NX,NY,NZ)
     .    , SIT(NX,NY,NZ)   , CDSIT(NX,NY,NZ)
      REAL
     .      RPOC(NX,NY,NZ)  , CDRPOC(NX,NY,NZ)
     .    , LPOC(NX,NY,NZ)  , CDLPOC(NX,NY,NZ)
     .    , RDOC(NX,NY,NZ)  , CDRDOC(NX,NY,NZ)
     .    , LDOC(NX,NY,NZ)  , CDLDOC(NX,NY,NZ)
     .    , EXDOC(NX,NY,NZ) , CDEXDOC(NX,NY,NZ)
     .    , REPOC(NX,NY,NZ) , CDREPOC(NX,NY,NZ)
     .    , REDOC(NX,NY,NZ) , CDREDOC(NX,NY,NZ)	 
     .    , O2EQ(NX,NY,NZ)  , CDO2EQ(NX,NY,NZ)
     .    , DO(NX,NY,NZ)    , CDDO(NX,NY,NZ)
      REAL
     .     ISURF,XKC,KMPHYT,K57C,K57T,K68C,K68T,K710C,K710T,K89C,K89T
     .    ,K1012C,K1012T,K1113C,K1113T,K1214C,K1214T,K1314C,K1314T
     .    ,K1415C,K1415T,KNIT,K150C,K150T,KNO3,K1617C,K1617T
     .    ,K1820C,K1820T,K1921C,K1921T,K200C,K200T,K210C,K210T
     .    ,KMLDOC,KDOC,K220C,K220T,K2324C,K2324T,K240C,K240T,K250C,K250T
     .    ,KO2EQ,KAT,KLMIN,KLVEL,KLWIND,K2CX,K2CNL,K2CNNL,KK2C
     .    ,KAOPT,KEOPT,KECONST,KETVF,KADPO4,KADSI,TA_N,DIC_GR,DIC_AS,DIC_DI
     .	  ,DIC_NI,DIC_RE,DIC_OX    
	 
!-----AIR-SEA CO2 EXCHANGE-----------SCQ_PAR-----------------------------------------
!-------------------------------------------------------------------------------
      REAL
     .     CFF1,CFF2,U10SQU,WIND,SCHMIDTN,CFF3,TEMPK
     .    ,CO2SOL,CO2FLUX,PCO2,SN,TICN,TALKN,PO4N
     .    ,SIO3N,CO2STAR

      REAL
     .     SK151P,CDNH4T1,CDNO231
	 
	  REAL,PARAMETER :: ACOEF = 2073.1
	  REAL,PARAMETER :: BCOEF = 125.62
	  REAL,PARAMETER :: CCOEF = 3.6276
	  REAL,PARAMETER :: DCOEF = 0.043219
	  REAL,PARAMETER :: A1 = -60.2409
	  REAL,PARAMETER :: A2 = 93.4517
	  REAL,PARAMETER :: A3 = 23.3585
	  REAL,PARAMETER :: B1 = 0.023517
	  REAL,PARAMETER :: B2 = -0.023656
	  REAL,PARAMETER :: B3 = 0.0047036
!-----CALCIUM CARBONATE SECTION------------------------------------------------------
      REAL
     .     CFLUX,OMEGA,POC1(NX,NY,NZ),POC2(NX,NY,NZ),POC3(NX,NY,NZ),
     .     VEL,IZ1
	 REAL,DIMENSION(NX,NY,NZ)::CDR
!----------------------------------------------------------------
!----------------------------------------------------------------

      REAL     EXPVALS(2000)
      REAL
     .    KEBS(NX,NY),KL(NX,NY),KA20(NX,NY),CS(NX,NY)
     .   ,VSNET1(NX,NY),VSNET2(NX,NY),VSNET3(NX,NY)
     .   ,VSNET4(NX,NY)
      REAL
     .    CRBP1(3),CRBN1(3),CRBS1(3),CRBP2(3),CRBN2(3),CRBS2(3)
     .   ,CRBP3(3),CRBN3(3),CRBS3(3)
      REAL  
     .    DOAVEG(NX,NY,NZ),DOMING(NX,NY,NZ),DOMAXG(NX,NY,NZ)
     .   ,BOTBOD(NX,NY,NZ),BOTBODHS(NX,NY,NZ),SSLDS(NX,NY,NZ)
     .   ,XEMPRC(NX,NY,NZ)
     .   ,TPOP(NX,NY,NZ),TDOP(NX,NY,NZ),TPON(NX,NY,NZ),TDON(NX,NY,NZ)
     .   ,TPOC(NX,NY,NZ),TDOC(NX,NY,NZ),TPSI(NX,NY,NZ),TRESP(NX,NY,NZ)
     .   ,TGPP(NX,NY,NZ),TNPP(NX,NY,NZ)
      REAL 
     .    K57CT(450),K68CT(450),K710CT(450),K89CT(450)
     .   ,K1012CT(450),K1113CT(450),K1214CT(450),K1314CT(450)
     .   ,K1415CT(450),K150CT(450),K1617CT(450),K1820CT(450)
     .   ,K1921CT(450),K200CT(450),K210CT(450),K220CT(450)
     .   ,K2324CT(450),K240CT(450),K250CT(450),KACT(450)
     .   ,VSPMTS(450)

      INTEGER*2
     .    SYSGDP(40)

C        LINKAGE FOR MASS BALANCE COMPUTATIONS -AND-
C                EUTROPHICATION ALGAL GROWTH ROUTINES
      REAL
     .    DPO4(NX,NY,NZ),DNH4(NX,NY,NZ)
     .   ,DSI(NX,NY,NZ)
      EQUIVALENCE
     .    (CKINARRAY(1,1,1,1),DPO4(1,1,1))
     .   ,(CKINARRAY(1,1,1,2),DNH4(1,1,1))
     .   ,(CKINARRAY(1,1,1,3),DSI(1,1,1))

C        LABELED COMMON FOR EUTROPHICATION ALGAL GROWTH ROUTINES
      REAL
     .    PCRB1(NX,NY,NZ),PCRB2(NX,NY,NZ)
     .   ,PCRB3(NX,NY,NZ)
     .   ,NCRB1(NX,NY,NZ),NCRB2(NX,NY,NZ)
     .   ,NCRB3(NX,NY,NZ)
     .   ,SCRB1(NX,NY,NZ),SCRB2(NX,NY,NZ)
     .   ,SCRB3(NX,NY,NZ)
     .   ,GPP1(NX,NY,NZ),GPP2(NX,NY,NZ) 
     .   ,GPP3(NX,NY,NZ)
     .   ,DPP1(NX,NY,NZ),DPP2(NX,NY,NZ) 
     .   ,DPP3(NX,NY,NZ)
     .   ,RESP(NX,NY,NZ),GRAZ(NX,NY,NZ) 
     .   ,ALG1VS(NX,NY,NZ),ALG2VS(NX,NY,NZ) 
     .   ,ALG3VS(NX,NY,NZ)
      INTEGER
     .    ISTP20(NX,NY,NZ)
      REAL
     .    CHLAVEG(NX,NY,NZ),CHLMING(NX,NY,NZ)   
     .   ,CHLMAXG(NX,NY,NZ),STP20(NX,NY,NZ)
     .   ,CCHL1S(NX,NY,NZ),CCHL2S(NX,NY,NZ)
     .   ,CCHL3S(NX,NY,NZ)
     .   ,PO4SS(NX,NY,NZ),SISS(NX,NY,NZ)
     .   ,RNUTR1(NX,NY,NZ),RNUTR2(NX,NY,NZ)
     .   ,RNUTR3(NX,NY,NZ)
     .   ,RLGHT1(NX,NY,NZ),RLGHT2(NX,NY,NZ)
     .   ,RLGHT3(NX,NY,NZ)
     .   ,ATTENL(NX,NY,NZ),SKE(NX,NY,NZ),KEBASE(NX,NY)
     .   ,PNH41(NX,NY,NZ),PNH42(NX,NY,NZ)
     .   ,PNH43(NX,NY,NZ)
      REAL
     .    K1RBT(450),K1GRZCT(450),K2RBT(450),K2GRZCT(450)
     .   ,K3RBT(450),K3GRZCT(450)
      COMMON /EUTRO/ 
     .    PCRB1,PCRB2,PCRB3,NCRB1,NCRB2,NCRB3,SCRB1,SCRB2,SCRB3
     .   ,ISTP20,STP20,GPP1,GPP2,GPP3,DPP1,DPP2,DPP3,RESP,GRAZ
     .   ,ALG1VS,ALG2VS,ALG3VS,RNUTR1,RNUTR2,RNUTR3
     .   ,RLGHT1,RLGHT2,RLGHT3,ISURF,ATTENL,SKE,KEBASE
     .   ,CHLAVEG,CHLMING,CHLMAXG,CCHL1S,CCHL2S,CCHL3S
     .   ,PNH41,PNH42,PNH43,PO4SS,SISS,WIND !SCQ
     .   ,K1RBT,K1GRZCT,K2RBT,K2GRZCT,K3RBT,K3GRZCT,KLWIND
!!============================================================
!! Yun Li/SCQ, DIAGNOSTIC OUTPUT
     .   ,ITOTSF 
!      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: TDIAG10, TDIAG11 
	  REAL, ALLOCATABLE, DIMENSION(:,:,:) :: GDIAG1,GDIAG2
     .   ,GDIAG3,GDIAG4,GDIAG5,GDIAG6,GDIAG7,GDIAG12,GDIAG13,GDIAG8 
	  REAL, ALLOCATABLE, DIMENSION(:,:) :: GDIAG9,GDIAG10
     .   ,GDIAG11,GDIAG14  
!!============================================================

C        REAL AND LABELED COMMON FOR LINKING WATER COLUMN AND
C             SEDIMENT SUBMODELS
      REAL   SODS(NX,NY),JHS(NX,NY),JNH4(NX,NY)
     .      ,JPO4(NX,NY),JNO3(NX,NY),JSI(NX,NY)
     .      ,JCH4AQ(NX,NY),JCH4G(NX,NY)
      COMMON /FLUXES/
     .    DEPFLUX(NX,NY,13),CFLUXS(NX,NY,8)
      EQUIVALENCE
     .   (CFLUXS(1,1,1),SODS(1,1))   , (CFLUXS(1,1,2),JHS(1,1))
     .  ,(CFLUXS(1,1,3),JCH4AQ(1,1)) , (CFLUXS(1,1,4),JCH4G(1,1))
     .  ,(CFLUXS(1,1,5),JNH4(1,1))   , (CFLUXS(1,1,6),JNO3(1,1))
     .  ,(CFLUXS(1,1,7),JPO4(1,1))   , (CFLUXS(1,1,8),JSI(1,1))

C        LABELED COMMON FOR SEGMENT KES
      COMMON /WCKE/ IKE,NKE,TKE(7320)

      EQUIVALENCE
     .  (CARAY(1,1,1,1),SAL(1,1,1))   ,(CDARAY(1,1,1,1),CDSAL(1,1,1))
     . ,(CARAY(1,1,1,2),PHYT1(1,1,1)) ,(CDARAY(1,1,1,2),CDPHYT1(1,1,1))
     . ,(CARAY(1,1,1,3),PHYT2(1,1,1)) ,(CDARAY(1,1,1,3),CDPHYT2(1,1,1))
     . ,(CARAY(1,1,1,4),PHYT3(1,1,1)) ,(CDARAY(1,1,1,4),CDPHYT3(1,1,1))
     . ,(CARAY(1,1,1,5),RPOP(1,1,1))  ,(CDARAY(1,1,1,5),CDRPOP(1,1,1))
     . ,(CARAY(1,1,1,6),LPOP(1,1,1))  ,(CDARAY(1,1,1,6),CDLPOP(1,1,1))
     . ,(CARAY(1,1,1,7),RDOP(1,1,1))  ,(CDARAY(1,1,1,7),CDRDOP(1,1,1))
     . ,(CARAY(1,1,1,8),LDOP(1,1,1))  ,(CDARAY(1,1,1,8),CDLDOP(1,1,1))
     . ,(CARAY(1,1,1,9),PO4T(1,1,1))  ,(CDARAY(1,1,1,9),CDPO4T(1,1,1))
      EQUIVALENCE
     .  (CARAY(1,1,1,10),RPON(1,1,1)) ,(CDARAY(1,1,1,10),CDRPON(1,1,1))
     . ,(CARAY(1,1,1,11),LPON(1,1,1)) ,(CDARAY(1,1,1,11),CDLPON(1,1,1))
     . ,(CARAY(1,1,1,12),RDON(1,1,1)) ,(CDARAY(1,1,1,12),CDRDON(1,1,1))
     . ,(CARAY(1,1,1,13),LDON(1,1,1)) ,(CDARAY(1,1,1,13),CDLDON(1,1,1))
     . ,(CARAY(1,1,1,14),NH4T(1,1,1)) ,(CDARAY(1,1,1,14),CDNH4T(1,1,1))
     . ,(CARAY(1,1,1,15),NO23(1,1,1)) ,(CDARAY(1,1,1,15),CDNO23(1,1,1))
     . ,(CARAY(1,1,1,16),BSI(1,1,1))  ,(CDARAY(1,1,1,16),CDBSI(1,1,1))
     . ,(CARAY(1,1,1,17),SIT(1,1,1))  ,(CDARAY(1,1,1,17),CDSIT(1,1,1))
      EQUIVALENCE
     .  (CARAY(1,1,1,18),RPOC(1,1,1)) ,(CDARAY(1,1,1,18),CDRPOC(1,1,1))
     . ,(CARAY(1,1,1,19),LPOC(1,1,1)) ,(CDARAY(1,1,1,19),CDLPOC(1,1,1))
     . ,(CARAY(1,1,1,20),RDOC(1,1,1)) ,(CDARAY(1,1,1,20),CDRDOC(1,1,1))
     . ,(CARAY(1,1,1,21),LDOC(1,1,1)) ,(CDARAY(1,1,1,21),CDLDOC(1,1,1))
     . ,(CARAY(1,1,1,22),EXDOC(1,1,1)),(CDARAY(1,1,1,22),CDEXDOC(1,1,1))
     . ,(CARAY(1,1,1,23),REPOC(1,1,1)),(CDARAY(1,1,1,23),CDREPOC(1,1,1))
     . ,(CARAY(1,1,1,24),REDOC(1,1,1)),(CDARAY(1,1,1,24),CDREDOC(1,1,1))	 
     . ,(CARAY(1,1,1,25),O2EQ(1,1,1)) ,(CDARAY(1,1,1,25),CDO2EQ(1,1,1))
     . ,(CARAY(1,1,1,26),DO(1,1,1))   ,(CDARAY(1,1,1,26),CDDO(1,1,1))

      EQUIVALENCE 
     .   (CONST(1),AGMOPT)  , (CONST(2),ACTALG)  , (CONST(3),KAOPT)   ,
     .   (CONST(4),KEOPT)   , (CONST(5),OPTION5) , (CONST(6),OPTION6)
      EQUIVALENCE
     .   (CONST(105),KMPHYT),
     .   (CONST(106),FRPOP) , (CONST(107),FLPOP) , (CONST(108),FRDOP) ,
     .   (CONST(109),FLDOP) , (CONST(110),FPO4)  ,
     .   (CONST(111),FRPON) , (CONST(112),FLPON) , (CONST(113),FRDON) ,
     .   (CONST(114),FLDON) , (CONST(115),FNH4)  ,
     .   (CONST(116),FRPOC) , (CONST(117),FLPOC) , (CONST(118),FRDOC) ,
     .   (CONST(119),FLDOC) , (CONST(120),K57C)  , (CONST(121),K57T)  ,
     .   (CONST(122),K68C)  , (CONST(123),K68T)  , (CONST(124),K710C) , 
     .   (CONST(125),K710T) , (CONST(126),K89C)  , (CONST(127),K89T)
      EQUIVALENCE
     .   (CONST(128),K1012C), (CONST(129),K1012T), (CONST(130),K1113C),
     .   (CONST(131),K1113T), (CONST(132),K1214C), (CONST(133),K1214T),
     .   (CONST(134),K1314C), (CONST(135),K1314T), (CONST(136),K1415C),
     .   (CONST(137),K1415T), (CONST(138),KNIT)  , (CONST(139),K150C) ,
     .   (CONST(140),K150T) , (CONST(141),KNO3)  , (CONST(142),K1617C),
     .   (CONST(143),K1617T), (CONST(144),K1820C), (CONST(145),K1820T),
     .   (CONST(146),K1921C), (CONST(147),K1921T), (CONST(148),K200C) ,
     .   (CONST(149),K200T) , (CONST(150),K210C) , (CONST(151),K210T)
      EQUIVALENCE
     .   (CONST(152),KMLDOC), (CONST(153),KDOC)  , (CONST(154),K220C) ,
     .   (CONST(155),K220T) , (CONST(156),FLOCEX), (CONST(157),K2324C),
     .   (CONST(158),K2324T), (CONST(159),K240C) , (CONST(160),K240T) ,
     .   (CONST(161),CTOPCSO),(CONST(162),CTONCSO),(CONST(163),K250C) ,
     .   (CONST(164),K250T) , (CONST(165),KO2EQ) , (CONST(166),KLMIN) ,
     .   (CONST(167),DIFUS) , (CONST(168),KAT)   , (CONST(169),VSBAST),
     .   (CONST(170),VSPOM) , (CONST(171),VSPMT) , (CONST(172),VSSEDT),
     .   (CONST(173),BVCSO) , (CONST(174),CRCSO) , (CONST(175),VMINCSO),
     .   (CONST(176),VMAXCSO),(CONST(177),KADPO4), (CONST(178),KADSI),
     .   (CONST(179),VSPIM) , (CONST(180),KECONST)

      EQUIVALENCE 
     .     (CRBP1(1),CRBP11) , (CRBP1(2),CRBP12) , (CRBP1(3),CRBP13)
     .   , (CRBN1(1),CRBN11) , (CRBN1(2),CRBN12) , (CRBN1(3),CRBN13)
     .   , (CRBS1(1),CRBS11) , (CRBS1(2),CRBS12) , (CRBS1(3),CRBS13)
     .   , (CRBP2(1),CRBP21) , (CRBP2(2),CRBP22) , (CRBP2(3),CRBP23)
     .   , (CRBN2(1),CRBN21) , (CRBN2(2),CRBN22) , (CRBN2(3),CRBN23)
     .   , (CRBS2(1),CRBS21) , (CRBS2(2),CRBS22) , (CRBS2(3),CRBS23)
     .   , (CRBP3(1),CRBP31) , (CRBP3(2),CRBP32) , (CRBP3(3),CRBP33)
     .   , (CRBN3(1),CRBN31) , (CRBN3(2),CRBN32) , (CRBN3(3),CRBN33)
     .   , (CRBS3(1),CRBS31) , (CRBS3(2),CRBS32) , (CRBS3(3),CRBS33)

      EQUIVALENCE 
     .   (PARAM2D(1,1,1),KL(1,1))     , (PARAM2D(1,1,2),VSNET1(1,1))
     . , (PARAM2D(1,1,3),VSNET2(1,1)) , (PARAM2D(1,1,4),VSNET3(1,1))
     . , (PARAM2D(1,1,5),VSNET4(1,1)) , (PARAM2D(1,1,6),KEBS(1,1))

      EQUIVALENCE 
     .   (PARAM3D(1,1,1,1),SSLDS(1,1,1))

      REAL    VARRAY(NX,NY,NZ,25)
      EQUIVALENCE    (SCRATCH_KIN(1,1,1,1),VARRAY(1,1,1,1))
      REAL
     .      SAL_DDA(NX,NY,NZ)    , SAL_DMIN(NX,NY,NZ)
     .    , SAL_DMAX(NX,NY,NZ)
     .    , PHYT1_DDA(NX,NY,NZ)  , PHYT2_DDA(NX,NY,NZ)
     .    , PHYT3_DDA(NX,NY,NZ)
     .    , CCHL1_DDA(NX,NY,NZ)   , CCHL2_DDA(NX,NY,NZ)   
     .    , CCHL3_DDA(NX,NY,NZ)
     .    , CHLA1_DDA(NX,NY,NZ)   , CHLA2_DDA(NX,NY,NZ)   
     .    , CHLA3_DDA(NX,NY,NZ)
      REAL  RNUTR1_DDA(NX,NY,NZ),GPDP1_DDA(NX,NY,NZ)
     .    , RNUTR2_DDA(NX,NY,NZ),GPDP2_DDA(NX,NY,NZ)
     .    , RNUTR3_DDA(NX,NY,NZ),GPDP3_DDA(NX,NY,NZ)
      EQUIVALENCE
     .   (VARRAY(1,1,1,1),TPOP(1,1,1)) , (VARRAY(1,1,1,1),TDOP(1,1,1))
     .  ,(VARRAY(1,1,1,1),TPON(1,1,1)) , (VARRAY(1,1,1,1),TDON(1,1,1))
     .  ,(VARRAY(1,1,1,1),TPOC(1,1,1)) , (VARRAY(1,1,1,1),TDOC(1,1,1))
     .  ,(VARRAY(1,1,1,1),TPSI(1,1,1)) , (VARRAY(1,1,1,1),TRESP(1,1,1))
     .  ,(VARRAY(1,1,1,1),TGPP(1,1,1)) , (VARRAY(1,1,1,1),TNPP(1,1,1))
      EQUIVALENCE
     .   (VARRAY(1,1,1,2),SAL_DDA(1,1,1))
     .  ,(VARRAY(1,1,1,3),PHYT1_DDA(1,1,1))
     .  ,(VARRAY(1,1,1,4),PHYT2_DDA(1,1,1))
     .  ,(VARRAY(1,1,1,5),PHYT3_DDA(1,1,1))
     .  ,(VARRAY(1,1,1,6),CHLA1_DDA(1,1,1))
     .  ,(VARRAY(1,1,1,7),CHLA2_DDA(1,1,1))
     .  ,(VARRAY(1,1,1,8),CHLA3_DDA(1,1,1))
     .  ,(VARRAY(1,1,1,9),CCHL1_DDA(1,1,1))
     .  ,(VARRAY(1,1,1,10),CCHL2_DDA(1,1,1))
     .  ,(VARRAY(1,1,1,11),CCHL3_DDA(1,1,1))
     .  ,(VARRAY(1,1,1,12),SAL_DMIN(1,1,1))
     .  ,(VARRAY(1,1,1,13),SAL_DMAX(1,1,1))
!
!-----------------------------------------------------------------------
! Name of this rca file
!-----------------------------------------------------------------------
!
      RCANA='eutro.f'
!
!----------------------------------------------------------------------
! Create NetCDF file for eutrophication diagnostics output
!----------------------------------------------------------------------
!
      IF(NETCDFOPT.EQ.1 .AND. ncIREC.EQ.1) THEN
        nlen_HYDFILNA=LEN(ADJUSTL(TRIM(HYDFILNA(IHYDFILE)))) !HYDFILNA HYDRODYNAMIC FILE
        DIAFILNA = TRIM(DIAFILPX)
     .           //HYDFILNA(IHYDFILE)(nlen_HYDFILNA-7:nlen_HYDFILNA)
        CALL nccrt_rcasys(DIAFILNA)
      ENDIF
!
!----------------------------------------------------------------------
! Create NetCDF file for setdiment output
!----------------------------------------------------------------------
!
      IF(NETCDFOPT.EQ.1 .AND. ncIREC.EQ.1) THEN
        nlen_HYDFILNA=LEN(ADJUSTL(TRIM(HYDFILNA(IHYDFILE))))
        sedOUTFILNA = TRIM(SEDFILPX)
     .           //HYDFILNA(IHYDFILE)(nlen_HYDFILNA-7:nlen_HYDFILNA)
        CALL nccrt_rcasys(sedOUTFILNA) ! CREAT NETCDF FILE FOR OUTPUT
        ncIREC_sed=1
      ENDIF
!
!----------------------------------------------------------------------
! Create NetCDF file for restart
!----------------------------------------------------------------------
!
      IF(NETCDFOPT.EQ.1 .AND. rstTflag.EQ.0) THEN
      ! eutrophication
        RSTFILNA = TRIM(OUTFILPX)//'_rst.nc'
        CALL nccrt_rcasys(RSTFILNA)
      ! sediment
        sedRSTFILNA = TRIM(SEDFILPX)//'_rst.nc'
        CALL nccrt_rcasys(sedRSTFILNA)
      ENDIF

C        PROVIDE INITIALIZATION, IF FIRST TIME THROUGH -FABLE-
      IF(INITB.GE.1)   GO TO 50  ! INITIALIZATION 
      NOKINSYS=3
      NPHYT = ACTALG+0.5

C        CHECK THAT RECYCLE FRACTIONS ADD UP TO "1"
      SUMP = FRPOP+FLPOP+FRDOP+FLDOP+FPO4
      SUMN = FRPON+FLPON+FRDON+FLDON+FNH4
      SUMC = FRPOC+FLPOC+FRDOC+FLDOC
      IF((SUMP-1.0).GE.0.001)  WRITE(OUT,4000) SUMP,FRPOP,FLPOP,FRDOP,
     .                                         FLDOP,FPO4
 4000 FORMAT(
     .  10X,'INPUT ERROR IN "CONSTANTS" INPUT FILE'/
     .  10X,'SUM OF PHOSPHORUS RECYCLE FRACTIONS DOES NOT EQUAL 1.0'/
     .  10X,'SUM = FRPOP + FLPOP + FRDOP + FLDOP + FPO4'/
     .   5X,6F8.3/10X,'RCA TERMINATED')
      IF((SUMN-1.0).GE.0.001)  WRITE(OUT,4010) SUMN,FRPON,FLPON,FRDON,
     .                                         FLDON,FNH4
 4010 FORMAT(
     .  10X,'INPUT ERROR IN "CONSTANTS" INPUT FILE'/
     .  10X,'SUM OF PHOSPHORUS RECYCLE FRACTIONS DOES NOT EQUAL 1.0'/
     .  10X,'SUM = FRPON + FLPON + FRDON + FLDON + FNH4'/
     .   5X,6F8.3/10X,'RCA TERMINATED')
      IF((SUMC-1.0).GE.0.001)  WRITE(OUT,4020) SUMC,FRPOC,FLPOC,FRDOC,
     .                                         FLDOC
 4020 FORMAT(
     .  10X,'INPUT ERROR IN "CONSTANTS" INPUT FILE'/
     .  10X,'SUM OF PHOSPHORUS RECYCLE FRACTIONS DOES NOT EQUAL 1.0'/
     .  10X,'SUM = FRPOC + FLPOC + FRDOC + FLDOC'/
     .   5X,5F8.3/10X,'RCA TERMINATED')
      IF((SUMP-1.0).GE.0.001)  CALL EXIT
      IF((SUMN-1.0).GE.0.001)  CALL EXIT
      IF((SUMC-1.0).GE.0.001)  CALL EXIT

C        ALLOCATE TEMPORARY STORAGE ARRAY
      ALLOCATE(SK1415(NX,NY,NZ),STAT=ISTAT)
      ALLOCATE(SK2614(NX,NY,NZ),STAT=ISTAT)
      ALLOCATE(SK150(NX,NY,NZ),STAT=ISTAT)
      ALLOCATE(SK2114(NX,NY,NZ),STAT=ISTAT)
      ALLOCATE(SK15P(NX,NY,NZ),STAT=ISTAT)
      ALLOCATE(SK200(NX,NY,NZ),STAT=ISTAT)
      ALLOCATE(SK210(NX,NY,NZ),STAT=ISTAT)
      ALLOCATE(SK220(NX,NY,NZ),STAT=ISTAT)
      ALLOCATE(SK240(NX,NY,NZ),STAT=ISTAT)
      ALLOCATE(SK250(NX,NY,NZ),STAT=ISTAT)
      ALLOCATE(SR260(NX,NY,NZ),STAT=ISTAT)
      ALLOCATE(SK2324(NX,NY,NZ),STAT=ISTAT)
      ALLOCATE(SK26OC(NX,NY,NZ),STAT=ISTAT)
	  

C        CHECK FOR MULTI-YEAR RUN...IF SO GET "OLD" INITIAL CONDITIONS,
C        I.E., FINAL CONCENTRATIONS FROM PREVIOUS RUN, FROM RCAFIC FILE
C
C     IF(CYCLE.EQ.1)  THEN
C        READ(15)   CARAY
C        REWIND 15
C     ENDIF

C        SET-UP AND WRITE INFORMATION NEEDED BY GDP
      DO ISYS=1,40
        IF(ISYS.LE.NGDMP)  THEN
          SYSGDP(ISYS)=0
        ELSE
          SYSGDP(ISYS)=1
        ENDIF
      ENDDO
C        FIRST ... NAMES OF THE GLOBAL DUMP VARIABLES
      GDNAMES( 1) = 'Salinity'
      GDNAMES( 2) = 'Phyt1'
      GDNAMES( 3) = 'Phyt2'
      GDNAMES( 4) = 'Phyt3'
      GDNAMES( 5) = 'TPOP'
      GDNAMES( 6) = 'TDOP'
      GDNAMES( 7) = 'DPO4'
      GDNAMES( 8) = 'TPON'
      GDNAMES( 9) = 'TDON'
      GDNAMES(10) = 'DNH4'
      GDNAMES(11) = 'NO23'
      GDNAMES(12) = 'TPSi'
      GDNAMES(13) = 'DSi'
      GDNAMES(14) = 'TPOC'
      GDNAMES(15) = 'TDOC'
      GDNAMES(16) = 'O2EQ'
      GDNAMES(17) = 'DOAVE'
      GDNAMES(18) = 'DOMIN'
      GDNAMES(19) = 'DOMAX'
      GDNAMES(20) = 'ECOMSal'
      GDNAMES(21) = 'Chlave'
!      GDNAMES(22) = 'Chlmin'
!      GDNAMES(23) = 'Chlmax'
      GDNAMES(22) = 'REDOC'
      GDNAMES(23) = 'REPOC'	  
      GDNAMES(24) = 'Gross PP'
      GDNAMES(25) = 'Net PP'
      GDNAMES(26) = 'TResp'
      GDNAMES(27) = 'ECOMTemp'
      GDNAMES(28) = 'SKE'
!
!-------------------------------------------------------
! Optionally rewrite the RCAF10 FILE
!-------------------------------------------------------
!
      IF(NETCDFOPT.EQ.1) THEN
      ELSE
C               REWRITE RCAF10 FILE
       REWIND(10)
       WRITE(10)   NX,NY,NZ,NOSYS,NGDMP
       WRITE(10)   GDNAMES
       WRITE(10)   SYSGDP
       WRITE(10)   FSM   !LAND MASK
      ENDIF

C        WRITE DDNAMES TO RCAF12
      WRITE(12)  DDNAMES
	  
C        ZERO NON-ACTIVE PHYTOPLANKTON TERMS
      IF(NPHYT.EQ.1)  THEN
       DO 4 IZ=1,NZ
        DO 4 IY=1,NY
         DO 4 IX=1,NX
          PHYT2(IX,IY,IZ)=0.
          GPP2(IX,IY,IZ)=0.
          DPP2(IX,IY,IZ)=0.
          PNH42(IX,IY,IZ)=0.
          SYSBY(3)=1   !VECTOR FOR BY PASS
          PHYT3(IX,IY,IZ)=0.
          GPP3(IX,IY,IZ)=0.
          DPP3(IX,IY,IZ)=0.
          PNH43(IX,IY,IZ)=0.
          SYSBY(4)=1
    4    CONTINUE
       ELSEIF(NPHYT.EQ.2)  THEN
       DO 6 IZ=1,NZ
        DO 6 IY=1,NY
         DO 6 IX=1,NX
          PHYT3(IX,IY,IZ)=0.
          GPP3(IX,IY,IZ)=0.
          DPP3(IX,IY,IZ)=0.
          PNH43(IX,IY,IZ)=0.
          SYSBY(4)=1
    6    CONTINUE
      ENDIF

C        COMPUTE TERMS FOR VARIABLE NUTRIENT STOICHIOMETRY
C        CHECK FOR STANDARD EUTRO KINETICS OR LAWS-CHALUP EUTRO KINETICS
      IF(AGMOPT.EQ.0)  THEN
         CALL INIT_STD_EUTRO
      ELSE IF(AGMOPT.EQ.1)  THEN
         CALL INIT_LC_EUTRO
      ELSE
        WRITE(OUT,9000)  AGMOPT
 9000   FORMAT(///5X,'INPUT ERROR ... INVALID OPTION FOR <AGMOPT>'/
     .            5X,'A VALUE OF ',I4,' WAS ASSIGNED'//)
        CALL EXIT
      ENDIF


C        COMPUTE VALUES OF EXP(-X) FOR  X = 0 TO 10 IN 0.005 INCREMENTS
      DO  I=1,2000
       EXPVALS(I) = EXP(-(FLOAT(I-1)/200.+0.0025))
      ENDDO

C        OXYGEN TO CARBON RATIO (2*16/12)
      OCRB = 2.6667*1.1

      IF(KEOPT.EQ.0.)  THEN
        DO IY=1,NY
         DO IX=1,NX
          IF(FSM(IX,IY).EQ.1.) THEN
           KEBASE(IX,IY) = KECONST
          ELSE
           KEBASE(IX,IY) = 0.
          ENDIF
         ENDDO
        ENDDO
      ELSEIF(KEOPT.EQ.1.)  THEN
        DO IY=1,NY
         DO IX=1,NX
          IF(FSM(IX,IY).EQ.1.) THEN
           KEBASE(IX,IY) = KEBS(IX,IY)
          ELSE
           KEBASE(IX,IY) = 0.
          ENDIF
         ENDDO
        ENDDO
      ELSEIF(KEOPT.EQ.4.) THEN
!
!-------------------------------------------------------------------
!  Optionally read KEBASE
!-------------------------------------------------------------------
!
        IF(NETCDFOPT.EQ.1) THEN
          IKE=1
          status=nf90_open(TRIM(ADJUSTL(KINFILNA(2))),
     .                     nf90_nowrite,ncID_prm)
          CALL nccheck_status(status,KINFILNA(2),RCANA)
          CALL ncprm_set_TSS(ncID_prm,idTSS_time,idTSS,IKE,
     .                       NKE,TKE,KEBASE)  ! TSS values is in KEBASE
!
!  Derive KEBASE USING TSS and SALINITY (Xu. et al. Estuaries, 2005
!  Eq. 11a and 11b). We treat the second term of [CHL] as self-shading
!  and other terms as KEBASE.
!
!  Kd = 1.80 - 0.0044[CHL] + 0.0673[TSS] - 0.0960[SAL] (S<=15)
!  Kd = 1.17 + 0.0240[CHL] + 0.0060[TSS] - 0.0225[SAL] (S>15)
!  
!    S: salinity (psu)
!  CHL: chl-a (mg/m3 or ug/L)
!  TSS: total suspended solids (g/m3 or mg/L)
!
          DO IX=1,NX
          DO IY=1,NY
            IF(SAL(IX,IY,1) .LE. 15.0) THEN
             KEBASE(IX,IY)=1.80+0.0673*KEBASE(IX,IY)-0.0960*SAL(IX,IY,1)
             IF (IY .GE. 114) THEN
               KEBASE(IX,IY)=KEBASE(IX,IY)*0.67
             ELSE
               KEBASE(IX,IY)=KEBASE(IX,IY)*0.67 
             ENDIF
            ELSE
             KEBASE(IX,IY)=1.17+0.006*KEBASE(IX,IY)-0.0225*SAL(IX,IY,1)
            ENDIF
            IF(FSM(IX,IY).EQ.0) KEBASE(IX,IY)=0.0
          ENDDO
          ENDDO
          ! Increase KE in Patapsco and Choptank to prevent huge blooms. Added by JT, June 3 2012
          KEBASE(30,105)=KEBASE(30,105)*5
          KEBASE(31,105)=KEBASE(31,105)*5
          KEBASE(32,105)=KEBASE(32,105)*5
          KEBASE(33,105)=KEBASE(33,105)*5
          KEBASE(34,105)=KEBASE(34,105)*5
          KEBASE(35,105)=KEBASE(35,105)*5
          KEBASE(79,79) =KEBASE(79,79)*5   
          KEBASE(78,79) =KEBASE(78,79)*5
          KEBASE(80,79) =KEBASE(80,79)*5
          KEBASE(78,80) =KEBASE(78,80)*5

          status=nf90_close(ncID_prm)
          CALL nccheck_status(status,KINFILNA(2),RCANA)
        ELSE
C        READ TIME-VARIABLE EXTINCTION COEFFICIENTS
          OPEN(28,FILE=KINFILNA(2),FORM='FORMATTED')
C        READ TIME INTERVALS TO UPDATE EXTINCTION COEFFICIENTS (DAYS)
          READ(28,1200)  NKE,(TKE(I),I=1,NKE)
 1200     FORMAT(I5/(8F10.0))
          READ(28,1300,ERR=910)  ((KEBASE(IX,IY),IX=1,NX),IY=1,NY)
 1300     FORMAT(8F10.0)
        ENDIF

        IF(LIST(4).EQ.1) THEN
         WRITE(OUT,1155) TKE(IKE)
 1155    FORMAT(//30X,'SEGMENT KEs (/METER) AT TIME = ',F5.0/
     .   6X,'X-->',25X,2(24X,'1'),24X,'2'/4X,'Y',5X,2(24X,'5',24X,'0')/)
         DO IY=1,NY
          WRITE(OUT,1156)  IY,(KEBASE(IX,IY),IX=1,NX)
 1156     FORMAT(I5,5X,20F5.1/(6X,20F5.1))
         ENDDO
        ENDIF

        IKE=2
      ENDIF

C        COMPUTE REAERATION AT 20 DEG C
      DO 10 IY=1,NY
       DO 10 IX=1,NX
        IF(FSM(IX,IY).EQ.1.)  THEN
         IF(KAOPT.EQ.0.)  THEN
           KA20(IX,IY) = KLMIN/(HBAR(IX,IY)*DZ(1))
         ELSEIF(KAOPT.EQ.1.) THEN
           KA20(IX,IY) = KL(IX,IY)/(HBAR(IX,IY)*DZ(1))
         ELSEIF(KAOPT.EQ.2.) THEN
           QXAVE=(QX(IX,IY,1)/XAX(IX,IY,1)+QX(IX+1,IY,1)/XAX(IX+1,IY,1))
     .              /MIN((FSM(IX,IY)+ABS(FSM(IX+1,IY))),2.0)
           QYAVE=(QY(IX,IY,1)/XAY(IX,IY,1)+QY(IX,IY+1,1)/XAY(IX,IY+1,1))
     .              /MIN((FSM(IX,IY)+ABS(FSM(IX,IY+1))),2.0)
           QVECT1 = SQRT(QXAVE*QXAVE + QYAVE*QYAVE)
           QXAVE=(QX(IX,IY,2)/XAX(IX,IY,2)+QX(IX+1,IY,2)/XAX(IX+1,IY,2))
     .              /MIN((FSM(IX,IY)+ABS(FSM(IX+1,IY))),2.0)
           QYAVE=(QY(IX,IY,2)/XAY(IX,IY,2)+QY(IX,IY+1,2)/XAY(IX,IY+1,2))
     .              /MIN((FSM(IX,IY)+ABS(FSM(IX,IY+1))),2.0)
           QVECT2 = SQRT(QXAVE*QXAVE + QYAVE*QYAVE)
           KLVEL = SQRT(DIFUS*ABS(QVECT1-QVECT2)/
     .                      (HBAR(IX,IY)*(DZ(1)+DZ(2))/2.))
           KA20(IX,IY) = MAX(KLMIN,KLVEL)/(HBAR(IX,IY)*DZ(1))
         ELSEIF(KAOPT.EQ.3.) THEN
           KA20(IX,IY) = MAX(KLMIN,KLWIND)/(HBAR(IX,IY)*DZ(1))
         ELSE
                 WRITE(OUT,8900)   IFIX(KAOPT)
 8900      FORMAT(///5X,'INVALID OPTION FOR KAOPT (VALUE =',I3,')'/
     .               5X,'RCA TERMINATED')
         ENDIF
        ENDIF
   10 CONTINUE

C        SET REAERATION TERM FOR OXYGEN TO ZERO
      DO 15 IZ=1,NZ
       DO 15 IY=1,NY
        DO 15 IX=1,NX
         SR260(IX,IY,IZ) = 0.0
   15 CONTINUE

C        SETUP TEMPERATURE-CORRECTED REACTION RATES IN TABLE-LOOKUP FORM
      DO  ITEMP=1,450
        TEMP = (FLOAT(ITEMP-1)/10.+0.05) - 20.
        K57CT(ITEMP) = K57C*K57T**TEMP
        K68CT(ITEMP) = K68C*K68T**TEMP
        K710CT(ITEMP) = K710C*K710T**TEMP
        K89CT(ITEMP) = K89C*K89T**TEMP
        K1012CT(ITEMP) = K1012C*K1012T**TEMP
        K1113CT(ITEMP) = K1113C*K1113T**TEMP
        K1214CT(ITEMP) = K1214C*K1214T**TEMP
        K1314CT(ITEMP) = K1314C*K1314T**TEMP
        K1415CT(ITEMP) = K1415C*K1415T**TEMP
Cjrw Add temperature limitation to nitrification
        IF(ITEMP.LE.100.) K1415CT(ITEMP)=0.
        IF(ITEMP.GT.100. .AND.ITEMP.LT.140.)
     .     K1415CT(ITEMP)= (FLOAT(ITEMP-100)/40.)*K1415CT(ITEMP)
        K150CT(ITEMP) = K150C*K150T**TEMP
        K1617CT(ITEMP) = K1617C*K1617T**TEMP
        K1820CT(ITEMP) = K1820C*K1820T**TEMP
        K1921CT(ITEMP) = K1921C*K1921T**TEMP
        K200CT(ITEMP) = K200C*K200T**TEMP
        K210CT(ITEMP) = K210C*K210T**TEMP
        K220CT(ITEMP) = K220C*K220T**TEMP
        K2324CT(ITEMP) = K2324C*K2324T**TEMP
        K240CT(ITEMP) = K240C*K240T**TEMP
        K250CT(ITEMP) = K250C*K250T**TEMP
        KACT(ITEMP) = KAT**TEMP
        VSPMTS(ITEMP) = VSPMT**TEMP
      ENDDO

C        SET AVE,MIN,MAX CONCENTRATIONS FOR GLOBAL DUMP ARRAYS
c$doacross local(iz,iy,ix) , share(chlaveg,chlmaxg,chlming),
c$& share(doaveg,doming,domaxg)
      DO 20 IZ=1,NZ
       DO 20 IY=1,NY
        DO 20 IX=1,NX
          CHLAVEG(IX,IY,IZ) = 0.
          DOAVEG(IX,IY,IZ) = 0.
          CHLMING(IX,IY,IZ) = 1000000.
          DOMING(IX,IY,IZ) = 1000.
          CHLMAXG(IX,IY,IZ) = -1000.
          DOMAXG(IX,IY,IZ) = -1000.
   20 CONTINUE
      IAVGGDCNTR = 0
      IAVGPPCNTR = 0

C        ALLOCATE AND INITIALIZE ARRAYS FOR GLOBAL DUMP AVERAGING, IF REQUIRED
      IF(IGDOPT.EQ.1)  THEN
       ALLOCATE(SAL_GDA(NX,NY,NZ),PHYT1_GDA(NX,NY,NZ))
       ALLOCATE(PHYT2_GDA(NX,NY,NZ),PHYT3_GDA(NX,NY,NZ))
       ALLOCATE(TPOP_GDA(NX,NY,NZ),TDOP_GDA(NX,NY,NZ))
       ALLOCATE(TPON_GDA(NX,NY,NZ),TDON_GDA(NX,NY,NZ))
       ALLOCATE(REDOC_GDA(NX,NY,NZ),REPOC_GDA(NX,NY,NZ))	   
       ALLOCATE(TPOC_GDA(NX,NY,NZ),TDOC_GDA(NX,NY,NZ))
       ALLOCATE(DPO4_GDA(NX,NY,NZ),DNH4_GDA(NX,NY,NZ))
       ALLOCATE(NO23_GDA(NX,NY,NZ),DSI_GDA(NX,NY,NZ))
       ALLOCATE(O2EQ_GDA(NX,NY,NZ),BOTBODHS_GDA(NX,NY,NZ))
       ALLOCATE(TGPP_GDA(NX,NY,NZ),TNPP_GDA(NX,NY,NZ))
       ALLOCATE(TRESP_GDA(NX,NY,NZ),SKE_GDA(NX,NY,NZ))
       ALLOCATE(ECMTMP_GDA(NX,NY,NZ),ECMSAL_GDA(NX,NY,NZ))
       ALLOCATE(TPSI_GDA(NX,NY,NZ))
c$doacross local(iz,iy,ix) , share(sal_gda,ecmsal_gda),
c$& share(phyt1_gda,phyt2_gda,phyt3_gda),
c$& share(tpop_gda,tdop_gda,dpo4_gda),
c$& share(tpon_gda,tdon_gda,dnh4_gda,no23_gda),
c$& share(tpoc_gda,tdoc_gda,tpsi_gda,dsi_gda),
c$& share(o2eq_gda,rcatmp_gda,ecmtmp_gda,ske_gda),
c$& share(tgpdp_gda,tresp_gda,botbodhs_gda)
        DO 25 IZ=1,NZ
         DO 25 IY=1,NY
          DO 25 IX=1,NX
            SAL_GDA(IX,IY,IZ) = 0.
            ECMSAL_GDA(IX,IY,IZ) = 0.
            PHYT1_GDA(IX,IY,IZ) = 0.
            PHYT2_GDA(IX,IY,IZ) = 0.
            PHYT3_GDA(IX,IY,IZ) = 0.
            TPOP_GDA(IX,IY,IZ) = 0.
            TDOP_GDA(IX,IY,IZ) = 0.
            DPO4_GDA(IX,IY,IZ) = 0.
            TPON_GDA(IX,IY,IZ) = 0.
            REPOC_GDA(IX,IY,IZ) = 0.   
            REDOC_GDA(IX,IY,IZ) = 0.			
            TDON_GDA(IX,IY,IZ) = 0.
            DNH4(IX,IY,IZ) = 0.
            NO23_GDA(IX,IY,IZ) = 0.
            TPSI_GDA(IX,IY,IZ) = 0.
            DSI_GDA(IX,IY,IZ) = 0.
            TPOC_GDA(IX,IY,IZ) = 0.
            TDOC_GDA(IX,IY,IZ) = 0.
            O2EQ_GDA(IX,IY,IZ) = 0.
            ECMTMP_GDA(IX,IY,IZ) = 0.
            SKE_GDA(IX,IY,IZ) = 0.
            TGPP_GDA(IX,IY,IZ) = 0.
            TNPP_GDA(IX,IY,IZ) = 0.
            TRESP_GDA(IX,IY,IZ) = 0.
            BOTBODHS_GDA(IX,IY,IZ) = 0.
   25   CONTINUE
      ENDIF

C        ALLOCATE AND INITIALIZE ARRAY FOR DETAILED DUMP AVERAGING, IF REQUIRED
      IF(IDDOPT.EQ.1)  THEN  ! AVERAGE FOR 1  NO-AVERAGE FOR 0
       ALLOCATE(ECMSAL_DDA(NX,NY,NZ),RPOP_DDA(NX,NY,NZ))
       ALLOCATE(LPOP_DDA(NX,NY,NZ),RDOP_DDA(NX,NY,NZ))
       ALLOCATE(LDOP_DDA(NX,NY,NZ),DPO4_DDA(NX,NY,NZ))
       ALLOCATE(RPON_DDA(NX,NY,NZ),LPON_DDA(NX,NY,NZ))
       ALLOCATE(PON_DDA(NX,NY,NZ),DON_DDA(NX,NY,NZ))
       ALLOCATE(TN_DDA(NX,NY,NZ))
       ALLOCATE(RDON_DDA(NX,NY,NZ),LDON_DDA(NX,NY,NZ))
       ALLOCATE(DNH4_DDA(NX,NY,NZ),NO23_DDA(NX,NY,NZ))
       ALLOCATE(BSI_DDA(NX,NY,NZ),DSI_DDA(NX,NY,NZ))
       ALLOCATE(RPOC_DDA(NX,NY,NZ),LPOC_DDA(NX,NY,NZ))
       ALLOCATE(RDOC_DDA(NX,NY,NZ),LDOC_DDA(NX,NY,NZ))
       ALLOCATE(REPOC_DDA(NX,NY,NZ),REDOC_DDA(NX,NY,NZ))	   
       ALLOCATE(POC_DDA(NX,NY,NZ),DOC_DDA(NX,NY,NZ))
       ALLOCATE(TOC_DDA(NX,NY,NZ))
       ALLOCATE(EXDOC_DDA(NX,NY,NZ),O2EQ_DDA(NX,NY,NZ))
       ALLOCATE(DO_DDA(NX,NY,NZ),ECMTEM_DDA(NX,NY,NZ))
       ALLOCATE(PO4T_DDA(NX,NY,NZ),NH4T_DDA(NX,NY,NZ))
       ALLOCATE(SIT_DDA(NX,NY,NZ),DO_DMIN(NX,NY,NZ))
       ALLOCATE(DOP_DDA(NX,NY,NZ),POP_DDA(NX,NY,NZ))
       ALLOCATE(TP_DDA(NX,NY,NZ),DO_DMAX(NX,NY,NZ))
c$doacross local(iz,iy,ix),share(sal_dda,ecmsal_dda),
c$& share(phyt1_dda,phyt2_dda,phyt3_dda),
c$& share(rpop_dda,lpop_dda,rdop_dda,ldop_dda,dpo4_dda),
c$& share(rpon_dda,lpon_dda,rdon_dda,ldon_dda,dnh4_dda,no23_dda),
c$& share(bsi_dda,dsi_dda,poc_dda,doc_dda,toc_dda,don_dda,pon_dda),
c$& share(tn_dda,pop_dda,dop_dda,tp_dda),
c$& share(rpoc_dda,lpoc_dda,rdoc_dda,ldoc_dda,redoc_dda,exdoc_dda),
c$& share(o2eq_dda,do_dda,ecmtem_dda,do_dmin,do_dmax)
        DO 30 IZ=1,NZ
         DO 30 IY=1,NY
          DO 30 IX=1,NX
            SAL_DDA(IX,IY,IZ) = 0.
            ECMSAL_DDA(IX,IY,IZ) = 0.
            PHYT1_DDA(IX,IY,IZ) = 0.
            PHYT2_DDA(IX,IY,IZ) = 0.
            PHYT3_DDA(IX,IY,IZ) = 0.
            RPOP_DDA(IX,IY,IZ) = 0.
            LPOP_DDA(IX,IY,IZ) = 0.
            POP_DDA(IX,IY,IZ) = 0.
            RDOP_DDA(IX,IY,IZ) = 0.
            LDOP_DDA(IX,IY,IZ) = 0.
            DOP_DDA(IX,IY,IZ) = 0.
            DPO4_DDA(IX,IY,IZ) = 0.
            TP_DDA(IX,IY,IZ) = 0.
            RPON_DDA(IX,IY,IZ) = 0.
            LPON_DDA(IX,IY,IZ) = 0.
            PON_DDA(IX,IY,IZ) = 0.
            RDON_DDA(IX,IY,IZ) = 0.
            LDON_DDA(IX,IY,IZ) = 0.
            DON_DDA(IX,IY,IZ) = 0.
            DNH4_DDA(IX,IY,IZ) = 0.
            NO23_DDA(IX,IY,IZ) = 0.
            TN_DDA(IX,IY,IZ) = 0.
            BSI_DDA(IX,IY,IZ) = 0.
            DSI_DDA(IX,IY,IZ) = 0.
            RPOC_DDA(IX,IY,IZ) = 0.
            LPOC_DDA(IX,IY,IZ) = 0.
            RDOC_DDA(IX,IY,IZ) = 0.
            LDOC_DDA(IX,IY,IZ) = 0.
            REDOC_DDA(IX,IY,IZ) = 0.
            REPOC_DDA(IX,IY,IZ) = 0.
            EXDOC_DDA(IX,IY,IZ) = 0.
            POC_DDA(IX,IY,IZ) = 0.
            DOC_DDA(IX,IY,IZ) = 0.
            TOC_DDA(IX,IY,IZ) = 0.
            O2EQ_DDA(IX,IY,IZ) = 0.
            DO_DDA(IX,IY,IZ) = 0.
            ECMTEM_DDA(IX,IY,IZ) = 0.
            PO4T_DDA(IX,IY,IZ) = 0.
            NH4T_DDA(IX,IY,IZ) = 0.
            SIT_DDA(IX,IY,IZ) = 0.
            DO_DMIN(IX,IY,IZ) = 1000.
            DO_DMAX(IX,IY,IZ) = -1000.
   30     CONTINUE
       ALLOCATE(PHYT1_DMIN(NX,NY,NZ),PHYT2_DMIN(NX,NY,NZ))
       ALLOCATE(PHYT3_DMIN(NX,NY,NZ),POP_DMIN(NX,NY,NZ))
       ALLOCATE(DOP_DMIN(NX,NY,NZ),DPO4_DMIN(NX,NY,NZ))
       ALLOCATE(PON_DMIN(NX,NY,NZ),DON_DMIN(NX,NY,NZ))
       ALLOCATE(DNH4_DMIN(NX,NY,NZ),NO23_DMIN(NX,NY,NZ))
       ALLOCATE(TP_DMIN(NX,NY,NZ),TN_DMIN(NX,NY,NZ))
       ALLOCATE(BSI_DMIN(NX,NY,NZ),DSI_DMIN(NX,NY,NZ))
       ALLOCATE(POC_DMIN(NX,NY,NZ),DOC_DMIN(NX,NY,NZ))
       ALLOCATE(TOC_DMIN(NX,NY,NZ),O2EQ_DMIN(NX,NY,NZ))
       ALLOCATE(HYDSAL_DMIN(NX,NY,NZ))
       ALLOCATE(HYDTEMP_DMIN(NX,NY,NZ))
       ALLOCATE(CHLA1_DMIN(NX,NY,NZ),CCHL1_DMIN(NX,NY,NZ))
       ALLOCATE(CHLA2_DMIN(NX,NY,NZ),CCHL2_DMIN(NX,NY,NZ))
       ALLOCATE(CHLA3_DMIN(NX,NY,NZ),CCHL3_DMIN(NX,NY,NZ))
c$doacross local(iz,iy,ix) ,
C$& share(sal_dmin,phyt1_dmin,phyt2_dmin,phyt3_dmin),
c$& share(pop_dmin,dop_dmin,dpo4_dmin,tp_dmin),
c$& share(pon_dmin,don_dmin,dnh4_dmin,no23_dmin,tn_dmin),
c$& share(bsi_dmin,dsi_dmin,hydsal_dmin,hydtemp_dmin),
c$& share(poc_dmin,doc_dmin,toc_dmin,o2eq_dmin,do_dmin),
c$& share(tam_dmin,cchl1_dmin,cchl2_dmin,chla1_dmin,chla2_dmin)
c$& share(cchl3_dmin,chla3_dmin)
        DO 35 IZ=1,NZ
         DO 35 IY=1,NY
          DO 35 IX=1,NX
            SAL_DMIN(IX,IY,IZ) = 1000.
            PHYT1_DMIN(IX,IY,IZ) = 1000.
            PHYT2_DMIN(IX,IY,IZ) = 1000.
            PHYT3_DMIN(IX,IY,IZ) = 1000.
            POP_DMIN(IX,IY,IZ) = 1000.
            DOP_DMIN(IX,IY,IZ) = 1000.
            DPO4_DMIN(IX,IY,IZ) = 1000.
            TP_DMIN(IX,IY,IZ) = 1000.
            PON_DMIN(IX,IY,IZ) = 1000.
            DON_DMIN(IX,IY,IZ) = 1000.
            DNH4_DMIN(IX,IY,IZ) = 1000.
            NO23_DMIN(IX,IY,IZ) = 1000.
            TN_DMIN(IX,IY,IZ) = 1000.
            BSI_DMIN(IX,IY,IZ) = 1000.
            DSI_DMIN(IX,IY,IZ) = 1000.
            POC_DMIN(IX,IY,IZ) = 1000.
            DOC_DMIN(IX,IY,IZ) = 1000.
            TOC_DMIN(IX,IY,IZ) = 1000.
            O2EQ_DMIN(IX,IY,IZ) = 1000.
            DO_DMIN(IX,IY,IZ) = 1000.
            HYDSAL_DMIN(IX,IY,IZ) = 1000.
            HYDTEMP_DMIN(IX,IY,IZ) = 1000.
            CCHL1_DMIN(IX,IY,IZ) = 1000.
            CCHL2_DMIN(IX,IY,IZ) = 1000.
            CCHL3_DMIN(IX,IY,IZ) = 1000.
            CHLA1_DMIN(IX,IY,IZ) = 1000.
            CHLA2_DMIN(IX,IY,IZ) = 1000.
            CHLA3_DMIN(IX,IY,IZ) = 1000.
   35     CONTINUE
       ALLOCATE(PHYT1_DMAX(NX,NY,NZ),PHYT2_DMAX(NX,NY,NZ))
       ALLOCATE(PHYT3_DMAX(NX,NY,NZ),POP_DMAX(NX,NY,NZ))
       ALLOCATE(DOP_DMAX(NX,NY,NZ),DPO4_DMAX(NX,NY,NZ))
       ALLOCATE(PON_DMAX(NX,NY,NZ),DON_DMAX(NX,NY,NZ))
       ALLOCATE(DNH4_DMAX(NX,NY,NZ),NO23_DMAX(NX,NY,NZ))
       ALLOCATE(TP_DMAX(NX,NY,NZ),TN_DMAX(NX,NY,NZ))
       ALLOCATE(BSI_DMAX(NX,NY,NZ),DSI_DMAX(NX,NY,NZ))
       ALLOCATE(POC_DMAX(NX,NY,NZ),DOC_DMAX(NX,NY,NZ))
       ALLOCATE(TOC_DMAX(NX,NY,NZ),O2EQ_DMAX(NX,NY,NZ))
       ALLOCATE(HYDSAL_DMAX(NX,NY,NZ))
       ALLOCATE(HYDTEMP_DMAX(NX,NY,NZ),CCHL1_DMAX(NX,NY,NZ))
       ALLOCATE(CCHL2_DMAX(NX,NY,NZ))
       ALLOCATE(CCHL3_DMAX(NX,NY,NZ),CHLA1_DMAX(NX,NY,NZ))
       ALLOCATE(CHLA2_DMAX(NX,NY,NZ),CHLA3_DMAX(NX,NY,NZ))
c$doacross local(iz,iy,ix) ,
c$& share(sal_dmax,phyt1_dmax,phyt2_dmax,phyt3_dmax),
c$& share(pop_dmax,rdop_dmax,dpo4_dmax,tp_dmax),
c$& share(pon_dmax,don_dmax,dnh4_dmax,no23_dmax,tn_dmax),
c$& share(bsi_dmax,dsi_dmax,hydsal_dmax,hydtemp_dmax),
c$& share(poc_dmax,doc_dmax,toc_dmax,o2eq_dmax,do_dmax),
c$& share(tam_dmax,cchl1_dmax,cchl2_dmax,chla1_dmax,chla2_dmax)
c$& share(cchl3_dmax,chla3_dmax)
        DO 40 IZ=1,NZ
         DO 40 IY=1,NY
          DO 40 IX=1,NX
            SAL_DMAX(IX,IY,IZ) = -1000.
            PHYT1_DMAX(IX,IY,IZ) = -1000.
            PHYT2_DMAX(IX,IY,IZ) = -1000.
            PHYT3_DMAX(IX,IY,IZ) = -1000.
            POP_DMAX(IX,IY,IZ) = -1000.
            DOP_DMAX(IX,IY,IZ) = -1000.
            DPO4_DMAX(IX,IY,IZ) = -1000.
            TP_DMAX(IX,IY,IZ) = -1000.
            PON_DMAX(IX,IY,IZ) = -1000.
            DON_DMAX(IX,IY,IZ) = -1000.
            DNH4_DMAX(IX,IY,IZ) = -1000.
            NO23_DMAX(IX,IY,IZ) = -1000.
            TN_DMAX(IX,IY,IZ) = -1000.
            BSI_DMAX(IX,IY,IZ) = -1000.
            DSI_DMAX(IX,IY,IZ) = -1000.
            POC_DMAX(IX,IY,IZ) = -1000.
            DOC_DMAX(IX,IY,IZ) = -1000.
            TOC_DMAX(IX,IY,IZ) = -1000.
            O2EQ_DMAX(IX,IY,IZ) = -1000.
            DO_DMAX(IX,IY,IZ) = -1000.
            HYDSAL_DMAX(IX,IY,IZ) = -1000.
            HYDTEMP_DMAX(IX,IY,IZ) = -1000.
            CCHL1_DMAX(IX,IY,IZ) = -1000.
            CCHL2_DMAX(IX,IY,IZ) = -1000.
            CCHL3_DMAX(IX,IY,IZ) = -1000.
            CHLA1_DMAX(IX,IY,IZ) = -1000.
            CHLA2_DMAX(IX,IY,IZ) = -1000.
            CHLA3_DMAX(IX,IY,IZ) = -1000.
   40     CONTINUE
      IAVGDDCNTR = 0
      ENDIF


C        INITIALIZE SALINITY FROM ECOM
      DO 45 IZ=1,NZ
       DO 45 IY=1,NY
        DO 45 IX=1,NX
         CARAY(IX,IY,IZ,1) = HYDSAL(IX,IY,IZ)
   45 CONTINUE


C        INITIALIZE SEDIMENT
      CALL SED_READ
!
!-----------------------------------------------------------------------
! Name of this rca file
!-----------------------------------------------------------------------
!
      RCANA='eutro.f'

C 
C                  S Y S T E M   L O O P S
C 

   50 CONTINUE

C        COMPUTE TLDOC RECYCLE TERM, SUSPENDED SOLIDS AND STP20
cc c$doacross local(iz,iy,ix,tldoc)
      DO 60 IZ=1,NZ
       DO 60 IY=1,NY
        DO 60 IX=1,NX
         IF(FSM(IX,IY).EQ.0.)  GO TO 60
         TLDOC = PHYT1(IX,IY,IZ) + PHYT2(IX,IY,IZ) +
     .           EXDOC(IX,IY,IZ) 
! SCQ    .           REDOC(IX,IY,IZ) + EXDOC(IX,IY,IZ) 	 
         IF ((KMPHYT.EQ.0.).AND.(TLDOC.EQ.0.0)) THEN
          XEMPRC(IX,IY,IZ) = 0.
         ELSE              
          XEMPRC(IX,IY,IZ) = TLDOC/(KMPHYT+TLDOC)
         ENDIF
         STP20(IX,IY,IZ) = MAX(0.0,HYDTEMP(IX,IY,IZ)) - 20.
         ISTP20(IX,IY,IZ) = 10.*MAX(0.,HYDTEMP(IX,IY,IZ)) + 1.
   60 CONTINUE


C        LOOP FOR DETAILED DUMP AVERAGING, IF REQUIRED
      IF(IDDOPT.EQ.1)  THEN
c$doacross local(iz,iy,ix) , share(sal_dda,ecmsal_dda,phyt1_dda),
c$& share(phyt2_dda,bsi_dda,dsi_dda,o2eq_dda,do_dda,ecmtem_dda)
c$& share(phyt3_dda)
        DO 80 IZ=1,NZ
         DO 80 IY=1,NY
          DO 80 IX=1,NX
            SAL_DDA(IX,IY,IZ) = SAL_DDA(IX,IY,IZ) + SAL(IX,IY,IZ)
            ECMSAL_DDA(IX,IY,IZ) = ECMSAL_DDA(IX,IY,IZ)+HYDSAL(IX,IY,IZ)
            PHYT1_DDA(IX,IY,IZ) = PHYT1_DDA(IX,IY,IZ) + PHYT1(IX,IY,IZ)
            PHYT2_DDA(IX,IY,IZ) = PHYT2_DDA(IX,IY,IZ) + PHYT2(IX,IY,IZ)
            PHYT3_DDA(IX,IY,IZ) = PHYT3_DDA(IX,IY,IZ) + PHYT3(IX,IY,IZ)
!-----------------------------------------------------------------------
! Yun Li, June-24-2011, as compared with Jeremy's version
            CCHL1_DDA(IX,IY,IZ) = CCHL1_DDA(IX,IY,IZ) + CCHL1S(IX,IY,IZ)
            CCHL2_DDA(IX,IY,IZ) = CCHL2_DDA(IX,IY,IZ) + CCHL2S(IX,IY,IZ)
            CCHL3_DDA(IX,IY,IZ) = CCHL3_DDA(IX,IY,IZ) + CCHL3S(IX,IY,IZ)
            CHLA1_DDA(IX,IY,IZ) = CHLA1_DDA(IX,IY,IZ) +
     .       1000.*PHYT1(IX,IY,IZ)/CCHL1S(IX,IY,IZ)
            CHLA2_DDA(IX,IY,IZ) = CHLA2_DDA(IX,IY,IZ) +
     .       1000.*PHYT2(IX,IY,IZ)/CCHL2S(IX,IY,IZ)
            CHLA3_DDA(IX,IY,IZ) = CHLA3_DDA(IX,IY,IZ) +
     .       1000.*0.0/CCHL3S(IX,IY,IZ)
!-----------------------------------------------------------------------
            BSI_DDA(IX,IY,IZ) = BSI_DDA(IX,IY,IZ) + BSI(IX,IY,IZ)
            DSI_DDA(IX,IY,IZ) = DSI_DDA(IX,IY,IZ) + DSI(IX,IY,IZ)
            SIT_DDA(IX,IY,IZ) = SIT_DDA(IX,IY,IZ) + SIT(IX,IY,IZ)
            O2EQ_DDA(IX,IY,IZ) = O2EQ_DDA(IX,IY,IZ) + O2EQ(IX,IY,IZ)
            DO_DDA(IX,IY,IZ) = DO_DDA(IX,IY,IZ) + DO(IX,IY,IZ)
            ECMTEM_DDA(IX,IY,IZ)=ECMTEM_DDA(IX,IY,IZ)+HYDTEMP(IX,IY,IZ)
   80   CONTINUE
c$doacross local(iz,iy,ix,pop,dop) ,
c$& share(rpop_dda,lpop_dda,rdop_dda,ldop_dda,po4t_dda)                 
c$& share(pop_dda,dop_dda,dpo4_dda,tp_dda)                 
        DO 81 IZ=1,NZ
         DO 81 IY=1,NY
          DO 81 IX=1,NX
            RPOP_DDA(IX,IY,IZ) = RPOP_DDA(IX,IY,IZ) + RPOP(IX,IY,IZ)
            LPOP_DDA(IX,IY,IZ) = LPOP_DDA(IX,IY,IZ) + LPOP(IX,IY,IZ)
            RDOP_DDA(IX,IY,IZ) = RDOP_DDA(IX,IY,IZ) + RDOP(IX,IY,IZ)
            LDOP_DDA(IX,IY,IZ) = LDOP_DDA(IX,IY,IZ) + LDOP(IX,IY,IZ)
            PO4T_DDA(IX,IY,IZ) = PO4T_DDA(IX,IY,IZ) + PO4T(IX,IY,IZ)
            POP = PCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ) +
     .            PCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ) +
     .            RPOP(IX,IY,IZ) + LPOP(IX,IY,IZ)
            POP_DDA(IX,IY,IZ) = POP_DDA(IX,IY,IZ) + POP
            DOP = RDOP(IX,IY,IZ) + LDOP(IX,IY,IZ)
            DOP_DDA(IX,IY,IZ) = DOP_DDA(IX,IY,IZ) + DOP
            DPO4_DDA(IX,IY,IZ) = DPO4_DDA(IX,IY,IZ) + DPO4(IX,IY,IZ)
            TP_DDA(IX,IY,IZ) = TP_DDA(IX,IY,IZ)+POP+DOP+DPO4(IX,IY,IZ)
   81   CONTINUE
c$doacross local(iz,iy,ix,pon,don) ,
c$& share(rpon_dda,lpon_dda,rdon_dda,ldon_dda,nh4t_dda,pon_dda)        
c$& share(don_dda,dnh4_dda,no23_dda,tn_dda)        
        DO 82 IZ=1,NZ
         DO 82 IY=1,NY
          DO 82 IX=1,NX
            RPON_DDA(IX,IY,IZ) = RPON_DDA(IX,IY,IZ) + RPON(IX,IY,IZ)
            LPON_DDA(IX,IY,IZ) = LPON_DDA(IX,IY,IZ) + LPON(IX,IY,IZ)
            RDON_DDA(IX,IY,IZ) = RDON_DDA(IX,IY,IZ) + RDON(IX,IY,IZ)
            LDON_DDA(IX,IY,IZ) = LDON_DDA(IX,IY,IZ) + LDON(IX,IY,IZ)
            NH4T_DDA(IX,IY,IZ) = NH4T_DDA(IX,IY,IZ) + NH4T(IX,IY,IZ)
            PON = NCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ) +
     .            NCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ) +
     .            RPON(IX,IY,IZ) + LPON(IX,IY,IZ)
            PON_DDA(IX,IY,IZ) = PON_DDA(IX,IY,IZ) + PON
            DON = RDON(IX,IY,IZ) + LDON(IX,IY,IZ)
            DON_DDA(IX,IY,IZ) = DON_DDA(IX,IY,IZ) + DON
            DNH4_DDA(IX,IY,IZ) = DNH4_DDA(IX,IY,IZ) + DNH4(IX,IY,IZ)
            NO23_DDA(IX,IY,IZ) = NO23_DDA(IX,IY,IZ) + NO23(IX,IY,IZ)
            TN_DDA(IX,IY,IZ) = TN_DDA(IX,IY,IZ) + PON + DON +
     .            DNH4(IX,IY,IZ) + NO23(IX,IY,IZ)
   82   CONTINUE
c$doacross local(iz,iy,ix,poc,doc) ,
c$& share(rpoc_dda,lpoc_dda,rdoc_dda,ldoc_dda,talk_dda,redoc_dda)        
c$& share(exdoc_dda,poc_dda,doc_dda,tdoc_dda)
        DO 83 IZ=1,NZ
         DO 83 IY=1,NY
          DO 83 IX=1,NX
            RPOC_DDA(IX,IY,IZ) = RPOC_DDA(IX,IY,IZ) + RPOC(IX,IY,IZ)
            LPOC_DDA(IX,IY,IZ) = LPOC_DDA(IX,IY,IZ) + LPOC(IX,IY,IZ)
            RDOC_DDA(IX,IY,IZ) = RDOC_DDA(IX,IY,IZ) + RDOC(IX,IY,IZ)
            LDOC_DDA(IX,IY,IZ) = LDOC_DDA(IX,IY,IZ) + LDOC(IX,IY,IZ)
            EXDOC_DDA(IX,IY,IZ) = EXDOC_DDA(IX,IY,IZ) + EXDOC(IX,IY,IZ)		
            REPOC_DDA(IX,IY,IZ) = REPOC_DDA(IX,IY,IZ) + REPOC(IX,IY,IZ)			
            REDOC_DDA(IX,IY,IZ) = REDOC_DDA(IX,IY,IZ) + REDOC(IX,IY,IZ)
!            POC = PHYT1(IX,IY,IZ) + PHYT2(IX,IY,IZ) +PHYT3(IX,IY,IZ) +
!     .            RPOC(IX,IY,IZ) + LPOC(IX,IY,IZ) + REPOC(IX,IY,IZ)
	        POC = PHYT1(IX,IY,IZ) + PHYT2(IX,IY,IZ) +
     .            RPOC(IX,IY,IZ) + LPOC(IX,IY,IZ) 
            POC_DDA(IX,IY,IZ) = POC_DDA(IX,IY,IZ) + POC
            DOC = RDOC(IX,IY,IZ) + LDOC(IX,IY,IZ) +
     .            EXDOC(IX,IY,IZ)	 
            DOC_DDA(IX,IY,IZ) = DOC_DDA(IX,IY,IZ) + DOC
            TOC_DDA(IX,IY,IZ) = TOC_DDA(IX,IY,IZ) + POC + DOC
   83     CONTINUE
c$doacross local(iz,iy,ix),
c$& share(sal_dmin,phyt1_dmin,phyt2_dmin,phyt3_dmin),
c$& share(bsi_dmin,dsi_dmin,tam_dmin,cchl1_dmin,cchl2_dmin,cchl3_dmin),
c$& share(chla1_dmin,chla2_dmin,chla3_dmin)
        DO 84 IZ=1,NZ
         DO 84 IY=1,NY
          DO 84 IX=1,NX
            SAL_DMIN(IX,IY,IZ) =
     .          AMIN1(SAL_DMIN(IX,IY,IZ),SAL(IX,IY,IZ))
            PHYT1_DMIN(IX,IY,IZ) =
     .          AMIN1(PHYT1_DMIN(IX,IY,IZ),PHYT1(IX,IY,IZ))
            PHYT2_DMIN(IX,IY,IZ) =
     .          AMIN1(PHYT2_DMIN(IX,IY,IZ),PHYT2(IX,IY,IZ))
            PHYT3_DMIN(IX,IY,IZ) =
     .          AMIN1(PHYT3_DMIN(IX,IY,IZ),PHYT3(IX,IY,IZ))
            BSI_DMIN(IX,IY,IZ) =
     .          AMIN1(BSI_DMIN(IX,IY,IZ),BSI(IX,IY,IZ))
            DSI_DMIN(IX,IY,IZ) =
     .          AMIN1(DSI_DMIN(IX,IY,IZ),DSI(IX,IY,IZ))
            CCHL1_DMIN(IX,IY,IZ) =
     .          AMIN1(CCHL1_DMIN(IX,IY,IZ),CCHL1S(IX,IY,IZ))
            CCHL2_DMIN(IX,IY,IZ) =
     .          AMIN1(CCHL2_DMIN(IX,IY,IZ),CCHL2S(IX,IY,IZ))
            CCHL3_DMIN(IX,IY,IZ) =
     .          AMIN1(CCHL3_DMIN(IX,IY,IZ),CCHL3S(IX,IY,IZ))
            CHLA1_DMIN(IX,IY,IZ) = AMIN1(CHLA1_DMIN(IX,IY,IZ),
     .          1000.*PHYT1(IX,IY,IZ)/(CCHL1S(IX,IY,IZ)+1.0E-4))
            CHLA2_DMIN(IX,IY,IZ) = AMIN1(CHLA2_DMIN(IX,IY,IZ),
     .          1000.*PHYT2(IX,IY,IZ)/(CCHL2S(IX,IY,IZ)+1.0E-4))
            CHLA3_DMIN(IX,IY,IZ) = AMIN1(CHLA3_DMIN(IX,IY,IZ),
     .          1000.*0.0/(CCHL3S(IX,IY,IZ)+1.0E-4))
   84   CONTINUE
c$doacross local(iz,iy,ix,pop,dop,tp) ,
c$& share(pop_dmin,dop_dmin,tp_dmin,dpo4_dmin)
c$& share(pop_dmax,dop_dmax,tp_dmax,dpo4_dmax)
        DO 85 IZ=1,NZ
         DO 85 IY=1,NY
          DO 85 IX=1,NX
            POP = PCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ) +
     .            PCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ) +
     .            RPOP(IX,IY,IZ) + LPOP(IX,IY,IZ)
            POP_DMIN(IX,IY,IZ) = AMIN1(POP_DMIN(IX,IY,IZ),POP)
            POP_DMAX(IX,IY,IZ) = AMAX1(POP_DMAX(IX,IY,IZ),POP)
            DOP = RDOP(IX,IY,IZ) + LDOP(IX,IY,IZ)
            DOP_DMIN(IX,IY,IZ) = AMIN1(DOP_DMIN(IX,IY,IZ),DOP)
            DOP_DMAX(IX,IY,IZ) = AMAX1(DOP_DMAX(IX,IY,IZ),DOP)
            DPO4_DMIN(IX,IY,IZ) =
     .           AMIN1(DPO4_DMIN(IX,IY,IZ),DPO4(IX,IY,IZ))
            DPO4_DMAX(IX,IY,IZ) =
     .           AMAX1(DPO4_DMAX(IX,IY,IZ),DPO4(IX,IY,IZ))
            TP = POP + DOP + DPO4(IX,IY,IZ)
            TP_DMIN(IX,IY,IZ) = AMIN1(TP_DMIN(IX,IY,IZ),TP)
            TP_DMAX(IX,IY,IZ) = AMAX1(TP_DMAX(IX,IY,IZ),TP)
   85   CONTINUE
c$doacross local(iz,iy,ix,pon,don,tn) ,
c$& share(pon_dmin,don_dmin,tn_dmin,dnh4_dmin,no23_dmin)
c$& share(pon_dmax,don_dmax,tn_dmax,dnh4_dmax,no23_dmax)
        DO 86 IZ=1,NZ
         DO 86 IY=1,NY
          DO 86 IX=1,NX
            PON = NCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ) +
     .            NCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ) +
     .            RPON(IX,IY,IZ) + LPON(IX,IY,IZ)
            PON_DMIN(IX,IY,IZ) = AMIN1(PON_DMIN(IX,IY,IZ),PON)
            PON_DMAX(IX,IY,IZ) = AMAX1(PON_DMAX(IX,IY,IZ),PON)
            DON = RDON(IX,IY,IZ) + LDON(IX,IY,IZ)
            DON_DMIN(IX,IY,IZ) = AMIN1(DON_DMIN(IX,IY,IZ),DON)
            DON_DMAX(IX,IY,IZ) = AMAX1(DON_DMAX(IX,IY,IZ),DON)
            DNH4_DMIN(IX,IY,IZ) =
     .           AMIN1(DNH4_DMIN(IX,IY,IZ),DNH4(IX,IY,IZ))
            DNH4_DMAX(IX,IY,IZ) =
     .           AMAX1(DNH4_DMAX(IX,IY,IZ),DNH4(IX,IY,IZ))
            NO23_DMIN(IX,IY,IZ) =
     .           AMIN1(NO23_DMIN(IX,IY,IZ),NO23(IX,IY,IZ))
            NO23_DMAX(IX,IY,IZ) =
     .           AMAX1(NO23_DMAX(IX,IY,IZ),NO23(IX,IY,IZ))
            TN = PON + DON + DNH4(IX,IY,IZ) + NO23(IX,IY,IZ)
            TN_DMIN(IX,IY,IZ) = AMIN1(TN_DMIN(IX,IY,IZ),TN)
            TN_DMAX(IX,IY,IZ) = AMAX1(TN_DMAX(IX,IY,IZ),TN)
   86   CONTINUE
c$doacross local(iz,iy,ix,poc,doc,toc) ,
c$& share(poc_dmin,doc_dmin,toc_dmin)
c$& share(poc_dmax,doc_dmax,toc_dmax)
        DO 87 IZ=1,NZ
         DO 87 IY=1,NY
          DO 87 IX=1,NX
! SCQ           POC = RPOC(IX,IY,IZ) + LPOC(IX,IY,IZ) + REPOC(IX,IY,IZ)
!     .          + PHYT1(IX,IY,IZ) + PHYT2(IX,IY,IZ)+ PHYT3(IX,IY,IZ)
            POC = RPOC(IX,IY,IZ) + LPOC(IX,IY,IZ) 
     .          + PHYT1(IX,IY,IZ) + PHYT2(IX,IY,IZ)	 
            POC_DMIN(IX,IY,IZ) = AMIN1(POC_DMIN(IX,IY,IZ),POC)
            POC_DMAX(IX,IY,IZ) = AMAX1(POC_DMAX(IX,IY,IZ),POC)
            DOC = RDOC(IX,IY,IZ) + LDOC(IX,IY,IZ)
     .          + EXDOC(IX,IY,IZ)	 
            DOC_DMIN(IX,IY,IZ) = AMIN1(DOC_DMIN(IX,IY,IZ),DOC)
            DOC_DMAX(IX,IY,IZ) = AMAX1(DOC_DMAX(IX,IY,IZ),DOC)
            TOC_DMIN(IX,IY,IZ) = AMIN1(TOC_DMIN(IX,IY,IZ),POC+DOC)
            TOC_DMAX(IX,IY,IZ) = AMAX1(TOC_DMAX(IX,IY,IZ),POC+DOC)
   87     CONTINUE
c$doacross local(iz,iy,ix) , share(o2eq_dmin,do_dmin),
c$& share(hydsal_dmin,hydtemp_dmin)
        DO 88 IZ=1,NZ
         DO 88 IY=1,NY
          DO 88 IX=1,NX
            O2EQ_DMIN(IX,IY,IZ) =
     .           AMIN1(O2EQ_DMIN(IX,IY,IZ),O2EQ(IX,IY,IZ))
            DO_DMIN(IX,IY,IZ) =
     .           AMIN1(DO_DMIN(IX,IY,IZ),DO(IX,IY,IZ))
            HYDSAL_DMIN(IX,IY,IZ) =
     .           AMIN1(HYDSAL_DMIN(IX,IY,IZ),HYDSAL(IX,IY,IZ))
            HYDTEMP_DMIN(IX,IY,IZ) =
     .           AMIN1(HYDTEMP_DMIN(IX,IY,IZ),HYDTEMP(IX,IY,IZ))
   88   CONTINUE
c$doacross local(iz,iy,ix) ,
c$& share(sal_dmax,phyt1_dmax,phyt2_dmax,phyt3_dmax),
c$& share(bsi_dmax,dsi_dmax,tam_dmax,cchl1_dmax,cchl2_dmax,cchl3_dmax),
c$& share(chla1_dmax,chla2_dmax,chla3_dmax)
        DO 89 IZ=1,NZ
         DO 89 IY=1,NY
          DO 89 IX=1,NX
            SAL_DMAX(IX,IY,IZ) =
     .          AMAX1(SAL_DMAX(IX,IY,IZ),SAL(IX,IY,IZ))
            PHYT1_DMAX(IX,IY,IZ) =
     .          AMAX1(PHYT1_DMAX(IX,IY,IZ),PHYT1(IX,IY,IZ))
            PHYT2_DMAX(IX,IY,IZ) =
     .          AMAX1(PHYT2_DMAX(IX,IY,IZ),PHYT2(IX,IY,IZ))
            PHYT3_DMAX(IX,IY,IZ) =
     .          AMAX1(PHYT3_DMAX(IX,IY,IZ),PHYT3(IX,IY,IZ))
            BSI_DMAX(IX,IY,IZ) =
     .          AMAX1(BSI_DMAX(IX,IY,IZ),BSI(IX,IY,IZ))
            DSI_DMAX(IX,IY,IZ) =
     .          AMAX1(DSI_DMAX(IX,IY,IZ),DSI(IX,IY,IZ))
            CCHL1_DMAX(IX,IY,IZ) =
     .          AMAX1(CCHL1_DMAX(IX,IY,IZ),CCHL1S(IX,IY,IZ))
            CCHL2_DMAX(IX,IY,IZ) =
     .          AMAX1(CCHL2_DMAX(IX,IY,IZ),CCHL2S(IX,IY,IZ))
            CCHL3_DMAX(IX,IY,IZ) =
     .          AMAX1(CCHL3_DMAX(IX,IY,IZ),CCHL3S(IX,IY,IZ))
            CHLA1_DMAX(IX,IY,IZ) = AMAX1(CHLA1_DMAX(IX,IY,IZ),
     .          1000.*PHYT1(IX,IY,IZ)/(CCHL1S(IX,IY,IZ)+1.0E-4))
            CHLA2_DMAX(IX,IY,IZ) = AMAX1(CHLA2_DMAX(IX,IY,IZ),
     .          1000.*PHYT2(IX,IY,IZ)/(CCHL2S(IX,IY,IZ)+1.0E-4))
            CHLA3_DMAX(IX,IY,IZ) = AMAX1(CHLA3_DMAX(IX,IY,IZ),
     .          1000.*0.0/(CCHL3S(IX,IY,IZ)+1.0E-4))
   89   CONTINUE
c$doacross local(iz,iy,ix) , share(o2eq_dmax,do_dmax),
c$& share(hydsal_dmax,hydtemp_dmax)
        DO 90 IZ=1,NZ
         DO 90 IY=1,NY
          DO 90 IX=1,NX
            O2EQ_DMAX(IX,IY,IZ) =
     .           AMAX1(O2EQ_DMAX(IX,IY,IZ),O2EQ(IX,IY,IZ))
            DO_DMAX(IX,IY,IZ) =
     .           AMAX1(DO_DMAX(IX,IY,IZ),DO(IX,IY,IZ))
            HYDSAL_DMAX(IX,IY,IZ) =
     .           AMAX1(HYDSAL_DMAX(IX,IY,IZ),HYDSAL(IX,IY,IZ))
            HYDTEMP_DMAX(IX,IY,IZ) =
     .           AMAX1(HYDTEMP_DMAX(IX,IY,IZ),HYDTEMP(IX,IY,IZ))
   90   CONTINUE
        IAVGDDCNTR = IAVGDDCNTR + 1
      ENDIF

      IF(KEOPT.EQ.4.)  THEN
       IF(TKE(IKE).LE.TIME)  THEN
!
!-------------------------------------------------------------------
!  Optionally read KEBASE
!-------------------------------------------------------------------
!
        IF(NETCDFOPT.EQ.1) THEN
         status=nf90_open(TRIM(ADJUSTL(KINFILNA(2))),
     .                    nf90_nowrite,ncID_prm)
         CALL nccheck_status(status,KINFILNA(2),RCANA)
         CALL ncprm_set_TSS(ncID_prm,idTSS_time,idTSS,IKE,
     .                      NKE,TKE,KEBASE)  ! TSS values is in KEBASE
         DO IX=1,NX
         DO IY=1,NY
           IF(SAL(IX,IY,1) .LE. 15.0) THEN
             KEBASE(IX,IY)=1.80+0.0673*KEBASE(IX,IY)-0.0960*SAL(IX,IY,1)
             IF (IY .GE. 114) THEN
               KEBASE(IX,IY)=KEBASE(IX,IY)*0.67
             ELSE
               KEBASE(IX,IY)=KEBASE(IX,IY)*0.67
               !KEBASE(IX,IY)=KEBASE(IX,IY)*0.40
             ENDIF          
           ELSE
             KEBASE(IX,IY)=1.17+0.0060*KEBASE(IX,IY)-0.0225*SAL(IX,IY,1)
           ENDIF
           IF(FSM(IX,IY).EQ.0) KEBASE(IX,IY)=0.0
         END DO
         END DO
         !Increase KE in Patapsco to prevent huge blooms. Added by JT, June 3 2012
          KEBASE(30,105)=KEBASE(IX,IY)*5
          KEBASE(31,105)=KEBASE(IX,IY)*5
          KEBASE(32,105)=KEBASE(IX,IY)*5
          KEBASE(33,105)=KEBASE(IX,IY)*5
          KEBASE(34,105)=KEBASE(IX,IY)*5
          KEBASE(35,105)=KEBASE(IX,IY)*5
         status=nf90_close(ncID_prm)
         CALL nccheck_status(status,KINFILNA(2),RCANA)
        ELSE
         READ(28,1300,ERR=910)  ((KEBASE(IX,IY),IX=1,NX),IY=1,NY)
        ENDIF

        IF(LIST(4).EQ.1) THEN
         WRITE(OUT,1155) TKE(ITEMP)
         DO IY=1,NY
          WRITE(OUT,1156)  IY,(KEBASE(IX,IY),IX=1,NX)
         ENDDO
        ENDIF

        IKE=IKE+1
       ENDIF
      ENDIF

!!----------DIAGNOSTIC OUTPUT FOR CARBONATE SYSTEM //SCQ ---------------
!!----------------------------------------------------------------------
      ALLOCATE(GDIAG1(NX,NY,NZ))
      ALLOCATE(GDIAG2(NX,NY,NZ))
      ALLOCATE(GDIAG3(NX,NY,NZ))
      ALLOCATE(GDIAG4(NX,NY,NZ))
      ALLOCATE(GDIAG5(NX,NY,NZ))
      ALLOCATE(GDIAG6(NX,NY,NZ))	  
      ALLOCATE(GDIAG7(NX,NY,NZ))
      ALLOCATE(GDIAG8(NX,NY,NZ))
      ALLOCATE(GDIAG9(NX,NY))
      ALLOCATE(GDIAG10(NX,NY))
      ALLOCATE(GDIAG11(NX,NY))
      ALLOCATE(GDIAG12(NX,NY,NZ))
	  ALLOCATE(GDIAG13(NX,NY,NZ))
	  ALLOCATE(GDIAG14(NX,NY))	  
       GDIAG1 = 0.0 	  
	   GDIAG2  = 0.0
	   GDIAG3 = 0.0
	   GDIAG4 = 0.0
	   GDIAG5 = 0.0
	   GDIAG6 = 0.0
	   GDIAG7 = 0.0
	   GDIAG8 = 0.0
	   GDIAG9 = 0.0
	   GDIAG10 = 0.0
	   GDIAG11 = 0.0   
	   GDIAG12 = 0.0 
	   GDIAG13 = 0.0
	   GDIAG14 = 0.0	   
!!-----------------------------------------------------------------------
!!------------------------------------------------------------------------  	  
	  
	  
C
C        SYSTEM 1 - SALINITY
C

      DO 100 IZ=1,NZ
      DO 100 IY=1,NY
      DO 100 IX=1,NX
  100 CDSAL(IX,IY,IZ) = 0.0

C        PUT ECOM COMPUTED SALINITY AT BOUNDARY
      DO 105 I=1,NOBCALL
       IX = IBCALL(1,I)
       IY = IBCALL(2,I)
       IZ = IBCALL(3,I)
       CARAY(IX,IY,IZ,1) = HYDSAL(IX,IY,IZ) 
       BBC(I,1) = HYDSAL(IX,IY,IZ)
  105 CONTINUE

C
C             SYSTEMS 2-4 - PHYTOPLANKTON
C
       IF(AGMOPT.EQ.0)  THEN
          CALL STD_EUTRO_MAIN
       ELSEIF(AGMOPT.EQ.1)  THEN
          CALL LC_EUTRO_MAIN
       ELSE
          WRITE(OUT,9000)   AGMOPT
          CALL EXIT
       ENDIF

C
C             SYSTEMS 5-9 - PHOSPHOROUS 
C

c$doacross local(iz,iy,ix,sard,term,sk57,sk68,sk710,sk89)
      DO 140 IZ=1,NZ
      DO 140 IY=1,NY
      DO 140 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 140

C        Algal Respiration and Death !SCQ
      SARD = (PCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .      + PCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ))
      TERM = XEMPRC(IX,IY,IZ)

C        RPOP - REFRACTORY PARTICULATE ORGANIC PHOSPHORUS
C                 Sources                         Sinks
C           Algal Resp + Death            Mineralization to RDOP
      SK57 = K57CT(ISTP20(IX,IY,IZ))*RPOP(IX,IY,IZ)*TERM

      CDRPOP(IX,IY,IZ) = FRPOP*SARD - SK57
 
C        LPOP - LABILE PARTICULATE ORGANIC PHOSPHORUS
C                 Sources                         Sinks
C           Algal Resp + Death            Mineralization to LDOP
      SK68 = K68CT(ISTP20(IX,IY,IZ))*LPOP(IX,IY,IZ)*TERM

      CDLPOP(IX,IY,IZ) = FLPOP*SARD - SK68
 
C        RDOP - REFRACTORY DISSOLVED ORGANIC PHOSPHORUS
C                 Sources                         Sinks
C           Algal Resp + Death            Mineralization to PO4
C           Mineralization from RDOP
      SK710 = K710CT(ISTP20(IX,IY,IZ))*RDOP(IX,IY,IZ)*TERM

      CDRDOP(IX,IY,IZ) = FRDOP*SARD + SK57 - SK710
 
C        LDOP - LABILE DISSOLVED ORGANIC PHOSPHORUS
C                 Sources                         Sinks
C           Algal Resp + Death            Mineralization to PO4
C           Mineralization from LPOP
      SK89 = K89CT(ISTP20(IX,IY,IZ))*LDOP(IX,IY,IZ)*TERM

      CDLDOP(IX,IY,IZ) = FLDOP*SARD + SK68 - SK89
 
C        PO4T - Total Dissolved Inorganic Phosphorus
C                 Sources                         Sinks
C           Mineralization from RDOP      Algal Resp + Death Going
C           Mineralization from LDOP          to Organic Pools
C     (Note: Algal uptake and release of PO4 represent an exchange of
C            fractions rather than a source or sink of PO4, therefore
C            no direct algal-related source/sink terms are included in
C            the PO4T equation.)
C     SK8P = PCRB1(IX,IY,IZ)*(1.-FLOCEX)*GPP1(IX,IY,IZ)
C    .     + PCRB2(IX,IY,IZ)*(1.-FLOCEX)*GPP2(IX,IY,IZ)
C    .     + PCRB3(IX,IY,IZ)*(1.-FLOCEX)*GPP3(IX,IY,IZ)

      CDPO4T(IX,IY,IZ) = SK710 + SK89 - (1.-FPO4)*SARD

  140 CONTINUE

      IF(IDISK.EQ.2 .OR. IDISK.EQ.3)  THEN
        DO 141 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
           SARD = (PCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .           + PCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ))
           TERM = XEMPRC(IX,IY,IZ)
           SK57 = K57CT(ISTP20(IX,IY,IZ))*RPOP(IX,IY,IZ)*TERM
           CALL RCAWBUF(5,RPOP(IX,IY,IZ),FRPOP*SARD,SK57,
     .          PCRB1(IX,IY,IZ),PCRB2(IX,IY,IZ))
         ELSE
           CALL RCAWBUF(5,RPOP_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          POP_DMIN(IX,IY,IZ),POP_DMAX(IX,IY,IZ),
     .          PCRB1(IX,IY,IZ),PCRB2(IX,IY,IZ))
         ENDIF
  141   CONTINUE
        DO 143 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
           SARD = (PCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .           + PCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ))
           TERM = XEMPRC(IX,IY,IZ)
           SK68 = K68CT(ISTP20(IX,IY,IZ))*LPOP(IX,IY,IZ)*TERM
           TPP = PCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .         + PCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)
     .         + RPOP(IX,IY,IZ) + LPOP(IX,IY,IZ)
     .         + PO4T(IX,IY,IZ) - DPO4(IX,IY,IZ)
           CALL RCAWBUF(6,LPOP(IX,IY,IZ),FLPOP*SARD,SK68,TPP,
     .        XEMPRC(IX,IY,IZ))
         ELSE
           CALL RCAWBUF(6,LPOP_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .        POP_DDA(IX,IY,IZ)/IAVGDDCNTR,DOP_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .        DPO4_DDA(IX,IY,IZ)/IAVGDDCNTR,TP_DDA(IX,IY,IZ)/IAVGDDCNTR)
         ENDIF
  143   CONTINUE
        DO 145 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         EZPRNT = RZ(IX,IY,IZ+1)*0.5*(DZ(IZ+1)+DZ(IZ))*HBAR(IX,IY)
     .                                                     /XAZ(IX,IY)
         IF(IDDOPT.EQ.0)  THEN
           SARD = (PCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .           + PCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ))
           TERM = XEMPRC(IX,IY,IZ)
           SK710 = K710CT(ISTP20(IX,IY,IZ))*RDOP(IX,IY,IZ)*TERM
           CALL RCAWBUF(7,RDOP(IX,IY,IZ),FRDOP*SARD,SK710,TIME,EZPRNT)
         ELSE
           CALL RCAWBUF(7,RDOP_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          DOP_DMIN(IX,IY,IZ),DOP_DMAX(IX,IY,IZ),
     .          TIME,EZPRNT)
         ENDIF
  145   CONTINUE
        DO 147 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
           TDP = RDOP(IX,IY,IZ) + LDOP(IX,IY,IZ) + DPO4(IX,IY,IZ)
           DOP = RDOP(IX,IY,IZ) + LDOP(IX,IY,IZ)
           SARD = (PCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .           + PCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ))
           TERM = XEMPRC(IX,IY,IZ)
           SK89 = K89CT(ISTP20(IX,IY,IZ))*LDOP(IX,IY,IZ)*TERM
           CALL RCAWBUF(8,LDOP(IX,IY,IZ),FLDOP*SARD,SK89,DOP,TDP)
         ELSE
           CALL RCAWBUF(8,LDOP_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          CCHL1_DMIN(IX,IY,IZ),CCHL1_DMAX(IX,IY,IZ),
     .          CCHL2_DMIN(IX,IY,IZ),CCHL2_DMAX(IX,IY,IZ))
         ENDIF
  147   CONTINUE
        DO 149 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
           TPP = PCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .         + PCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)
     .         + RPOP(IX,IY,IZ) + LPOP(IX,IY,IZ)
     .         + PO4T(IX,IY,IZ) - DPO4(IX,IY,IZ)
           TDP = RDOP(IX,IY,IZ) + LDOP(IX,IY,IZ) + DPO4(IX,IY,IZ)
           TP = TPP + TDP
           SARD = (PCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .           + PCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ))
           TERM = XEMPRC(IX,IY,IZ)
           SK8P = PCRB1(IX,IY,IZ)*(1.-FLOCEX)*GPP1(IX,IY,IZ)
     .          + PCRB2(IX,IY,IZ)*(1.-FLOCEX)*GPP2(IX,IY,IZ)
           IF(FSM(IX,IY).LT.0.) DPO4(IX,IY,IZ) = PO4T(IX,IY,IZ)
     .          - (PCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .            +PCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ))
           CALL RCAWBUF(9,PO4T(IX,IY,IZ),DPO4(IX,IY,IZ),FPO4*SARD,SK8P,
     .          TP)
         ELSE
           CALL RCAWBUF(9,PO4T_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          DPO4_DMIN(IX,IY,IZ),DPO4_DMAX(IX,IY,IZ),
     .          TP_DMIN(IX,IY,IZ),TP_DMAX(IX,IY,IZ))
         ENDIF
  149   CONTINUE
      ENDIF

C
C             SYSTEMS 10-15 - NITROGEN
C

c$doacross local(iz,iy,ix,sard,term,sk1012,sk1113,sk1214,sk1314)
      DO 150 IZ=1,NZ
      DO 150 IY=1,NY
      DO 150 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 150

C        Algal Resp and Death
      SARD =  NCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .      + NCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ)
      TERM = XEMPRC(IX,IY,IZ)

C        RPON - REFRACTORY PARTICULATE ORGANIC NITROGEN
C                 Sources                         Sinks
C           Algal Resp + Death            Mineralization to RDON
      SK1012 = K1012CT(ISTP20(IX,IY,IZ))*RPON(IX,IY,IZ)*TERM

      CDRPON(IX,IY,IZ) = FRPON*SARD - SK1012
 
C        LPON - LABILE PARTICULATE ORGANIC NITROGEN
C                 Sources                         Sinks
C           Algal Resp + Death            Mineralization to LDON
      SK1113 = K1113CT(ISTP20(IX,IY,IZ))*LPON(IX,IY,IZ)*TERM

      CDLPON(IX,IY,IZ) = FLPON*SARD - SK1113
 
C        RDON - REFRACTORY DISSOLVED ORGANIC NITROGEN
C                 Sources                         Sinks
C           Algal Resp + Death            Mineralization to NH4
      SK1214 = K1214CT(ISTP20(IX,IY,IZ))*RDON(IX,IY,IZ)*TERM

      CDRDON(IX,IY,IZ) = FRDON*SARD + SK1012 - SK1214
 
C        LDON - LABILE DISSOLVED ORGANIC NITROGEN
C                 Sources                         Sinks
C           Algal Resp + Death            Mineralization to NH4
C           Mineralization from LPON
      SK1314 = K1314CT(ISTP20(IX,IY,IZ))*LDON(IX,IY,IZ)*TERM

      CDLDON(IX,IY,IZ) = FLDON*SARD + SK1113 - SK1314
 
C        AMMONIA
C                 Sources                         Sinks
C           Mineralization from LRON      Algal Resp + Death Going
C           Mineralization from LDON          to Organic Pools
C           Algal Uptake of NO23          Nitrification
C     (Note: Algal uptake and release of NH4 represent an exchange of
C            fractions rather than a source or sink of NH4, therefore
C            no direct source/sink terms are included in TNH4 equation.)

      TERM = (1.-FLOCEX)
C     SR13P = FNH4*SARD
C     SK13P = PNH41(IX,IY,IZ)*NCRB1(IX,IY,IZ)*TERM*GPP1(IX,IY,IZ)
C    .      + PNH42(IX,IY,IZ)*NCRB2(IX,IY,IZ)*TERM*GPP2(IX,IY,IZ)
C    .      + PNH43(IX,IY,IZ)*NCRB3(IX,IY,IZ)*TERM*GPP3(IX,IY,IZ)

      SK1415(IX,IY,IZ) = K1415CT(ISTP20(IX,IY,IZ))
     .                  *DNH4(IX,IY,IZ)*DO(IX,IY,IZ)/(KNIT+DO(IX,IY,IZ))
      IF(HYDTEMP(IX,IY,IZ).LE.7.0) SK1415(IX,IY,IZ)=0.0

      SK15P(IX,IY,IZ) =
     .        (1.-PNH41(IX,IY,IZ))*NCRB1(IX,IY,IZ)*TERM*GPP1(IX,IY,IZ)
     .      + (1.-PNH42(IX,IY,IZ))*NCRB2(IX,IY,IZ)*TERM*GPP2(IX,IY,IZ)

      SK151P =
     .        (PNH41(IX,IY,IZ))*NCRB1(IX,IY,IZ)*TERM*GPP1(IX,IY,IZ)
     .      + (PNH42(IX,IY,IZ))*NCRB2(IX,IY,IZ)*TERM*GPP2(IX,IY,IZ)
	 
      CDNH4T(IX,IY,IZ) = SK1214 + SK1314 + SK15P(IX,IY,IZ)
     .            - (1.-FNH4)*SARD - SK1415(IX,IY,IZ)
	  
	  CDNH4T1 = SK1214 + SK1314 - SK151P
     .            + FNH4*SARD - SK1415(IX,IY,IZ)

C        NITRITE+NITRATE
C                 Sources                         Sinks
C           Nitrification                 Algal Uptake
C                                         Denitrification
      SK150(IX,IY,IZ) = K150CT(ISTP20(IX,IY,IZ))
     .                  *NO23(IX,IY,IZ)*KNO3/(KNO3+DO(IX,IY,IZ))
     .                  *LDOC(IX,IY,IZ)/(KMLDOC+LDOC(IX,IY,IZ))

      CDNO23(IX,IY,IZ) = SK1415(IX,IY,IZ) - SK15P(IX,IY,IZ)
     .                 - SK150(IX,IY,IZ)

	  CDNO231 = SK1415(IX,IY,IZ) - SK15P(IX,IY,IZ)
     .                 - SK150(IX,IY,IZ)
!------------TOTAL ALKALINITY VARIATION // SCQ-------------------
!------- +1 MOLE/NH4 PRODUCTION (-1 MOLE/NO3) -------------------
      TA_N = (CDNH4T1  - CDNO231)/14
	  CDREPOC(IX,IY,IZ) = TA_N*1000
	  GDIAG1(IX,IY,IZ) = CDNH4T1/14*1000
	  GDIAG2(IX,IY,IZ) = -CDNO231/14*1000
!--------------CONVERT MG N/L TO UMOL OH-/L----------------------
!---------------CALCIUM PART NEEDED------------------------------  

  150 CONTINUE
  
      IF(IDISK.EQ.2 .OR. IDISK.EQ.3)  THEN
        DO 151 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
           SARD =  NCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .      + NCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ)
           TERM = XEMPRC(IX,IY,IZ)
           SK1012 = K1012CT(ISTP20(IX,IY,IZ))*RPON(IX,IY,IZ)*TERM
           CALL RCAWBUF(10,RPON(IX,IY,IZ),FRPON*SARD,SK1012,
     .          NCRB1(IX,IY,IZ),NCRB2(IX,IY,IZ))
         ELSE
           CALL RCAWBUF(10,RPON_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          PON_DMIN(IX,IY,IZ),PON_DMAX(IX,IY,IZ),
     .          NCRB1(IX,IY,IZ),NCRB2(IX,IY,IZ))
         ENDIF
  151   CONTINUE
        DO 152 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
           SARD =  NCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .      + NCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ)
           TERM = XEMPRC(IX,IY,IZ)
           SK1113 = K1113CT(ISTP20(IX,IY,IZ))*LPON(IX,IY,IZ)*TERM
           DON = RDON(IX,IY,IZ) + LDON(IX,IY,IZ)
           TDN = DON + DNH4(IX,IY,IZ) + NO23(IX,IY,IZ)
C          SARD =  NCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
C           + NCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ)
C           + NCRB3(IX,IY,IZ)*DPP3(IX,IY,IZ)
           CALL RCAWBUF(11,LPON(IX,IY,IZ),FLPON*SARD,SK1113,DON,TDN)
         ELSE
           CALL RCAWBUF(11,LPON_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .        PON_DDA(IX,IY,IZ)/IAVGDDCNTR,DON_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .        DNH4_DDA(IX,IY,IZ)/IAVGDDCNTR,TN_DDA(IX,IY,IZ)/IAVGDDCNTR)
         ENDIF
  152   CONTINUE
        DO 154 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
           TPN = NCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .         + NCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)
     .         + RPON(IX,IY,IZ) + LPON(IX,IY,IZ) 
           SARD =  NCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .      + NCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ)
           TERM = XEMPRC(IX,IY,IZ)
           SK1214 = K1214CT(ISTP20(IX,IY,IZ))*RDON(IX,IY,IZ)*TERM
           TON = TPN + RDON(IX,IY,IZ) + LDON(IX,IY,IZ) 
           CALL RCAWBUF(12,RDON(IX,IY,IZ),FRDON*SARD,SK1214,TPN,TON)
         ELSE
           CALL RCAWBUF(12,RDON_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          CHLA1_DMIN(IX,IY,IZ),CHLA1_DMAX(IX,IY,IZ),
     .          CHLA2_DMIN(IX,IY,IZ),CHLA2_DMAX(IX,IY,IZ))
         ENDIF
  154   CONTINUE
        DO 155 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
           SARD =  NCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .      + NCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ)
           TERM = XEMPRC(IX,IY,IZ)
           SK1314 = K1314CT(ISTP20(IX,IY,IZ))*LDON(IX,IY,IZ)*TERM
           CALL RCAWBUF(13,LDON(IX,IY,IZ),FLDON*SARD,SK1314,
     .          PNH41(IX,IY,IZ),PNH42(IX,IY,IZ))
         ELSE
           CALL RCAWBUF(13,LDON_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          DON_DMIN(IX,IY,IZ),DON_DMAX(IX,IY,IZ),
     .          PNH41(IX,IY,IZ),PNH42(IX,IY,IZ))
         ENDIF
  155   CONTINUE
        DO 156 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
           TDN = RDON(IX,IY,IZ) + LDON(IX,IY,IZ) + DNH4(IX,IY,IZ)
     .         + NO23(IX,IY,IZ)
           DIN = DNH4(IX,IY,IZ) + NO23(IX,IY,IZ)
           SARD =  NCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .      + NCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ)
           TERM = (1.-FLOCEX)
           SR13P = FNH4*SARD
           SK13P = PNH41(IX,IY,IZ)*NCRB1(IX,IY,IZ)*TERM*GPP1(IX,IY,IZ)
     .           + PNH42(IX,IY,IZ)*NCRB2(IX,IY,IZ)*TERM*GPP2(IX,IY,IZ)
           IF(FSM(IX,IY).LE.0.) DNH4(IX,IY,IZ) = NH4T(IX,IY,IZ)
     .          - (NCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .            +NCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ))
           CALL RCAWBUF(14,NH4T(IX,IY,IZ),DNH4(IX,IY,IZ),SR13P,
     .          SK1415(IX,IY,IZ),SK13P)
         ELSE
           CALL RCAWBUF(14,NH4T_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          DNH4_DMIN(IX,IY,IZ),DNH4_DMAX(IX,IY,IZ),
     .          SK1415(IX,IY,IZ),SK13P)
         ENDIF
  156   CONTINUE
        DO 168 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         SK15P(IX,IY,IZ) =
     .     (1.-PNH41(IX,IY,IZ))*NCRB1(IX,IY,IZ)*TERM*GPP1(IX,IY,IZ)
     .   + (1.-PNH42(IX,IY,IZ))*NCRB2(IX,IY,IZ)*TERM*GPP2(IX,IY,IZ)
         IF(IDDOPT.EQ.0)  THEN
           TPN = NCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .         + NCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)
     .         + RPON(IX,IY,IZ) + LPON(IX,IY,IZ) 
           TDN = RDON(IX,IY,IZ) + LDON(IX,IY,IZ) + DNH4(IX,IY,IZ)
     .         + NO23(IX,IY,IZ)
           DIN = DNH4(IX,IY,IZ) + NO23(IX,IY,IZ)
           TN = TPN + TDN
           TERM = (1.-FLOCEX)
           CALL RCAWBUF(15,NO23(IX,IY,IZ),SK15P(IX,IY,IZ),
     .          SK150(IX,IY,IZ),DIN,TN)
         ELSE
           CALL RCAWBUF(15,NO23_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          NO23_DMIN(IX,IY,IZ),NO23_DMAX(IX,IY,IZ),
     .          TN_DMIN(IX,IY,IZ),TN_DMAX(IX,IY,IZ))
         ENDIF
  168   CONTINUE
      ENDIF

C
C             SYSTEMS 16-17 - SILICA
C

c$doacross local(iz,iy,ix,sard,sk1617,sk17p)
      DO 160 IZ=1,NZ
      DO 160 IY=1,NY
      DO 160 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 160

C        Algal Resp and Death
      SARD =  SCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .      + SCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ)

C        BSI - BIOGENIC SILICA
C                 Sources                         Sinks
C           Algal Resp + Death            Mineralization to Avail Si
      SK1617 = K1617CT(ISTP20(IX,IY,IZ))
     .                            *BSI(IX,IY,IZ)*XEMPRC(IX,IY,IZ)

      CDBSI(IX,IY,IZ) = SARD - SK1617
 
C        SIT - TOTAL SILICA
C                 Sources                         Sinks
C           Mineralization of BSi         Algal Resp + Death Going
C                                             to Organic Pools
C     (Note: Algal uptake and release of Si represent an exchange of
C            fractions rather than a source or sink of Si, therefore
C            no direct source/sink terms are included in TSi equation.)
      SK17P = SCRB1(IX,IY,IZ)*(1.-FLOCEX)*GPP1(IX,IY,IZ)
     .      + SCRB2(IX,IY,IZ)*(1.-FLOCEX)*GPP2(IX,IY,IZ)

      CDSIT(IX,IY,IZ) = SK1617 - SARD

  160 CONTINUE

      IF(IDISK.EQ.2 .OR. IDISK.EQ.3)  THEN
        DO 165 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         SARD =  SCRB1(IX,IY,IZ)*DPP1(IX,IY,IZ)
     .      + SCRB2(IX,IY,IZ)*DPP2(IX,IY,IZ)
         SK1617 = K1617CT(ISTP20(IX,IY,IZ))
     .                            *BSI(IX,IY,IZ)*XEMPRC(IX,IY,IZ)
         IF(IDDOPT.EQ.0)  THEN
           CALL RCAWBUF(16,BSI(IX,IY,IZ),SARD,SK1617,SCRB1(IX,IY,IZ),
     .          SCRB2(IX,IY,IZ))
         ELSE
           CALL RCAWBUF(16,BSI_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          BSI_DMIN(IX,IY,IZ),BSI_DMAX(IX,IY,IZ),
     .          SCRB1(IX,IY,IZ),SCRB2(IX,IY,IZ))
         ENDIF
  165   CONTINUE
        DO 166 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
           TSI = BSI(IX,IY,IZ) + SCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .         + SCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ) 
           SK17P = SCRB1(IX,IY,IZ)*(1.-FLOCEX)*GPP1(IX,IY,IZ)
     .           + SCRB2(IX,IY,IZ)*(1.-FLOCEX)*GPP2(IX,IY,IZ)
           IF(FSM(IX,IY).LT.0.) DSI(IX,IY,IZ) = SIT(IX,IY,IZ)
     .          - (SCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .            +SCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ))
           CALL RCAWBUF(17,SIT(IX,IY,IZ),DSI(IX,IY,IZ),SK17P,TSI,
     .          HBAR(IX,IY))
         ELSE
           CALL RCAWBUF(17,SIT_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          DSI_DDA(IX,IY,IZ)/IAVGDDCNTR,DSI_DMIN(IX,IY,IZ),
     .          DSI_DMAX(IX,IY,IZ),HBAR(IX,IY))
         ENDIF
  166   CONTINUE
      ENDIF

C
C             SYSTEMS 18-24 - ORGANIC CARBON
C

c$doacross local(iz,iy,ix,term,sk1820,sk1921,sr23p)
c$share(botbod,botbodhs)
      DO 170 IZ=1,NZ
      DO 170 IY=1,NY
      DO 170 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 170

      TERM = XEMPRC(IX,IY,IZ)

C        RPOC - REFRACTORY PARTICULATE ORGANIC CARBON
C                 Sources                         Sinks
C              Grazed Algae               Hydrolysis to RDOC
      SK1820 = K1820CT(ISTP20(IX,IY,IZ))*RPOC(IX,IY,IZ)*TERM
	  
!-----------------POC1 //SCQ--------------------------	  
      CDRPOC(IX,IY,IZ) = FRPOC*GRAZ(IX,IY,IZ) - SK1820
 
C        LPOC - LABILE PARTICULATE ORGANIC CARBON
C                 Sources                         Sinks
C              Grazed Algae               Hydrolysis to LDOC
      SK1921 = K1921CT(ISTP20(IX,IY,IZ))*LPOC(IX,IY,IZ)*TERM
!-----------------POC2 //SCQ---------------------------
!	  POC1(IX,IY,IZ) = (FLPOC+FRPOC)*GRAZ(IX,IY,IZ)
	  POC2(IX,IY,IZ) = (1-FLOCEX)*(GPP1(IX,IY,IZ)+
     .	           GPP2(IX,IY,IZ))
	  
      CDLPOC(IX,IY,IZ) = FLPOC*GRAZ(IX,IY,IZ) - SK1921
 
C        RDOC - REFRACTORY DISSOLVED ORGANIC CARBON
C                 Sources                         Sinks
C              Grazed Algae                     Oxidation
C              From RPOC
      SK200(IX,IY,IZ) = K200CT(ISTP20(IX,IY,IZ))*RDOC(IX,IY,IZ)
     .            *TERM*DO(IX,IY,IZ)/(KDOC+DO(IX,IY,IZ))

      CDRDOC(IX,IY,IZ) = FRDOC*GRAZ(IX,IY,IZ) + SK1820 - SK200(IX,IY,IZ)
 
C        LDOC - LABILE DISSOLVED ORGANIC CARBON
C                 Sources                         Sinks
C              Grazed Algae                     Oxidation
C              From LPOC                     Denitrification
      SK210(IX,IY,IZ) = K210CT(ISTP20(IX,IY,IZ))*LDOC(IX,IY,IZ)
     .            *LDOC(IX,IY,IZ)/(KMLDOC+LDOC(IX,IY,IZ))
     .            *TERM*DO(IX,IY,IZ)/(KDOC+DO(IX,IY,IZ))

C        Denitrification
C            ( 5 CH2O + 5 H2O + 4 NO3- + 4 H+ = 5 CO2 + 2 N2 + 12 H2O ) 
      SK2114(IX,IY,IZ) = 5./4.*12./14.*SK150(IX,IY,IZ)
  
      CDLDOC(IX,IY,IZ) = FLDOC*GRAZ(IX,IY,IZ) + SK1921
     .                 - SK2114(IX,IY,IZ) - SK210(IX,IY,IZ)

C        EXDOC - ALGAL EXUDATE ORGANIC CARBON
C                 Sources                         Sinks
C              Algal Exudate                    Oxidation
      SR22P = FLOCEX*(GPP1(IX,IY,IZ)+GPP2(IX,IY,IZ))

      SK220(IX,IY,IZ) = K220CT(ISTP20(IX,IY,IZ))*EXDOC(IX,IY,IZ)
     .            *EXDOC(IX,IY,IZ)/(KMLDOC+EXDOC(IX,IY,IZ))
     .            *TERM*DO(IX,IY,IZ)/(KDOC+DO(IX,IY,IZ))

      CDEXDOC(IX,IY,IZ) = SR22P - SK220(IX,IY,IZ)

	  
!--------------------DIC DETAIL //SCQ---------------------------------------
!---------------------------------------------------------------------------
	   DIC_GR = -1.05*(1-FLOCEX)*(GPP1(IX,IY,IZ)+GPP2(IX,IY,IZ))
	   DIC_RE = RESP(IX,IY,IZ)
!	   DIC_NI = 0.0;
	   DIC_OX = 0.92*(SK200(IX,IY,IZ)+SK210(IX,IY,IZ)+SK220(IX,IY,IZ))
	   IF (SAL(IX,IY,NZ) .GT. 18.0) THEN
	      DIC_OX = 0.87*(SK200(IX,IY,IZ)+SK210(IX,IY,IZ)+SK220(IX,IY,IZ))
	   ENDIF	     
	   DIC_DI = SK2114(IX,IY,IZ);
!---------------------------------------------------------------------------
!------CONVERT MG C/L TO UMOL C/L //SCQ-------------------------------------	   
      CDREDOC(IX,IY,IZ)=(DIC_GR + DIC_RE + DIC_OX
     .     +   DIC_DI)/12*1000	 
       GDIAG3(IX,IY,IZ) = DIC_GR/12*1000
       GDIAG4(IX,IY,IZ) = DIC_RE/12*1000
       GDIAG5(IX,IY,IZ) = DIC_OX/12*1000	   
       GDIAG6(IX,IY,IZ) = DIC_DI/12*1000	   
!!-----DIAGNOSTIC DETAIL DUMP------------------------------------------------	
	 
C       BOTTLE BOD5 - INCLUDES EFFECTS OF ALGAL RESPIRATION + NITRIFICATION
      BOTBOD(IX,IY,IZ)=OCRB*( RDOC(IX,IY,IZ)*(1.-EXP(-5.*K200CT(201)))
     .     +   ( K200CT(201)*(1.-EXP(-5*K1820CT(201))) 
     .         - K1820CT(201)*(1.-EXP(-5*K200CT(201))) )
     .       / ( K200CT(201) - K1820CT(201) ) * RPOC(IX,IY,IZ)
     .                      + LDOC(IX,IY,IZ)*(1.-EXP(-5.*K210CT(201)))
     .     +   ( K210CT(201)*(1.-EXP(-5*K1921CT(201))) 
     .         - K1921CT(201)*(1.-EXP(-5*K210CT(201))) )
     .       / ( K210CT(201) - K1921CT(201) ) * LPOC(IX,IY,IZ)
     .                      + 0.0*(1.-EXP(-5.*K240CT(201)))
!	SCQ                        + REDOC(IX,IY,IZ)*(1.-EXP(-5.*K240CT(201)))
     .                 + EXDOC(IX,IY,IZ)*(1.-EXP(-5.*K220CT(201)))
     .                 + PHYT1(IX,IY,IZ)*(1.-EXP(-5.*K1RBT(201)))
     .                 + PHYT2(IX,IY,IZ)*(1.-EXP(-5.*K2RBT(201))) )
     .          + 4.57*DNH4(IX,IY,IZ)*(1.-EXP(-5.*K1415CT(201)))
      BOTBODHS(IX,IY,IZ) = BOTBOD(IX,IY,IZ)+
     .                 O2EQ(IX,IY,IZ)*(1.-EXP(-5.*K250CT(201)))

  170 CONTINUE
 
!!--------ADD SIMPLE SULFATE REDUCTION INTO THE SYSTEM-------SCQ------------ 
      DO 171 IZ=1,NZ
      DO 171 IY=1,NY
      DO 171 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 171
	     IF (DO(IX,IY,IZ) .LE. 2.0) THEN
		     CDREDOC(IX,IY,IZ)=CDREDOC(IX,IY,IZ) + 
     .     5*(0.5/(DO(IX,IY,IZ)+0.5))
! 		     CDREPOC(IX,IY,IZ)=CDREPOC(IX,IY,IZ) + 
!     .     5*1.2*(0.5/(DO(IX,IY,IZ)+0.5)) 
           GDIAG13(IX,IY,IZ) = 5*(0.5/(DO(IX,IY,IZ)+0.5))	 
	     ENDIF	   	 
  171 CONTINUE
!!---------------------------------------------------------------------------  

      IF(IDISK.EQ.2 .OR. IDISK.EQ.3)  THEN
        DO 172 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         TERM = XEMPRC(IX,IY,IZ)
         SK1820 = K1820CT(ISTP20(IX,IY,IZ))*RPOC(IX,IY,IZ)*TERM
         IF(IDDOPT.EQ.0)  THEN
           VAL1 = (RZ(IX,IY,IZ+1)/BVOL(IX,IY,IZ))*
     .     (PHYT1(IX,IY,IZ+1)-PHYT1(IX,IY,IZ))
           VAL2 = (RZ(IX,IY,IZ+1)/BVOL(IX,IY,IZ))*
     .     (PHYT2(IX,IY,IZ+1)-PHYT2(IX,IY,IZ))
           CALL RCAWBUF(18,RPOC(IX,IY,IZ),FRPOC*GRAZ(IX,IY,IZ),SK1820,
     .          VAL1,VAL2)
         ELSE
           CALL RCAWBUF(18,RPOC_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          POC_DMIN(IX,IY,IZ),POC_DMAX(IX,IY,IZ),
     .          POC_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          DOC_DDA(IX,IY,IZ)/IAVGDDCNTR)
         ENDIF
  172   CONTINUE
        DO 173 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
!  SCQ          TTPOC = PHYT1(IX,IY,IZ) + PHYT2(IX,IY,IZ) + PHYT3(IX,IY,IZ)
!     .           + RPOC(IX,IY,IZ) + LPOC(IX,IY,IZ)  + REPOC(IX,IY,IZ) 
           TTPOC = PHYT1(IX,IY,IZ) + PHYT2(IX,IY,IZ)
     .           + RPOC(IX,IY,IZ) + LPOC(IX,IY,IZ) 	 
           TERM = XEMPRC(IX,IY,IZ)
           SK1921 = K1921CT(ISTP20(IX,IY,IZ))*LPOC(IX,IY,IZ)*TERM
           CALL RCAWBUF(19,LPOC(IX,IY,IZ),FLPOC*GRAZ(IX,IY,IZ),SK1921,
     .          TTPOC,DUMMY)
         ELSE
           CALL RCAWBUF(19,LPOC_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          PHYT1_DMIN(IX,IY,IZ),PHYT1_DMAX(IX,IY,IZ),
     .          PHYT2_DMIN(IX,IY,IZ),PHYT2_DMAX(IX,IY,IZ))
         ENDIF
  173   CONTINUE
        DO 174 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         TERM = XEMPRC(IX,IY,IZ)
         IF(IDDOPT.EQ.0)  THEN
           CALL RCAWBUF(20,RDOC(IX,IY,IZ),FRDOC*GRAZ(IX,IY,IZ),
     .          SK200(IX,IY,IZ),RX(IX,IY,IZ),RY(IX,IY,IZ) )
         ELSE
           CALL RCAWBUF(20,RDOC_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          DOC_DMIN(IX,IY,IZ),DOC_DMAX(IX,IY,IZ),
     .          RX(IX,IY,IZ),RY(IX,IY,IZ))
         ENDIF
  174   CONTINUE
        DO 175 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         APPGR = (GPP1(IX,IY,IZ) + GPP1(IX,IY,IZ))/(HBAR(IX,IY)*DZ(IZ))
         IF(IDDOPT.EQ.0)  THEN
           CALL RCAWBUF(21,LDOC(IX,IY,IZ),FLDOC*GRAZ(IX,IY,IZ),
     .          SK210(IX,IY,IZ),SK2114(IX,IY,IZ),APPGR)
         ELSE
           CALL RCAWBUF(21,LDOC_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          FLDOC*GRAZ(IX,IY,IZ),SK210(IX,IY,IZ),SK2114(IX,IY,IZ),
     .          APPGR)
         ENDIF
  175   CONTINUE
        DO 176 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
!SCQ         TTPOC = PHYT1(IX,IY,IZ) + PHYT2(IX,IY,IZ) + PHYT3(IX,IY,IZ)
!     .         + RPOC(IX,IY,IZ) + LPOC(IX,IY,IZ)  + REPOC(IX,IY,IZ) 
         TTPOC = PHYT1(IX,IY,IZ) + PHYT2(IX,IY,IZ)
     .         + RPOC(IX,IY,IZ) + LPOC(IX,IY,IZ)  	 
!         TTDOC = RDOC(IX,IY,IZ) + LDOC(IX,IY,IZ) + REDOC(IX,IY,IZ) 
         TTDOC = RDOC(IX,IY,IZ) + LDOC(IX,IY,IZ) 
     .         + EXDOC(IX,IY,IZ) 
         TOC = TTPOC + TTDOC
         SR22P = FLOCEX*(GPP1(IX,IY,IZ)+GPP2(IX,IY,IZ))
         IF(IDDOPT.EQ.0)  THEN
           CALL RCAWBUF(22,EXDOC(IX,IY,IZ),SK220(IX,IY,IZ),SR22P,
     .          TTDOC,TOC)
         ELSE
           CALL RCAWBUF(22,EXDOC_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          SK220(IX,IY,IZ),SR22P,TTDOC,
     .          TOC_DDA(IX,IY,IZ)/IAVGDDCNTR)
         ENDIF
  176   CONTINUE
        DO 177 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
!         TTPOC = PHYT1(IX,IY,IZ) + PHYT2(IX,IY,IZ) + PHYT3(IX,IY,IZ)
!     .         + RPOC(IX,IY,IZ) + LPOC(IX,IY,IZ)  + REPOC(IX,IY,IZ) 
         TTPOC = PHYT1(IX,IY,IZ) + PHYT2(IX,IY,IZ)
     .         + RPOC(IX,IY,IZ) + LPOC(IX,IY,IZ) 	 
!         TTDOC = RDOC(IX,IY,IZ) + LDOC(IX,IY,IZ) + REDOC(IX,IY,IZ) 	 
         TTDOC = RDOC(IX,IY,IZ) + LDOC(IX,IY,IZ)  
     .         + EXDOC(IX,IY,IZ) 
         TOC = TTPOC + TTDOC
         SR22P = FLOCEX*(GPP1(IX,IY,IZ)+GPP2(IX,IY,IZ))
         IF(IDDOPT.EQ.0)  THEN
           CALL RCAWBUF(23,REPOC(IX,IY,IZ),SK220(IX,IY,IZ),SR22P,  !SCQ
     .          HYDSAL(IX,IY,IZ),TOC)
         ELSE
           CALL RCAWBUF(23,REPOC_DDA(IX,IY,IZ)/IAVGDDCNTR,    !SCQ
     .          SK220(IX,IY,IZ),SR22P,TTDOC,
     .          TOC_DDA(IX,IY,IZ)/IAVGDDCNTR)

         ENDIF
  177   CONTINUE
        DO 178 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
C        ALGAL PRODUCTION USING CO2 AND NH4
      SR26PA = 32./12.*(PNH41(IX,IY,IZ)*GPP1(IX,IY,IZ)
     .                + PNH42(IX,IY,IZ)*GPP2(IX,IY,IZ))

C        ALGAL PRODUCTION USING CO2 AND NO3  (HNO3 + H2O => NH4 + 2O2)
      SR26PB = (1.-PNH41(IX,IY,IZ))*GPP1(IX,IY,IZ)
     .                   * 32.*(1./12.+2.*NCRB1(IX,IY,IZ)/14.)
     .       + (1.-PNH42(IX,IY,IZ))*GPP2(IX,IY,IZ)
     .                   * 32.*(1./12.+2.*NCRB2(IX,IY,IZ)/14.)
C        ALGAL RESPIRATION
      SK26P = OCRB*RESP(IX,IY,IZ)
         IF(IDDOPT.EQ.0)  THEN
           CALL RCAWBUF(24,REDOC(IX,IY,IZ),SK220(IX,IY,IZ),
     .          SR26PA+SR26PB,SK26P,BOTBOD(IX,IY,IZ)) 
         ELSE
           CALL RCAWBUF(24,REDOC_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .     SK220(IX,IY,IZ),SR26PA+SR26PB,SK26P,BOTBOD(IX,IY,IZ) ) 
         ENDIF
  178   CONTINUE
      ENDIF

C
C             SYSTEM 25 - O2*
C

c$doacross local(iz,iy,ix)
      DO 180 IZ=1,NZ
      DO 180 IY=1,NY
      DO 180 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 180

C        O2 Demanding Equivalents (H2S + CH4)
C                 Sources                         Sinks
C             (Sediment Flux)                   Oxidation
      SK250(IX,IY,IZ) = K250CT(ISTP20(IX,IY,IZ))*O2EQ(IX,IY,IZ)
     .            *XEMPRC(IX,IY,IZ)*DO(IX,IY,IZ)/(KO2EQ+DO(IX,IY,IZ))
      CDO2EQ(IX,IY,IZ) = - SK250(IX,IY,IZ)
	  
!---------------H2S + 2O2 = SO4 + 2H+----//SCQ--------------------------
      CDREPOC(IX,IY,IZ) = CDREPOC(IX,IY,IZ)
     .   -SK250(IX,IY,IZ)/32*1000
	  GDIAG7(IX,IY,IZ) = -2*CDO2EQ(IX,IY,IZ)/64*1000
!----------------ALKALINITY +2 FOR SULFIDE OXIDATION--------------------
!-----------------------------------------------------------------------	 
  180 CONTINUE

      IF(IDISK.EQ.2 .OR. IDISK.EQ.3)  THEN
        DO 185 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         SK26OC(IX,IY,IZ) = OCRB*(SK200(IX,IY,IZ) + SK210(IX,IY,IZ)
     .             + SK220(IX,IY,IZ))
!     .             + SK220(IX,IY,IZ) + SK240(IX,IY,IZ))	 
         IF(IDDOPT.EQ.0)  THEN
           CALL RCAWBUF(25,O2EQ(IX,IY,IZ),SK250(IX,IY,IZ),
     .          SK2614(IX,IY,IZ),SK26OC(IX,IY,IZ),HYDSAL(IX,IY,IZ))
         ELSE
           CALL RCAWBUF(25,O2EQ_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          O2EQ_DMIN(IX,IY,IZ),O2EQ_DMAX(IX,IY,IZ),
     .          SK26OC(IX,IY,IZ),ECMSAL_DDA(IX,IY,IZ)/IAVGDDCNTR)
         ENDIF
  185   CONTINUE
      ENDIF

C
C             SYSTEM 26 - DISSOLVED OXYGEN
C

c$doacross local(iz,iy,ix,sr26pa,sr26pb,sk26p) ,
c$& share (cs,doaveg,doming,domaxg) ,
c$& local (qxave,qyave,qvect1,qvect2,klvel,kavel)
      DO 190 IZ=1,NZ
      DO 190 IY=1,NY
      DO 190 IX=1,NX
      DOAVEG(IX,IY,IZ) = DOAVEG(IX,IY,IZ) + DO(IX,IY,IZ)
      DOMING(IX,IY,IZ) = AMIN1(DOMING(IX,IY,IZ),DO(IX,IY,IZ))
      DOMAXG(IX,IY,IZ) = AMAX1(DOMAXG(IX,IY,IZ),DO(IX,IY,IZ))
      IF(FSM(IX,IY).LE.0.)   GO TO 190


C                 Sources                         Sinks
C               Reaeration                    Nitrification
C              Photosynthesis                  Respiration
C                                         Oxidation of Org Carbon
C                                         Oxidation of O2* (H2S/CH4)
C        REAERATION - SURFACE SEGMENT ONLY
      IF(IZ.EQ.1)  THEN
C           COMPUTE OXYGEN SATURATION
        CS(IX,IY) = 14.6244 - 0.36713*HYDTEMP(IX,IY,1)
     .    + 0.0044972*HYDTEMP(IX,IY,1)*HYDTEMP(IX,IY,1)
     .    - 0.0966*SAL(IX,IY,1) + 0.00205*SAL(IX,IY,1)*HYDTEMP(IX,IY,1)
     .    + 0.0002739*SAL(IX,IY,1)*SAL(IX,IY,1)
        IF(KAOPT.EQ.2)  THEN
         QXAVE = (QX(IX,IY,1)/XAX(IX,IY,1)+QX(IX+1,IY,1)/XAX(IX+1,IY,1))
     .           /MIN((FSM(IX,IY)+ABS(FSM(IX+1,IY))),2.0)
         QYAVE = (QY(IX,IY,1)/XAY(IX,IY,1)+QY(IX,IY+1,1)/XAY(IX,IY+1,1))
     .           /MIN((FSM(IX,IY)+ABS(FSM(IX,IY+1))),2.0)
         QVECT1 = SQRT(QXAVE*QXAVE + QYAVE*QYAVE)
         QXAVE = (QX(IX,IY,2)/XAX(IX,IY,2)+QX(IX+1,IY,2)/XAX(IX+1,IY,2))
     .           /MIN((FSM(IX,IY)+ABS(FSM(IX+1,IY))),2.0)
         QYAVE = (QY(IX,IY,2)/XAY(IX,IY,2)+QY(IX,IY+1,2)/XAY(IX,IY+1,2))
     .           /MIN((FSM(IX,IY)+ABS(FSM(IX,IY+1))),2.0)
         QVECT2 = SQRT(QXAVE*QXAVE + QYAVE*QYAVE)
         KLVEL = SQRT(DIFUS*ABS(QVECT1-QVECT2)/
     .                       ((DZ(1)+DZ(2))/2. * HBAR(IX,IY)))
         KA20(IX,IY) = MAX(KLMIN,KLVEL)/(HBAR(IX,IY)*DZ(1))
        ELSEIF(KAOPT.EQ.3)  THEN
         KA20(IX,IY) = MAX(KLMIN,KLWIND)/(HBAR(IX,IY)*DZ(1))
        ENDIF
        SR260(IX,IY,1) = KA20(IX,IY)*KACT(ISTP20(IX,IY,1))
     .     * (CS(IX,IY)-DO(IX,IY,1))
      ENDIF


C        ALGAL PRODUCTION USING CO2 AND NH4
      SR26PA = 32./12.*(PNH41(IX,IY,IZ)*GPP1(IX,IY,IZ)
     .                + PNH42(IX,IY,IZ)*GPP2(IX,IY,IZ))

C        ALGAL PRODUCTION USING CO2 AND NO3  (HNO3 + H2O => NH4 + 2O2)
      SR26PB = (1.-PNH41(IX,IY,IZ))*GPP1(IX,IY,IZ)
     .                   * 32.*(1./12.+2.*NCRB1(IX,IY,IZ)/14.)
     .       + (1.-PNH42(IX,IY,IZ))*GPP2(IX,IY,IZ)
     .                   * 32.*(1./12.+2.*NCRB2(IX,IY,IZ)/14.)

C        ALGAL RESPIRATION
      SK26P = OCRB*RESP(IX,IY,IZ)

C        NITRIFICATION  (NH4 + 2O2 => NO3 + H2O + H)
      SK2614(IX,IY,IZ) = 64./14.*SK1415(IX,IY,IZ)

C        OXIDATION OF ORGANIC CARBON
      SK26OC(IX,IY,IZ) = OCRB*(SK200(IX,IY,IZ) + SK210(IX,IY,IZ)
     .                  + SK220(IX,IY,IZ))
!SCQ     .                  + SK220(IX,IY,IZ) + SK240(IX,IY,IZ))
      CDDO(IX,IY,IZ) = SR260(IX,IY,IZ) + SR26PA + SR26PB - SK26P 
     .    - SK2614(IX,IY,IZ) - SK26OC(IX,IY,IZ) - SK250(IX,IY,IZ)
      CDDO(77,67,IZ) = SR260(77,67,IZ) + SR26PA + SR26PB - SK26P
     .    - SK2614(77,67,IZ) 

  190 CONTINUE

      IF(IDISK.EQ.2 .OR. IDISK.EQ.3)  THEN
        DO 195 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         SR26PA = 32./12.*(PNH41(IX,IY,IZ)*GPP1(IX,IY,IZ)
     .                + PNH42(IX,IY,IZ)*GPP2(IX,IY,IZ))
         SR26PB = (1.-PNH41(IX,IY,IZ))*GPP1(IX,IY,IZ)
     .                   * 32.*(1./12.+2.*NCRB1(IX,IY,IZ)/14.)
     .          + (1.-PNH42(IX,IY,IZ))*GPP2(IX,IY,IZ)
     .                   * 32.*(1./12.+2.*NCRB2(IX,IY,IZ)/14.)
         SK26P = OCRB*RESP(IX,IY,IZ)
         IF(IDDOPT.EQ.0)  THEN
           CALL RCAWBUF(26,DO(IX,IY,IZ),SR260(IX,IY,IZ),SR26PA,SR26PB,
     .          SK26P)
         ELSE
           CALL RCAWBUF(26,DO_DDA(IX,IY,IZ)/IAVGDDCNTR,SR260(IX,IY,IZ),
     .        DO_DMIN(IX,IY,IZ),DO_DMAX(IX,IY,IZ),(SR26PA+SR26PB-SK26P))
         ENDIF
  195   CONTINUE
      ENDIF

C        CLOSE BUFFER


!-------------------AIR SEA CO2 GAS EXCHANGE MODULE //SCQ----------------------
!------Codes are generally borrowed from biology module in ROMS AND CO2SYS-----
!      CFF1 = 1000*550.0           ! DENSITY OF WATER 
! CFF2 unit conversion from cm/hr to m/s, 0.31 exchange coefficient
      CFF2 = 0.31*24.0/100.0      ! TIME STEP 
	  
      DO 1190 IY=1,NY
      DO 1190 IX=1,NX
	  DO 1190 IZ=1,NZ
      IF(FSM(IX,IY).LE.0.)   GO TO 1190

! salinity, tic, ta, phosphate and silica required for partial pressure calculation	  
	    SN = MAX(SAL(IX,IY,IZ),0.1)
		TICN = REDOC(IX,IY,IZ)
		TALKN = REPOC(IX,IY,IZ)
		PO4N = PO4T(IX,IY,IZ)/31*1000
		SIO3N = SIT(IX,IY,IZ)/28*1000
		
	    CALL PCO2_WATER(HYDTEMP(IX,IY,IZ),SN,TICN,
     .       TALKN,PO4N,SIO3N,8.0,PCO2)
	    PCO2 = MIN(PCO2,2500.0)
		
	    IF(IZ .EQ. 1) THEN
           U10SQU = WIND*WIND

! smitsh number air-sea exchange		
		  SCHMIDTN = ACOEF-HYDTEMP(IX,IY,1)*(BCOEF
     .  	-HYDTEMP(IX,IY,1)*(CCOEF-HYDTEMP(IX,IY,1)*DCOEF))

! cff3 exchange coefficient	related with wind speed
		  CFF3 = CFF2*U10SQU*SQRT(660.0/SCHMIDTN)
		
		  TEMPK = 0.01*(HYDTEMP(IX,IY,1)+273.15)
! solubility of co2		
          CO2SOL = EXP(A1+A2/TEMPK+A3*LOG(TEMPK)
     .      +SN*(B1+TEMPK*(B2+B3*TEMPK)))
	 
!	    CO2FLUX = CFF3*CO2SOL*(280-PCO2) !SCQ 409 AIR PRESSURE
! 350 was used as constant atmosphere pressure (ppmv) in year 2000
!		CO2FLUX = CFF3*(CO2SOL*350-CO2STAR*1000)

! CONTROL ON FLUX WITH SALINITY   DISCUSS IT LATER
          CO2FLUX = (1.0 + SN/10.0)*CFF3*CO2SOL*(400-PCO2)
			
		  CDREDOC(IX,IY,1) = CDREDOC(IX,IY,1) 
     . 		+ CO2FLUX/(HBAR(IX,IY)*DZ(1))

!diganostic output	 
	      GDIAG14(IX,IY) = CO2FLUX/(HBAR(IX,IY)*DZ(1))	
		ENDIF
        GDIAG8(IX,IY,IZ) = PCO2
!---------------------------------------------------------------------------
!---------------------------------------------------------------------------		
	
!--------------------DIAGONISTIC //SCQ-----------------------------
!--------------------------------------------------------------------
!       IF (IX .EQ. 60 .AND. IY .EQ. 20) THEN
!         WRITE(6,*) '     PCO2 = ', PCO2
!         WRITE(6,*) '     CFF3 = ', CFF3
!         WRITE(6,*) '     CO2SOL = ', CO2SOL
!		 WRITE(6,*) '     CO2FLUX = ', CO2FLUX
!	   ENDIF
!!-------------------------------------------------------------------
 1190   CONTINUE		
 
       ALLOCATE(OMEGA1(NX,NY,NZ))
       OMEGA1 = 0.0	   
	   CDR = CDREDOC	
!-------------- ADD CALCIUM CARBONATE INTO THE SYSTEM //SCQ------------------
!---Codes are generally borrowed from MITGCM DIC PACKAGE-------------------
       DO 1191 IZ=1,NZ
	   DO 1191 IY=1,NY
       DO 1191 IX=1,NX
       IF(FSM(IX,IY).LE. 0.0)   GO TO 1191	 
! sinking vel is suppposed to be same as poc	   
	     SN = MAX(SAL(IX,IY,IZ),0.1)
		 TICN = REDOC(IX,IY,IZ)
		 TALKN = REPOC(IX,IY,IZ)
		 PO4N = PO4T(IX,IY,IZ)/31*1000
		 SIO3N = SIT(IX,IY,IZ)/28*1000
! calculate the calcium saturation coefficient		
		 CALL CALCIUM_SATURATION(HYDTEMP(IX,IY,IZ),SN,TICN,TALKN,
     . 		PO4N,SIO3N,OMEGA)
	     OMEGA1(IX,IY,IZ) = OMEGA
	       
 1191    CONTINUE	
	   
!	   POC3 = POC1+POC2
       POC3 = POC2
       DO 1192 IZ=1,NZ
       DO 1192 IY=1,NY
       DO 1192 IX=1,NX
       IF(FSM(IX,IY).LE.0.)   GO TO 1192	   
!		 VEL = VSPOM*VSPMTS(ISTP20(IX,IY,IZ))
         IF(OMEGA1(IX,IY,IZ) .GE. 1) THEN
		   SN = MAX(SAL(IX,IY,IZ),0.01)
!           CFLUX = MIN(0.05*POC3(IX,IY,IZ)/12,0.31*SN)
           CFLUX = 0.05*POC3(IX,IY,IZ)/12
           CDPHYT3(IX,IY,IZ)=CDPHYT3(IX,IY,IZ)+CFLUX
           CDREDOC(IX,IY,IZ)=CDREDOC(IX,IY,IZ)-0.2*CFLUX*1000  			 
           CDREPOC(IX,IY,IZ)=CDREPOC(IX,IY,IZ)-0.2*2*CFLUX*1000
		 ELSE
           CFLUX = 0.25*((1.0-OMEGA1(IX,IY,IZ))**0.5)*PHYT3(IX,IY,IZ)
		   CDPHYT3(IX,IY,IZ)=CDPHYT3(IX,IY,IZ)-CFLUX
		   CDREDOC(IX,IY,IZ)=CDREDOC(IX,IY,IZ)+CFLUX*1000
		   CDREPOC(IX,IY,IZ)=CDREPOC(IX,IY,IZ)+2*CFLUX*1000
		 ENDIF 		   
! calculate carbonate sink and dissolution		 
!		 CALL CALCIUM_CARBONATE(IZ,HBAR(IX,IY),DZ(1:20),VEL,
!     .       OMEGA1(IX,IY,:),POC3(IX,IY,IZ),CFLUX)
		 		 
!         DO IZ1 = 1,NZ
!            CDREDOC(IX,IY,IZ1) = CDREDOC(IX,IY,IZ1)+
!     .        + 0*CFLUX(IZ1)/12*1000	 !
!	        CDREPOC(IX,IY,IZ1) = CDREPOC(IX,IY,IZ1)+
!     .        + 0*2*CFLUX(IZ1)/12*1000
!         ENDDO	 
		 
 1192    CONTINUE
 
 !diagonostic output		
	     GDIAG12 = CDREDOC-CDR	
         GDIAG6 = OMEGA1
!-------------------------------------------------------------------------
!-------------------------------------------------------------------------
        DEALLOCATE(OMEGA1)

  206 IF(IDISK.EQ.2 .OR. IDISK.EQ.3)  THEN
         CALL RCAWRIT

C        RE-INITIALIZE ARRAY FOR DETAILED DUMP AVERAGING, IF REQUIRED
        IF(IDDOPT.EQ.1)  THEN
c$doacross local(iz,iy,ix),share(sal_dda,ecmsal_dda),
c$& share(phyt1_dda,phyt2_dda,phyt3_dda),
c$& share(rpop_dda,lpop_dda,rdop_dda,ldop_dda,dpo4_dda),
c$& share(rpon_dda,lpon_dda,rdon_dda,ldon_dda,dnh4_dda,no23_dda),
c$& share(bsi_dda,dsi_dda,poc_dda,doc_dda,toc_dda,don_dda,pon_dda),
c$& share(tn_dda,pop_dda,dop_dda,tp_dda),
c$& share(rpoc_dda,lpoc_dda,rdoc_dda,ldoc_dda,redoc_dda,exdoc_dda),
c$& share(o2eq_dda,do_dda,ecmtem_dda,do_dmin,do_dmax)
          DO 210 IZ=1,NZ
           DO 210 IY=1,NY
            DO 210 IX=1,NX
              SAL_DDA(IX,IY,IZ) = 0.
              ECMSAL_DDA(IX,IY,IZ) = 0.
              PHYT1_DDA(IX,IY,IZ) = 0.
              PHYT2_DDA(IX,IY,IZ) = 0.
              PHYT3_DDA(IX,IY,IZ) = 0.
              RPOP_DDA(IX,IY,IZ) = 0.
              LPOP_DDA(IX,IY,IZ) = 0.
              POP_DDA(IX,IY,IZ) = 0.
              RDOP_DDA(IX,IY,IZ) = 0.
              LDOP_DDA(IX,IY,IZ) = 0.
              DOP_DDA(IX,IY,IZ) = 0.
              DPO4_DDA(IX,IY,IZ) = 0.
              TP_DDA(IX,IY,IZ) = 0.
              RPON_DDA(IX,IY,IZ) = 0.
              LPON_DDA(IX,IY,IZ) = 0.
              PON_DDA(IX,IY,IZ) = 0.
              RDON_DDA(IX,IY,IZ) = 0.
              LDON_DDA(IX,IY,IZ) = 0.
              DON_DDA(IX,IY,IZ) = 0.
              DNH4_DDA(IX,IY,IZ) = 0.
              NO23_DDA(IX,IY,IZ) = 0.
              TN_DDA(IX,IY,IZ) = 0.
              BSI_DDA(IX,IY,IZ) = 0.
              DSI_DDA(IX,IY,IZ) = 0.
              RPOC_DDA(IX,IY,IZ) = 0.
              LPOC_DDA(IX,IY,IZ) = 0.
              RDOC_DDA(IX,IY,IZ) = 0.
              LDOC_DDA(IX,IY,IZ) = 0.
              REDOC_DDA(IX,IY,IZ) = 0.
              REPOC_DDA(IX,IY,IZ) = 0.
              EXDOC_DDA(IX,IY,IZ) = 0.
              POC_DDA(IX,IY,IZ) = 0.
              DOC_DDA(IX,IY,IZ) = 0.
              TOC_DDA(IX,IY,IZ) = 0.
              O2EQ_DDA(IX,IY,IZ) = 0.
              DO_DDA(IX,IY,IZ) = 0.
              ECMTEM_DDA(IX,IY,IZ) = 0.
              PO4T_DDA(IX,IY,IZ) = 0.
              NH4T_DDA(IX,IY,IZ) = 0.
              SIT_DDA(IX,IY,IZ) = 0.
              DO_DMIN(IX,IY,IZ) = 1000.
              DO_DMAX(IX,IY,IZ) = -1000.
  210       CONTINUE
c$doacross local(iz,iy,ix) ,
c$& share(sal_dmin,phyt1_dmin,phyt2_dmin,phyt3_dmin),
c$& share(pop_dmin,dop_dmin,dpo4_dmin,tp_dmin),
c$& share(pon_dmin,don_dmin,dnh4_dmin,no23_dmin,tn_dmin),
c$& share(bsi_dmin,dsi_dmin,hydsal_dmin,hydtemp_dmin),
c$& share(poc_dmin,doc_dmin,toc_dmin,o2eq_dmin,do_dmin),
c$& share(tam_dmin,cchl1_dmin,cchl2_dmin,chla1_dmin,chla2_dmin)
c$& share(cchl3_dmin,chla3_dmin)
        DO 212 IZ=1,NZ
         DO 212 IY=1,NY
          DO 212 IX=1,NX
            SAL_DMIN(IX,IY,IZ) = 1000.
            PHYT1_DMIN(IX,IY,IZ) = 1000.
            PHYT2_DMIN(IX,IY,IZ) = 1000.
            PHYT3_DMIN(IX,IY,IZ) = 1000.
            POP_DMIN(IX,IY,IZ) = 1000.
            DOP_DMIN(IX,IY,IZ) = 1000.
            DPO4_DMIN(IX,IY,IZ) = 1000.
            TP_DMIN(IX,IY,IZ) = 1000.
            PON_DMIN(IX,IY,IZ) = 1000.
            DON_DMIN(IX,IY,IZ) = 1000.
            DNH4_DMIN(IX,IY,IZ) = 1000.
            NO23_DMIN(IX,IY,IZ) = 1000.
            TN_DMIN(IX,IY,IZ) = 1000.
            BSI_DMIN(IX,IY,IZ) = 1000.
            DSI_DMIN(IX,IY,IZ) = 1000.
            POC_DMIN(IX,IY,IZ) = 1000.
            DOC_DMIN(IX,IY,IZ) = 1000.
            TOC_DMIN(IX,IY,IZ) = 1000.
            O2EQ_DMIN(IX,IY,IZ) = 1000.
            DO_DMIN(IX,IY,IZ) = 1000.
            HYDSAL_DMIN(IX,IY,IZ) = 1000.
            HYDTEMP_DMIN(IX,IY,IZ) = 1000.
            CCHL1_DMIN(IX,IY,IZ) = 1000.
            CCHL2_DMIN(IX,IY,IZ) = 1000.
            CCHL3_DMIN(IX,IY,IZ) = 1000.
            CHLA1_DMIN(IX,IY,IZ) = 1000.
            CHLA2_DMIN(IX,IY,IZ) = 1000.
            CHLA3_DMIN(IX,IY,IZ) = 1000.
  212     CONTINUE
c$doacross local(iz,iy,ix) ,
c$& share(sal_dmax,phyt1_dmax,phyt2_dmax,phyt3_dmax),
c$& share(pop_dmax,rdop_dmax,dpo4_dmax,tp_dmax),
c$& share(pon_dmax,don_dmax,dnh4_dmax,no23_dmax,tn_dmax),
c$& share(bsi_dmax,dsi_dmax,hydsal_dmax,hydtemp_dmax),
c$& share(poc_dmax,doc_dmax,toc_dmax,o2eq_dmax,do_dmax),
c$& share(tam_dmax,cchl1_dmax,cchl2_dmax,chla1_dmax,chla2_dmax)
c$& share(,cchl3_dmax,chla3_dmax)
        DO 214 IZ=1,NZ
         DO 214 IY=1,NY
          DO 214 IX=1,NX
            SAL_DMAX(IX,IY,IZ) = -1000.
            PHYT1_DMAX(IX,IY,IZ) = -1000.
            PHYT2_DMAX(IX,IY,IZ) = -1000.
            PHYT3_DMAX(IX,IY,IZ) = -1000.
            POP_DMAX(IX,IY,IZ) = -1000.
            DOP_DMAX(IX,IY,IZ) = -1000.
            DPO4_DMAX(IX,IY,IZ) = -1000.
            TP_DMAX(IX,IY,IZ) = -1000.
            PON_DMAX(IX,IY,IZ) = -1000.
            DON_DMAX(IX,IY,IZ) = -1000.
            DNH4_DMAX(IX,IY,IZ) = -1000.
            NO23_DMAX(IX,IY,IZ) = -1000.
            TN_DMAX(IX,IY,IZ) = -1000.
            BSI_DMAX(IX,IY,IZ) = -1000.
            DSI_DMAX(IX,IY,IZ) = -1000.
            POC_DMAX(IX,IY,IZ) = -1000.
            DOC_DMAX(IX,IY,IZ) = -1000.
            TOC_DMAX(IX,IY,IZ) = -1000.
            O2EQ_DMAX(IX,IY,IZ) = -1000.
            DO_DMAX(IX,IY,IZ) = -1000.
            HYDSAL_DMAX(IX,IY,IZ) = -1000.
            HYDTEMP_DMAX(IX,IY,IZ) = -1000.
            CCHL1_DMAX(IX,IY,IZ) = -1000.
            CCHL2_DMAX(IX,IY,IZ) = -1000.
            CCHL3_DMAX(IX,IY,IZ) = -1000.
            CHLA1_DMAX(IX,IY,IZ) = -1000.
            CHLA2_DMAX(IX,IY,IZ) = -1000.
            CHLA3_DMAX(IX,IY,IZ) = -1000.
  214     CONTINUE
          IAVGDDCNTR = 0
        ENDIF
      ENDIF

C        PERFORM GLOBAL DUMP AVERAGING, IF REQUIRED
      IF(IGDOPT.EQ.1)  THEN
c$doacross local(iz,iy,ix) , share(sal_gda,ecmsal_gda,phyt1_gda),
c$& share(phyt2_gda,tpop_gda,tdop_gda,dpo4_gda),
c$& share(tpon_gda,tdon_gda,dnh4_gda,no23_gda)
        DO 220 IZ=1,NZ
         DO 220 IY=1,NY
          DO 220 IX=1,NX
            SAL_GDA(IX,IY,IZ) = SAL_GDA(IX,IY,IZ) + SAL(IX,IY,IZ)
            ECMSAL_GDA(IX,IY,IZ) = ECMSAL_GDA(IX,IY,IZ) +
     .             HYDSAL(IX,IY,IZ)
            PHYT1_GDA(IX,IY,IZ) = PHYT1_GDA(IX,IY,IZ) + PHYT1(IX,IY,IZ)
            PHYT2_GDA(IX,IY,IZ) = PHYT2_GDA(IX,IY,IZ) + PHYT2(IX,IY,IZ)
            PHYT3_GDA(IX,IY,IZ) = PHYT3_GDA(IX,IY,IZ) + PHYT3(IX,IY,IZ)
            TPOP_GDA(IX,IY,IZ) = TPOP_GDA(IX,IY,IZ) +
     .             PCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ) +
     .             PCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ) +
     .             RPOP(IX,IY,IZ) + LPOP(IX,IY,IZ)
            TDOP_GDA(IX,IY,IZ) = TDOP_GDA(IX,IY,IZ) +
     .             RDOP(IX,IY,IZ) + LDOP(IX,IY,IZ)
            DPO4_GDA(IX,IY,IZ) = DPO4_GDA(IX,IY,IZ) + DPO4(IX,IY,IZ)
            TPON_GDA(IX,IY,IZ) = TPON_GDA(IX,IY,IZ) +
     .             NCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ) +
     .             NCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ) +
     .             RPON(IX,IY,IZ) + LPON(IX,IY,IZ)
            TDON_GDA(IX,IY,IZ) = TDON_GDA(IX,IY,IZ) +
     .             RDON(IX,IY,IZ) + LDON(IX,IY,IZ)
            DNH4_GDA(IX,IY,IZ) = DNH4_GDA(IX,IY,IZ) + DNH4(IX,IY,IZ)
            NO23_GDA(IX,IY,IZ) = NO23_GDA(IX,IY,IZ) + NO23(IX,IY,IZ)
            REDOC_GDA(IX,IY,IZ) = REDOC_GDA(IX,IY,IZ) + REDOC(IX,IY,IZ)  !!SCQ
            REPOC_GDA(IX,IY,IZ) = REPOC_GDA(IX,IY,IZ) + REPOC(IX,IY,IZ)			
  220   CONTINUE
c$doacross local(iz,iy,ix,depth) ,
c$& share(tpoc_gda,tdoc_gda,tpsi_gda,dsi_gda),
c$& share(o2eq_gda,tgpdp_gda,tresp_gda,ske_gda),
c$& share(rcatmp_gda,ecmtmp_gda,botbodhs_gda)
        DO 225 IZ=1,NZ
         DO 225 IY=1,NY
          DO 225 IX=1,NX
            TPSI_GDA(IX,IY,IZ) = TPSI_GDA(IX,IY,IZ) + BSI(IX,IY,IZ)
     .           + SCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .           + SCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)
            DSI_GDA(IX,IY,IZ) = DSI_GDA(IX,IY,IZ) + DSI(IX,IY,IZ)
            TPOC_GDA(IX,IY,IZ) = TPOC_GDA(IX,IY,IZ) +
     .             PHYT1(IX,IY,IZ) + PHYT2(IX,IY,IZ) +
     .             RPOC(IX,IY,IZ) + LPOC(IX,IY,IZ)
            TDOC_GDA(IX,IY,IZ) = TDOC_GDA(IX,IY,IZ) +
     .             RDOC(IX,IY,IZ) + LDOC(IX,IY,IZ) +
     .             EXDOC(IX,IY,IZ) 
            O2EQ_GDA(IX,IY,IZ) = O2EQ_GDA(IX,IY,IZ) + O2EQ(IX,IY,IZ)
            TGPP_GDA(IX,IY,IZ) = TGPP_GDA(IX,IY,IZ) + 0.0
            TNPP_GDA(IX,IY,IZ) = TNPP_GDA(IX,IY,IZ) + 0.0
C        NET PRIMARY PRODUCTIVITY TO APPROXIMATELY THE
C        1 PERCENT LIGHT LEVEL  -  GM C/M**2-DAY
            IF(ISURF.GT.0.0)  THEN
             DEPTH = (ZZ(IZ)+DZ(IZ)/2.) * HBAR(IX,IY)
             IF(EXP(-SKE(IX,IY,IZ)*DEPTH).GT.0.01) THEN
              TGPP_GDA(IX,IY,IZ) = TGPP_GDA(IX,IY,IZ) +
     .            DZ(IZ)*HBAR(IX,IY) *
     .                (GPP1(IX,IY,IZ) + GPP2(IX,IY,IZ))
              TNPP_GDA(IX,IY,IZ) = TNPP_GDA(IX,IY,IZ) +
     .            DZ(IZ)*HBAR(IX,IY) *
     .                (GPP1(IX,IY,IZ) + GPP2(IX,IY,IZ) 
     .                                - RESP(IX,IY,IZ))
             ENDIF
            ENDIF

            TRESP_GDA(IX,IY,IZ) = TRESP_GDA(IX,IY,IZ) +
     .             OCRB*RESP(IX,IY,IZ) + SK26OC(IX,IY,IZ) +
     .             SK250(IX,IY,IZ) + SK2614(IX,IY,IZ)
            SKE_GDA(IX,IY,IZ) = SKE_GDA(IX,IY,IZ) + SKE(IX,IY,IZ)
            ECMTMP_GDA(IX,IY,IZ) = ECMTMP_GDA(IX,IY,IZ) +
     .             HYDTEMP(IX,IY,IZ)
            BOTBODHS_GDA(IX,IY,IZ) = BOTBODHS_GDA(IX,IY,IZ) +
     .             BOTBODHS(IX,IY,IZ)
  225   CONTINUE
      ENDIF

      IAVGGDCNTR = IAVGGDCNTR + 1
      IF(ISURF.GT.0.0)   IAVGPPCNTR = IAVGPPCNTR + 1

!!=======================================================================
!! Diagnostic the physical transport QX/Y/Z, RX/Y/Z, Yun Li, Aug-31-2011
      IF(IDISK.EQ.1 .OR. IDISK.EQ.3)  THEN
        status=nf90_open(TRIM(ADJUSTL(DIAFILNA)),nf90_write,ncID_dia)
        CALL nccheck_status(status,DIAFILNA,RCANA)
!        CALL ncwrt_g3dvar(ncID_dia,iddia_QX,QX)
!        CALL ncwrt_g3dvar(ncID_dia,iddia_QY,QY)
!        CALL ncwrt_g3dvar(ncID_dia,iddia_QZ,QZ(:,:,1:NZ))
!        CALL ncwrt_g3dvar(ncID_dia,iddia_RX,RX)
!        CALL ncwrt_g3dvar(ncID_dia,iddia_RY,RY)
!        CALL ncwrt_g3dvar(ncID_dia,iddia_RZ,RZ(:,:,1:NZ))
        status=nf90_close(ncID_dia)
        CALL nccheck_status(status,DIAFILNA,RCANA)
      ENDIF
!!=======================================================================

!!=======================================================================
!! Diagnostic the setting part of phyto 1 and 2
!      ALLOCATE(TDIAG10(NX,NY,NZ))
!     ALLOCATE(TDIAG11(NX,NY,NZ))
!     TDIAG10 = 0.0
!      TDIAG11 = 0.0
!      DO 241  IY=1,NY
!      DO 241  IX=1,NX
!         IF(FSM(IX,IY).LE.0.) THEN
!           TDIAG10(IX,IY,:) = spval
!           TDIAG11(IX,IY,:) = spval
!         ELSE
!          DO IZ=1,NZ-1
C          SETTLING
C          (1) WINTER DIATOMS
!           ALG1FLX = ALG1VS(IX,IY,IZ)*XAZ(IX,IY)*PHYT1(IX,IY,IZ)
!     .              /BVOL(IX,IY,IZ)
!           TDIAG10(IX,IY,IZ) = TDIAG10(IX,IY,IZ) - ALG1FLX
!           TDIAG10(IX,IY,IZ+1) = TDIAG10(IX,IY,IZ+1) + ALG1FLX
C          (2) SUMMER PHYTOPLANKTON
!           ALG2FLX = ALG2VS(IX,IY,IZ)*XAZ(IX,IY)*PHYT2(IX,IY,IZ)
!     .              /BVOL(IX,IY,IZ)
!           TDIAG11(IX,IY,IZ) = TDIAG11(IX,IY,IZ) - ALG2FLX
!           TDIAG11(IX,IY,IZ+1) = TDIAG11(IX,IY,IZ+1) + ALG2FLX
!          END DO
C          DEPOSITION
C          (1) WINTER DIATOMS
!           DEPFLUX(IX,IY,1) = ALG1VS(IX,IY,NZ)*VSNET1(IX,IY)
!     .               *XAZ(IX,IY)*PHYT1(IX,IY,NZ)/BVOL(IX,IY,NZ)
!           TDIAG10(IX,IY,NZ) = TDIAG10(IX,IY,NZ) - DEPFLUX(IX,IY,1)
C          (2) SUMMER PHYTOPLANKTON
!           DEPFLUX(IX,IY,2) = ALG2VS(IX,IY,NZ)*VSNET2(IX,IY)
!     .               *XAZ(IX,IY)*PHYT2(IX,IY,NZ)/BVOL(IX,IY,NZ)
!           TDIAG11(IX,IY,NZ) = TDIAG11(IX,IY,NZ) - DEPFLUX(IX,IY,2)
!         ENDIF
! 241  CONTINUE
      IF(IDISK.EQ.1 .OR. IDISK.EQ.3)  THEN
        status=nf90_open(TRIM(ADJUSTL(DIAFILNA)),nf90_write,ncID_dia)
        CALL nccheck_status(status,DIAFILNA,RCANA)
!        CALL ncwrt_g3dvar(ncID_dia,iddia_ALG1SET,TDIAG10)
!        CALL ncwrt_g3dvar(ncID_dia,iddia_ALG2SET,TDIAG11)
        CALL ncwrt_g3dvar(ncID_dia,iddia_ANH4,GDIAG1)  !SCQ	
        CALL ncwrt_g3dvar(ncID_dia,iddia_ANO23,GDIAG2)	
        CALL ncwrt_g3dvar(ncID_dia,iddia_CGR,GDIAG3)	
        CALL ncwrt_g3dvar(ncID_dia,iddia_CRE,GDIAG4)	
        CALL ncwrt_g3dvar(ncID_dia,iddia_COX,GDIAG5)		
!        CALL ncwrt_g3dvar(ncID_dia,iddia_CDI,GDIAG6)	
!        CALL ncwrt_g3dvar(ncID_dia,iddia_ACH4,GDIAG7)	
        CALL ncwrt_g3dvar(ncID_dia,iddia_CA,GDIAG12)
        CALL ncwrt_g3dvar(ncID_dia,iddia_POC2,GDIAG8)
!        CALL ncwrt_g3dvar(ncID_dia,iddia_SUL,GDIAG13)    
        CALL ncwrt_g2dvar(ncID_dia,iddia_AIRSEA,GDIAG14)		
        status=nf90_close(ncID_dia)
        CALL nccheck_status(status,DIAFILNA,RCANA)
      ENDIF
	  DEALLOCATE(GDIAG1)
      DEALLOCATE(GDIAG2)
      DEALLOCATE(GDIAG3)
      DEALLOCATE(GDIAG4)
      DEALLOCATE(GDIAG5)
      DEALLOCATE(GDIAG6)
      DEALLOCATE(GDIAG7)
      DEALLOCATE(GDIAG8)	  
!      DEALLOCATE(TDIAG10)
!      DEALLOCATE(TDIAG11)
      DEALLOCATE(GDIAG12)	  
      DEALLOCATE(GDIAG13)	
      DEALLOCATE(GDIAG14)	  
!!=======================================================================

C        CONVERT TO MASS UNITS

c$doacross local(iz,iy,ix,isys)
      DO 230 ISYS=1,NOSYS
       DO 230 IZ=1,NZ
        DO 230 IY=1,NY
         DO 230 IX=1,NX
          CDARAY(IX,IY,IZ,ISYS) = BVOL(IX,IY,IZ)*CDARAY(IX,IY,IZ,ISYS)
  230 CONTINUE

C        SETTLING AND DEPOSITION OF POM

C        SETTLING
c$doacross local(iy,ix,iz,alg1flx,alg2flx,algpflx,algnflx,algsflx),
c$& local(flux,pflux,sflux,term)
      DO 240 IY=1,NY
       DO 240 IZ=1,NZ-1
        DO 240 IX=1,NX
         IF(FSM(IX,IY).LE.0.)   GO TO 240

C        WINTER DIATOMS
      ALG1FLX =  ALG1VS(IX,IY,IZ)*XAZ(IX,IY)*PHYT1(IX,IY,IZ)
      CDPHYT1(IX,IY,IZ) = CDPHYT1(IX,IY,IZ) - ALG1FLX
      CDPHYT1(IX,IY,IZ+1) = CDPHYT1(IX,IY,IZ+1) + ALG1FLX

C        SUMMER PHYTOPLANKTON
      ALG2FLX = ALG2VS(IX,IY,IZ)*XAZ(IX,IY)*PHYT2(IX,IY,IZ)
      CDPHYT2(IX,IY,IZ) = CDPHYT2(IX,IY,IZ) - ALG2FLX
      CDPHYT2(IX,IY,IZ+1) = CDPHYT2(IX,IY,IZ+1) + ALG2FLX

C        FALL PHYTOPLANKTON  !SCQ
      ALG3FLX = ALG3VS(IX,IY,IZ)*XAZ(IX,IY)*0.0
!      CDPHYT3(IX,IY,IZ) = CDPHYT3(IX,IY,IZ) - ALG3FLX
!     CDPHYT3(IX,IY,IZ+1) = CDPHYT3(IX,IY,IZ+1) + ALG3FLX
 
C        ALGAL BOUND PHOSPHORUS, NITROGEN AND SILICA
      ALGPFLX = PCRB1(IX,IY,IZ)*ALG1FLX + PCRB2(IX,IY,IZ)*ALG2FLX
	  
      CDPO4T(IX,IY,IZ) = CDPO4T(IX,IY,IZ) - ALGPFLX
      CDPO4T(IX,IY,IZ+1) = CDPO4T(IX,IY,IZ+1) + ALGPFLX
      ALGNFLX = NCRB1(IX,IY,IZ)*ALG1FLX + NCRB2(IX,IY,IZ)*ALG2FLX
	  
      CDNH4T(IX,IY,IZ) = CDNH4T(IX,IY,IZ) - ALGNFLX
      CDNH4T(IX,IY,IZ+1) = CDNH4T(IX,IY,IZ+1) + ALGNFLX
      ALGSFLX = SCRB1(IX,IY,IZ)*ALG1FLX + SCRB2(IX,IY,IZ)*ALG2FLX
	  
      CDSIT(IX,IY,IZ) = CDSIT(IX,IY,IZ) - ALGSFLX
      CDSIT(IX,IY,IZ+1) = CDSIT(IX,IY,IZ+1) + ALGSFLX

C        SETTLING OF SORBED PHOSPHORUS AND SILICA ASSOCIATED WITH 
C        SUSPENDED SOLIDS
      FLUX = VSPIM*VSPMTS(ISTP20(IX,IY,IZ))*XAZ(IX,IY)
      PFLUX = FLUX*PO4SS(IX,IY,IZ)
      CDPO4T(IX,IY,IZ) = CDPO4T(IX,IY,IZ) - PFLUX
      CDPO4T(IX,IY,IZ+1) = CDPO4T(IX,IY,IZ+1) + PFLUX
      SFLUX = FLUX*SISS(IX,IY,IZ)
      CDSIT(IX,IY,IZ) = CDSIT(IX,IY,IZ) - SFLUX
      CDSIT(IX,IY,IZ+1) = CDSIT(IX,IY,IZ+1) + SFLUX
!--------------------------------------------------------
C        CACO3 SETTLING  !SCQ
      FLUX = VSBAS3*VSPMTS(ISTP20(IX,IY,IZ))*XAZ(IX,IY)
	  TERM = FLUX*PHYT3(IX,IY,IZ)
      CDPHYT3(IX,IY,IZ) = CDPHYT3(IX,IY,IZ) - TERM
      CDPHYT3(IX,IY,IZ+1) = CDPHYT3(IX,IY,IZ+1) + TERM	  
!------------------------------------------------------------
      FLUX = VSPOM*VSPMTS(ISTP20(IX,IY,IZ))*XAZ(IX,IY)
      TERM = FLUX*RPOP(IX,IY,IZ)
      CDRPOP(IX,IY,IZ) = CDRPOP(IX,IY,IZ) - TERM
      CDRPOP(IX,IY,IZ+1) = CDRPOP(IX,IY,IZ+1) + TERM
      TERM = FLUX*LPOP(IX,IY,IZ)
      CDLPOP(IX,IY,IZ) = CDLPOP(IX,IY,IZ) - TERM
      CDLPOP(IX,IY,IZ+1) = CDLPOP(IX,IY,IZ+1) + TERM
      TERM = FLUX*RPON(IX,IY,IZ)
      CDRPON(IX,IY,IZ) = CDRPON(IX,IY,IZ) - TERM
      CDRPON(IX,IY,IZ+1) = CDRPON(IX,IY,IZ+1) + TERM
      TERM = FLUX*LPON(IX,IY,IZ)
      CDLPON(IX,IY,IZ) = CDLPON(IX,IY,IZ) - TERM
      CDLPON(IX,IY,IZ+1) = CDLPON(IX,IY,IZ+1) + TERM
      TERM = FLUX*BSI(IX,IY,IZ)
      CDBSI(IX,IY,IZ) = CDBSI(IX,IY,IZ) - TERM
      CDBSI(IX,IY,IZ+1) = CDBSI(IX,IY,IZ+1) + TERM
      TERM = FLUX*RPOC(IX,IY,IZ)
      CDRPOC(IX,IY,IZ) = CDRPOC(IX,IY,IZ) - TERM
      CDRPOC(IX,IY,IZ+1) = CDRPOC(IX,IY,IZ+1) + TERM
      TERM = FLUX*LPOC(IX,IY,IZ)
      CDLPOC(IX,IY,IZ) = CDLPOC(IX,IY,IZ) - TERM
      CDLPOC(IX,IY,IZ+1) = CDLPOC(IX,IY,IZ+1) + TERM


  240 CONTINUE

C        DEPOSITION
Cc$doacross local(iy,ix,tcorr,vssed)
c$doacross local(iy,ix,tcorr,vssed,alg1flx,alg2flx),
c$& local(algpflx,algnflx,algsflx)
      DO 250 IY=1,NY
      DO 250 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 250

      TCORR = VSSEDT**STP20(IX,IY,NZ)
c     DEPFLUX(IX,IY,1) = ALG1VS(IX,IY,NZ)*VSNET1(IX,IY)*TCORR
c    .               *XAZ(IX,IY)*PHYT1(IX,IY,NZ)
      DEPFLUX(IX,IY,1) = ALG1VS(IX,IY,NZ)*VSNET1(IX,IY)
     .               *XAZ(IX,IY)*PHYT1(IX,IY,NZ)
      ALG1FLX=DEPFLUX(IX,IY,1)
      CDPHYT1(IX,IY,NZ) = CDPHYT1(IX,IY,NZ) - DEPFLUX(IX,IY,1)
c     DEPFLUX(IX,IY,2) = ALG2VS(IX,IY,NZ)*VSNET2(IX,IY)*TCORR
c    .               *XAZ(IX,IY)*PHYT2(IX,IY,NZ)
      DEPFLUX(IX,IY,2) = ALG2VS(IX,IY,NZ)*VSNET2(IX,IY)
     .               *XAZ(IX,IY)*PHYT2(IX,IY,NZ)
      ALG2FLX=DEPFLUX(IX,IY,2)
      CDPHYT2(IX,IY,NZ) = CDPHYT2(IX,IY,NZ) - DEPFLUX(IX,IY,2)
!-------------SCQ-----NO DEPOSITION TO SEDIMENT--------------
      DEPFLUX(IX,IY,3) = ALG3VS(IX,IY,NZ)*VSNET3(IX,IY)*TCORR
     .               *XAZ(IX,IY)*PHYT3(IX,IY,NZ)*0.0
      ALG3FLX=DEPFLUX(IX,IY,3)
      CDPHYT3(IX,IY,NZ) = CDPHYT3(IX,IY,NZ) - DEPFLUX(IX,IY,3)
!------------------------------------------------------------	  
C     ALGAL BOUND PHOSPHORUS, NITROGEN, AND SILICA
      ALGPFLX = PCRB1(IX,IY,NZ)*ALG1FLX + PCRB2(IX,IY,NZ)*ALG2FLX
      CDPO4T(IX,IY,NZ) = CDPO4T(IX,IY,NZ) - ALGPFLX
      ALGNFLX = NCRB1(IX,IY,NZ)*ALG1FLX + NCRB2(IX,IY,NZ)*ALG2FLX
      CDNH4T(IX,IY,NZ) = CDNH4T(IX,IY,NZ) - ALGNFLX
      ALGSFLX = SCRB1(IX,IY,NZ)*ALG1FLX + SCRB2(IX,IY,NZ)*ALG2FLX
      CDSIT(IX,IY,NZ) = CDSIT(IX,IY,NZ) - ALGSFLX
c     VSSED = VSPOM*VSPMTS(ISTP20(IX,IY,NZ))
c    .           *VSNET4(IX,IY)*TCORR*XAZ(IX,IY)
      VSSED = VSNET4(IX,IY)*TCORR*XAZ(IX,IY)
      DEPFLUX(IX,IY,4) = VSSED*RPOP(IX,IY,NZ)
      CDRPOP(IX,IY,NZ) = CDRPOP(IX,IY,NZ) - DEPFLUX(IX,IY,4)
      DEPFLUX(IX,IY,5) = VSSED*LPOP(IX,IY,NZ)
      CDLPOP(IX,IY,NZ) = CDLPOP(IX,IY,NZ) - DEPFLUX(IX,IY,5)
      DEPFLUX(IX,IY,6) = VSSED*RPON(IX,IY,NZ)
      CDRPON(IX,IY,NZ) = CDRPON(IX,IY,NZ) - DEPFLUX(IX,IY,6)
      DEPFLUX(IX,IY,7) = VSSED*LPON(IX,IY,NZ)
      CDLPON(IX,IY,NZ) = CDLPON(IX,IY,NZ) - DEPFLUX(IX,IY,7)
      DEPFLUX(IX,IY,8) = VSSED*BSI(IX,IY,NZ)
      CDBSI(IX,IY,NZ) = CDBSI(IX,IY,NZ) - DEPFLUX(IX,IY,8)
      DEPFLUX(IX,IY,9) = VSSED*RPOC(IX,IY,NZ)
      CDRPOC(IX,IY,NZ) = CDRPOC(IX,IY,NZ) - DEPFLUX(IX,IY,9)
      DEPFLUX(IX,IY,10) = VSSED*LPOC(IX,IY,NZ)
      CDLPOC(IX,IY,NZ) = CDLPOC(IX,IY,NZ) - DEPFLUX(IX,IY,10)
!      VSSED = min(VMAXCSO,
!     .         VMINCSO+(VMAXCSO-VMINCSO)*(REPOC(IX,IY,IZ)/CRCSO)**BVCSO)  !SCQ
!     .        *VSPMTS(ISTP20(IX,IY,NZ))*VSNET4(IX,IY)*TCORR*XAZ(IX,IY)
      DEPFLUX(IX,IY,11) = 0.0
      CDREPOC(IX,IY,NZ) = CDREPOC(IX,IY,NZ) - DEPFLUX(IX,IY,11)
      VSSED = VSPIM*VSPMTS(ISTP20(IX,IY,IZ))
     .           *VSNET4(IX,IY)*TCORR*XAZ(IX,IY)
      DEPFLUX(IX,IY,12) = VSSED*PO4SS(IX,IY,NZ)
      CDPO4T(IX,IY,NZ) = CDPO4T(IX,IY,NZ) - DEPFLUX(IX,IY,12)
      DEPFLUX(IX,IY,13) = VSSED*SISS(IX,IY,NZ)
      CDSIT(IX,IY,NZ) = CDSIT(IX,IY,NZ) - DEPFLUX(IX,IY,13)
  250 CONTINUE

C        CALL SEDMODL TO COMPUTE NUTRIENT FLUXES/SOD

      CALL SED_FLUX

!
!-----------------------------------------------------------------------
! Name of this rca file
!-----------------------------------------------------------------------
!
      RCANA='eutro.f'
	  
C        NUTRIENT FLUXES AND SOD

c$doacross local(iy,ix,sa)
      DO 260 IY=1,NY
      DO 260 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 260

      SA = XAZ(IX,IY)
C        PO4
      CDPO4T(IX,IY,NZ) = CDPO4T(IX,IY,NZ) + JPO4(IX,IY)*SA
C        NH4-N
      CDNH4T(IX,IY,NZ) = CDNH4T(IX,IY,NZ) + JNH4(IX,IY)*SA	  
C        NO3-N
      CDNO23(IX,IY,NZ) = CDNO23(IX,IY,NZ) + JNO3(IX,IY)*SA
C        SILICA
      CDSIT(IX,IY,NZ) = CDSIT(IX,IY,NZ) + JSI(IX,IY)*SA
C        LEACHING O2*  (JHS OR JCH4AQ+JCH4G)
      CDO2EQ(IX,IY,NZ) = CDO2EQ(IX,IY,NZ) + (JHS(IX,IY)
     .     +JCH4AQ(IX,IY)+JCH4G(IX,IY))*SA
C        SOD
      CDDO(IX,IY,NZ) = CDDO(IX,IY,NZ) - SODS(IX,IY)*SA
    
	
!------- SEDIMENT FLUX OF DIC AT BOTTOM LAYER //SCQ--------------------
!----------------------------------------------------------------------
      CDREDOC(IX,IY,NZ) = CDREDOC(IX,IY,NZ) 
     . + SODS(IX,IY)/32/(1+SAL(IX,IY,NZ)/30)*SA*1000
      CDREPOC(IX,IY,NZ)=CDREPOC(IX,IY,NZ)
     .        +(JNH4(IX,IY)-JNO3(IX,IY))*SA/14*1000
	 
	  GDIAG9(IX,IY) = SODS(IX,IY)/32/(1+
     . +	  SAL(IX,IY,NZ)/30)*SA*1000/BVOL(IX,IY,NZ) 
	  GDIAG10(IX,IY) = (JNH4(IX,IY)-JNO3(IX,IY))*SA/14*1000/BVOL(IX,IY,NZ)
	  
      CDREDOC(IX,IY,NZ) = CDREDOC(IX,IY,NZ)
     . + JHS(IX,IY)/32*SA*1000
      CDREPOC(IX,IY,NZ) = CDREPOC(IX,IY,NZ)
     . + JHS(IX,IY)/32*SA*1000    
	 
	  GDIAG11(IX,IY) = JHS(IX,IY)/32*SA*1000/BVOL(IX,IY,NZ)	
!----------------------------------------------------------------------- 
!----------------------------------------------------------------------- 
  260 CONTINUE

  262 CONTINUE
  
!------------------OUTPUT DIAGNOSTIC //SCQ ---------------------------
!---------------------------------------------------------------------
      IF(IDISK.EQ.1 .OR. IDISK.EQ.3)  THEN
        status=nf90_open(TRIM(ADJUSTL(DIAFILNA)),nf90_write,ncID_dia)
        CALL nccheck_status(status,DIAFILNA,RCANA)
        CALL ncwrt_g2dvar(ncID_dia,iddia_CSOD,GDIAG9)
        CALL ncwrt_g2dvar(ncID_dia,iddia_ASNH4,GDIAG10)
        CALL ncwrt_g2dvar(ncID_dia,iddia_ANO3,GDIAG11)
        status=nf90_close(ncID_dia)
        CALL nccheck_status(status,DIAFILNA,RCANA)
      ENDIF  
	  
      DEALLOCATE(GDIAG9)
      DEALLOCATE(GDIAG10)
      DEALLOCATE(GDIAG11)	 
!------------------------------------------------------------------------    
!------------------------------------------------------------------------   

C         CHECK IF TIME TO DUMP TO DISK
      IF(IDISK.EQ.0)   RETURN


C        GLOBAL DUMPS    !!SCQ MARK
      IF(IDISK.EQ.1 .OR. IDISK.EQ.3)  THEN
       IF(IGDOPT.EQ.0)  THEN
!
!------------------------------------------------------------
! Write out state variable into NetCDF files 
!------------------------------------------------------------
!
        IF(NETCDFOPT.EQ.1) THEN
         WRITE(OUT,'(A,i5.5,A,f15.5,A,i5.5,A,A)'),
     .           ' WRITE: TOTAL eutro    IREC = ',IREC,
     .           ' Time = ',time,
     .           ' NetCDF REC = ', ncIREC,
     .           ' in ', TRIM(ADJUSTL(OUTFILNA))
         status=nf90_open(TRIM(ADJUSTL(OUTFILNA)),nf90_write,ncID)
         CALL nccheck_status(status,OUTFILNA,RCANA)
         CALL ncwrt_t1dvar(ncID,ideutro_TIME,TIME )
         CALL ncwrt_t1dvar(ncID,idITOTSF_time,ITOTSF )
         CALL ncwrt_g2dvar(ncID,ideutro_ETA ,ETA  )
         CALL ncwrt_g3dvar(ncID,ideutro_SAL ,SAL  )
         CALL ncwrt_g3dvar(ncID,idPHYT1     ,PHYT1)
         CALL ncwrt_g3dvar(ncID,idPHYT2     ,PHYT2)
!         CALL ncwrt_g3dvar(ncID,idPHYT3     ,PHYT3)
        ELSE
         WRITE(10)   TIME
         WRITE(11)   SAL
         WRITE(11)   PHYT1
         WRITE(11)   PHYT2
         WRITE(11)   PHYT3
        ENDIF
c$doacross local(iz,iy,ix)
         DO 300 IZ=1,NZ
          DO 300 IY=1,NY
           DO 300 IX=1,NX
             TPOP(IX,IY,IZ) = PCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .                      + PCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)
     .                      + RPOP(IX,IY,IZ) + LPOP(IX,IY,IZ)
  300    CONTINUE
!
!------------------------------------------------------------
! Write out state variable into NetCDF files 
!------------------------------------------------------------
!
        IF(NETCDFOPT.EQ.1) THEN
!         CALL ncwrt_g3dvar(ncID,idTPOP,TPOP)
         CALL ncwrt_g3dvar(ncID,idPO4T,PO4T)
         CALL ncwrt_g3dvar(ncID,idSIT,SIT)
        ELSE
         WRITE(11)   TPOP
        ENDIF
c$doacross local(iz,iy,ix)
         DO 305 IZ=1,NZ
          DO 305 IY=1,NY
           DO 305 IX=1,NX
             TDOP(IX,IY,IZ) = RDOP(IX,IY,IZ) + LDOP(IX,IY,IZ)
  305    CONTINUE
!
!------------------------------------------------------------
! Write out state variable into NetCDF files 
!------------------------------------------------------------
!
        IF(NETCDFOPT.EQ.1) THEN
!         CALL ncwrt_g3dvar(ncID,idTDOP,TDOP)
!         CALL ncwrt_g3dvar(ncID,idDPO4,DPO4)
        ELSE
         WRITE(11)   TDOP
         WRITE(11)   DPO4
        ENDIF
c$doacross local(iz,iy,ix)
         DO 310 IZ=1,NZ
          DO 310 IY=1,NY
           DO 310 IX=1,NX
             TPON(IX,IY,IZ) = NCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .                      + NCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)
     .                      + RPON(IX,IY,IZ) + LPON(IX,IY,IZ)
  310    CONTINUE
!
!------------------------------------------------------------
! Write out state variable into NetCDF files 
!------------------------------------------------------------
!        
        IF(NETCDFOPT.EQ.1) THEN
!         CALL ncwrt_g3dvar(ncID,idTPON,TPON)
        ELSE
         WRITE(11)   TPON
        ENDIF
c$doacross local(iz,iy,ix)
         DO 315 IZ=1,NZ
          DO 315 IY=1,NY
           DO 315 IX=1,NX
             TDON(IX,IY,IZ) = RDON(IX,IY,IZ) + LDON(IX,IY,IZ)
  315    CONTINUE
!
!------------------------------------------------------------
! Write out state variable into NetCDF files 
!------------------------------------------------------------
!        
        IF(NETCDFOPT.EQ.1) THEN
!         CALL ncwrt_g3dvar(ncID,idTDON,TDON)
!         CALL ncwrt_g3dvar(ncID,idDNH4,DNH4)
!         CALL ncwrt_g3dvar(ncID,idNO23,NO23)
        ELSE
         WRITE(11)   TDON
         WRITE(11)   DNH4
         WRITE(11)   NO23
        ENDIF
c$doacross local(iz,iy,ix)
         DO 320 IZ=1,NZ
          DO 320 IY=1,NY
           DO 320 IX=1,NX
             TPSI(IX,IY,IZ) = SCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .                      + SCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)
     .                      + BSI(IX,IY,IZ)
  320    CONTINUE
!
!------------------------------------------------------------
! Write out state variable into NetCDF files 
!------------------------------------------------------------
!        
        IF(NETCDFOPT.EQ.1) THEN
!         CALL ncwrt_g3dvar(ncID,idTPSI,TPSI)
!         CALL ncwrt_g3dvar(ncID,idDSI , DSI)
        ELSE
         WRITE(11)   TPSI
         WRITE(11)   DSI
        ENDIF
c$doacross local(iz,iy,ix)
         DO 325 IZ=1,NZ
          DO 325 IY=1,NY
           DO 325 IX=1,NX
             TPOC(IX,IY,IZ) = PHYT1(IX,IY,IZ) + PHYT2(IX,IY,IZ)
     .                      + RPOC(IX,IY,IZ)
     .                      + LPOC(IX,IY,IZ)
	 
!SCQ                         + LPOC(IX,IY,IZ) + REPOC(IX,IY,IZ)
	 
  325    CONTINUE
!
!------------------------------------------------------------
! Write out state variable into NetCDF files 
!------------------------------------------------------------
!        
        IF(NETCDFOPT.EQ.1) THEN
!         CALL ncwrt_g3dvar(ncID,idTPOC,TPOC)
!          CALL ncwrt_g3dvar(ncID,idLPOC,LPOC)
!          CALL ncwrt_g3dvar(ncID,idRPOC,RPOC)
        ELSE
         WRITE(11)   TPOC
        ENDIF
c$doacross local(iz,iy,ix)
         DO 330 IZ=1,NZ
          DO 330 IY=1,NY
           DO 330 IX=1,NX
             TDOC(IX,IY,IZ) = RDOC(IX,IY,IZ) + LDOC(IX,IY,IZ)
     .                      + EXDOC(IX,IY,IZ)
!     .                      + REDOC(IX,IY,IZ) + EXDOC(IX,IY,IZ)	 
  330    CONTINUE
!
!------------------------------------------------------------
! Write out state variable into NetCDF files 
!------------------------------------------------------------
!         
        IF(NETCDFOPT.EQ.1) THEN
!         CALL ncwrt_g3dvar(ncID,idTDOC,TDOC)
!         CALL ncwrt_g3dvar(ncID,idO2EQ,O2EQ)
!          CALL ncwrt_g3dvar(ncID,idLDOC,LDOC)
!          CALL ncwrt_g3dvar(ncID,idRDOC,RDOC)
        ELSE
         WRITE(11)   TDOC
         WRITE(11)   O2EQ
        ENDIF
c$doacross local(iz,iy,ix) , share(doaveg)
         DO 335 IZ=1,NZ
          DO 335 IY=1,NY
           DO 335 IX=1,NX
             DOAVEG(IX,IY,IZ) = DOAVEG(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
  335    CONTINUE
!
!------------------------------------------------------------
! Write out state variable into NetCDF files 
!------------------------------------------------------------
!         
        IF(NETCDFOPT.EQ.1) THEN
         CALL ncwrt_g3dvar(ncID,idDOAVEG,DOAVEG)
!         CALL ncwrt_g3dvar(ncID,idDOMING,DOMING)
!         CALL ncwrt_g3dvar(ncID,idDOMAXG,DOMAXG)
         CALL ncwrt_g3dvar(ncID,idHYDSAL,HYDSAL)
        ELSE
         WRITE(11)   DOAVEG
         WRITE(11)   DOMING
         WRITE(11)   DOMAXG
         WRITE(11)   HYDSAL
        ENDIF
c$doacross local(iz,iy,ix) , share(chlaveg)
         DO 340 IZ=1,NZ
          DO 340 IY=1,NY
           DO 340 IX=1,NX
             CHLAVEG(IX,IY,IZ) = CHLAVEG(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
  340    CONTINUE
!
!------------------------------------------------------------
! Write out state variable into NetCDF files 
!------------------------------------------------------------
!         
        IF(NETCDFOPT.EQ.1) THEN
         CALL ncwrt_g3dvar(ncID,idCHLAVEG,CHLAVEG)
         CALL ncwrt_g3dvar(ncID,idREDOC,REDOC)   !SCQ WRITE OUTPUT OF TA AND DIC
         CALL ncwrt_g3dvar(ncID,idREPOC,REPOC)
        ELSE
         WRITE(11)   CHLAVEG
         WRITE(11)   REDOC
         WRITE(11)   REPOC
        ENDIF
C        NET PRIMARY PRODUCTIVITY TO APPROXIMATELY THE
C        1 PERCENT LIGHT LEVEL  -  MG C/M**2-DAY
         DO 345 IZ=1,NZ
          DO 345 IY=1,NY
           DO 345 IX=1,NX
             DEPTH = (ZZ(IZ)+DZ(IZ)/2.) * HBAR(IX,IY)
             IF(EXP(-SKE(IX,IY,IZ)*DEPTH).GT.0.01) THEN
C======== DEPTH-> HBAR, Jeremy and Yun, 08-29-2011 ===============
               TGPP(IX,IY,IZ) = 1000.*DZ(IZ)*HBAR(IX,IY)*
     .           (GPP1(IX,IY,IZ) + GPP2(IX,IY,IZ))
               TNPP(IX,IY,IZ) = 1000.*DZ(IZ)*HBAR(IX,IY)*
     .           (GPP1(IX,IY,IZ) + GPP2(IX,IY,IZ)
     .          - DPP1(IX,IY,IZ) - DPP2(IX,IY,IZ))
             ELSE
               TGPP(IX,IY,IZ) = 0.0
               TNPP(IX,IY,IZ) = 0.0
             ENDIF
  345    CONTINUE
!
!------------------------------------------------------------
! Write out state variable into NetCDF files 
!------------------------------------------------------------
!         
        IF(NETCDFOPT.EQ.1) THEN
!         CALL ncwrt_g3dvar(ncID,idTGPP,TGPP)
!         CALL ncwrt_g3dvar(ncID,idTNPP,TNPP)
        ELSE
         WRITE(11)   TGPP
         WRITE(11)   TNPP
        ENDIF
         DO 350 IZ=1,NZ
          DO 350 IY=1,NY
           DO 350 IX=1,NX
             TRESP(IX,IY,IZ) = OCRB*RESP(IX,IY,IZ) + SK26OC(IX,IY,IZ)
     .                       + SK250(IX,IY,IZ) + SK2614(IX,IY,IZ)
  350    CONTINUE
!        
!------------------------------------------------------------
! Write out state variable into NetCDF files 
!------------------------------------------------------------
!         
        IF(NETCDFOPT.EQ.1) THEN
!         CALL ncwrt_g3dvar(ncID,idTRESP  ,TRESP  )
         CALL ncwrt_g3dvar(ncID,idHYDTEMP,HYDTEMP)
!         CALL ncwrt_g3dvar(ncID,idSKE    ,SKE    )
         status=nf90_close(ncID)
         CALL nccheck_status(status,OUTFILNA,RCANA)
         ncIREC=ncIREC+1
        ELSE
         WRITE(11)   TRESP
         WRITE(11)   HYDTEMP
         WRITE(11)   SKE
        ENDIF
       ELSE
c$doacross local(iz,iy,ix) , share(sal_gda,ecmsal_gda),
c$& share(phyt1_gda,phyt2_gda,phyt3_gda),
c$& share(tpop_gda,tdop_gda,dpo4_gda),
c$& share(tpon_gda,tdon_gda,dnh4_gda,no23_gda),
c$& share(tpsi_gda,dsi_gda,tpoc_gda,tdoc_gda),
c$& share(o2eq_gda,doaveg,rcatmp_gda,ecmtmp_gda,chlaveg),
c$& share(tgpdp_gda,tresp_gda,ske_gda,botbodhs_gda)
C        PREVENT DIVISION BY ZERO (IF AVERAGING PERIOD LESS THAN DAY)
         IF(IAVGPPCNTR.EQ.0) IAVGPPCNTR=1
         DO 360 IZ=1,NZ
          DO 360 IY=1,NY
           DO 360 IX=1,NX
            SAL_GDA(IX,IY,IZ) = SAL_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            ECMSAL_GDA(IX,IY,IZ)=ECMSAL_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            PHYT1_GDA(IX,IY,IZ) = PHYT1_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            PHYT2_GDA(IX,IY,IZ) = PHYT2_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            PHYT3_GDA(IX,IY,IZ) = PHYT3_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            TPOP_GDA(IX,IY,IZ) = TPOP_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            TDOP_GDA(IX,IY,IZ) = TDOP_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            DPO4_GDA(IX,IY,IZ) = DPO4_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            TPON_GDA(IX,IY,IZ) = TPON_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            REDOC_GDA(IX,IY,IZ) = REDOC_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)   !SCQ
            REPOC_GDA(IX,IY,IZ) = REPOC_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)			
            TDON_GDA(IX,IY,IZ) = TDON_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            DNH4_GDA(IX,IY,IZ) = DNH4_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            NO23_GDA(IX,IY,IZ) = NO23_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            TPSI_GDA(IX,IY,IZ) = TPSI_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            DSI_GDA(IX,IY,IZ) = DSI_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            TPOC_GDA(IX,IY,IZ) = TPOC_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            TDOC_GDA(IX,IY,IZ) = TDOC_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            O2EQ_GDA(IX,IY,IZ) = O2EQ_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            DOAVEG(IX,IY,IZ) = DOAVEG(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            ECMTMP_GDA(IX,IY,IZ)=ECMTMP_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            CHLAVEG(IX,IY,IZ) = CHLAVEG(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
C        CONVERT TO GM C/M2-DAY UNITS
            TGPP_GDA(IX,IY,IZ) = 1000.*TGPP_GDA(IX,IY,IZ)/
     .                                               FLOAT(IAVGPPCNTR)
            TNPP_GDA(IX,IY,IZ) = 1000.*TNPP_GDA(IX,IY,IZ)/
     .                                               FLOAT(IAVGPPCNTR)
            TRESP_GDA(IX,IY,IZ) = TRESP_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            BOTBODHS_GDA(IX,IY,IZ) =
     .                         BOTBODHS_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
            SKE_GDA(IX,IY,IZ) = SKE_GDA(IX,IY,IZ)/FLOAT(IAVGGDCNTR)
  360    CONTINUE
!        
!------------------------------------------------------------
! Write out global dumped state variable into NetCDF files
!------------------------------------------------------------
!         
        IF(NETCDFOPT.EQ.1) THEN
         WRITE(*,'(A,i5.5,A,f15.5,A,i5.5,A,A)'),
     .           ' WRITE: TOTAL eutro    IREC = ',IREC,
     .           ' Time = ',time,
     .           ' NetCDF REC = ', ncIREC,
     .           ' in ',TRIM(ADJUSTL(OUTFILNA))
         status=nf90_open(TRIM(ADJUSTL(OUTFILNA)),nf90_write,ncID)
         CALL nccheck_status(status,OUTFILNA,RCANA)
         IF(INITB.EQ.0)
     .   CALL ncwrt_t1dvar(ncID,ideutro_TIME    ,TIME)
         IF(INITB.GE.1)
     .   CALL ncwrt_t1dvar(ncID,ideutro_TIME    ,
     .                     TIME-(FLOAT(IPRNTGSECS)/86400.)/2.)
         CALL ncwrt_g3dvar(ncID,ideutro_SAL_GDA,SAL_GDA    )
!		 WRITE(OUT,*) 4
         CALL ncwrt_g3dvar(ncID,idPHYT1_GDA    ,PHYT1_GDA  )
         CALL ncwrt_g3dvar(ncID,idPHYT2_GDA    ,PHYT2_GDA  )
         CALL ncwrt_g3dvar(ncID,idPHYT3_GDA    ,PHYT3_GDA  )
         CALL ncwrt_g3dvar(ncID,idTPOP_GDA     ,TPOP_GDA   )
!         CALL ncwrt_g3dvar(ncID,idTDOP_GDA     ,TDOP_GDA   )
         CALL ncwrt_g3dvar(ncID,idDPO4_GDA     ,DPO4_GDA   )
         CALL ncwrt_g3dvar(ncID,idTPON_GDA     ,TPON_GDA   ) 
 !        CALL ncwrt_g3dvar(ncID,idTDON_GDA     ,TDON_GDA   )
         CALL ncwrt_g3dvar(ncID,idDNH4_GDA     ,DNH4_GDA   )
!         CALL ncwrt_g3dvar(ncID,idNO23_GDA     ,NO23_GDA   )
         CALL ncwrt_g3dvar(ncID,idTPSI_GDA     ,TPSI_GDA   )
!         CALL ncwrt_g3dvar(ncID,idDSI_GDA      ,DSI_GDA    )
         CALL ncwrt_g3dvar(ncID,idTPOC_GDA     ,TPOC_GDA   )
!         CALL ncwrt_g3dvar(ncID,idTDOC_GDA     ,TDOC_GDA   )
         CALL ncwrt_g3dvar(ncID,idO2EQ_GDA     ,O2EQ_GDA   )
         CALL ncwrt_g3dvar(ncID,idDOAVEG_GDA   ,DOAVEG     )
!         CALL ncwrt_g3dvar(ncID,idDOMING_GDA   ,DOMING     )
!         CALL ncwrt_g3dvar(ncID,idDOMAXG_GDA   ,DOMAXG     )
!         CALL ncwrt_g3dvar(ncID,idHYDSAL_GDA   ,ECMSAL     )
!         CALL ncwrt_g3dvar(ncID,idCHLAVEG_GDA  ,CHLAVEG    )
!		 WRITE(OUT,*) 5
         CALL ncwrt_g3dvar(ncID,idREDOC_GDA    ,REDOC_GDA  )  
!		 WRITE(OUT,*) 6
         CALL ncwrt_g3dvar(ncID,idREPOC_GDA    ,REPOC_GDA  )		 
         ! CALL ncwrt_g3dvar(ncID,idCHLMING_GDA  ,CHLMING    )
         ! CALL ncwrt_g3dvar(ncID,idCHLMAXG_GDA  ,CHLMAXG    )
!         CALL ncwrt_g3dvar(ncID,idTGPP_GDA     ,TGPP_GDA   )
!         CALL ncwrt_g3dvar(ncID,idTNPP_GDA     ,TNPP_GDA   )
!         CALL ncwrt_g3dvar(ncID,idTRESP_GDA    ,TRESP_GDA  )
!         CALL ncwrt_g3dvar(ncID,idHYDTMP_GDA   ,ECMTMP_GDA )
		 WRITE(OUT,*) 7
         CALL ncwrt_g3dvar(ncID,idSKE_GDA      ,SKE_GDA    )
         status=nf90_close(ncID)
         CALL nccheck_status(status,OUTFILNA,RCANA)
         ncIREC=ncIREC+1
        ELSE
         IF(INITB.EQ.0) WRITE(10)   TIME
         IF(INITB.GE.1) WRITE(10)   TIME-(FLOAT(IPRNTGSECS)/86400.)/2.
         WRITE(11)   SAL_GDA
         WRITE(11)   PHYT1_GDA
         WRITE(11)   PHYT2_GDA
         WRITE(11)   PHYT3_GDA
         WRITE(11)   TPOP_GDA
         WRITE(11)   TDOP_GDA
         WRITE(11)   DPO4_GDA
         WRITE(11)   TPON_GDA
         WRITE(11)   TDON_GDA
         WRITE(11)   DNH4_GDA
         WRITE(11)   NO23_GDA
         WRITE(11)   TPSI_GDA
         WRITE(11)   DSI_GDA
         WRITE(11)   TPOC_GDA
         WRITE(11)   TDOC_GDA
         WRITE(11)   O2EQ_GDA
         WRITE(11)   DOAVEG
         WRITE(11)   DOMING
         WRITE(11)   DOMAXG
         WRITE(11)   ECMSAL_GDA
         WRITE(11)   CHLAVEG
         ! WRITE(11)   CHLMING
         ! WRITE(11)   CHLMAXG
         WRITE(11)   REPOC_GDA   
         WRITE(11)   REDOC_GDA		 
         WRITE(11)   TGPP_GDA
         WRITE(11)   TNPP_GDA
         WRITE(11)   TRESP_GDA
         WRITE(11)   ECMTMP_GDA
         WRITE(11)   SKE_GDA
        ENDIF

       ENDIF
         

c$doacross local(iz,iy,ix) , share(chlaveg,chlmaxg,chlming),
c$& share(doaveg,doming,domaxg)
       DO 375 IZ=1,NZ
        DO 375 IY=1,NY
         DO 375 IX=1,NX
          CHLAVEG(IX,IY,IZ) = 0.
          DOAVEG(IX,IY,IZ) = 0.
          CHLMING(IX,IY,IZ) = 1000.
          DOMING(IX,IY,IZ) = 1000.
          CHLMAXG(IX,IY,IZ) = -1000.
          DOMAXG(IX,IY,IZ) = -1000.
  375  CONTINUE
       IF(IGDOPT.EQ.1)  THEN
c$doacross local(iz,iy,ix) , share(sal_gda,ecmsal_gda),
c$& share(phyt1_gda,phyt2_gda,phyt3_gda),
c$& share(tpop_gda,tdop_gda,dpo4_gda),
c$& share(tpon_gda,tdon_gda,dnh4_gda,no23_gda),
c$& share(tpoc_gda,tdoc_gda,tpsi_gda,dsi_gda),
c$& share(o2eq_gda,rcatmp_gda,ecmtmp_gda,ske_gda),
c$& share(tgpdp_gda,tresp_gda,botbodhs_gda)
         DO 380 IZ=1,NZ
          DO 380 IY=1,NY
           DO 380 IX=1,NX
            SAL_GDA(IX,IY,IZ) = 0.
            ECMSAL_GDA(IX,IY,IZ) = 0.
            PHYT1_GDA(IX,IY,IZ) = 0.
            PHYT2_GDA(IX,IY,IZ) = 0.
            PHYT3_GDA(IX,IY,IZ) = 0.
            TPOP_GDA(IX,IY,IZ) = 0.
            TDOP_GDA(IX,IY,IZ) = 0.
            DPO4_GDA(IX,IY,IZ) = 0.
            TPON_GDA(IX,IY,IZ) = 0.
			REPOC_GDA(IX,IY,IZ) = 0.  
			REDOC_GDA(IX,IY,IZ) = 0.
            TDON_GDA(IX,IY,IZ) = 0.
            DNH4_GDA(IX,IY,IZ) = 0.
            NO23_GDA(IX,IY,IZ) = 0.
            TPSI_GDA(IX,IY,IZ) = 0.
            DSI_GDA(IX,IY,IZ) = 0.
            TPOC_GDA(IX,IY,IZ) = 0.
            TDOC_GDA(IX,IY,IZ) = 0.
            O2EQ_GDA(IX,IY,IZ) = 0.
            ECMTMP_GDA(IX,IY,IZ) = 0.
            TGPP_GDA(IX,IY,IZ) = 0.
            TNPP_GDA(IX,IY,IZ) = 0.
            TRESP_GDA(IX,IY,IZ) = 0.
            BOTBODHS_GDA(IX,IY,IZ) = 0.
            SKE_GDA(IX,IY,IZ) = 0.
  380    CONTINUE
       ENDIF

       IAVGGDCNTR = 0
       IAVGPPCNTR = 0

       ENDIF

C        INITIAL CONDITION FILE
!
!------------------------------------------------------------
!  Optionally write restart file 
!------------------------------------------------------------
!
      IF(NETCDFOPT.EQ.1) THEN
        IF(ITIMESECS.GE.NXPRTR) THEN
        status=nf90_open(TRIM(ADJUSTL(RSTFILNA)),nf90_write,ncID_rst)
        CALL nccheck_status(status,RSTFILNA,RCANA)
        CALL ncwrt_rstvar(ncID_rst,ideutro_TIME,idTvar,TIME,CARAY)
        status=nf90_close(ncID_rst)
        CALL nccheck_status(status,RSTFILNA,RCANA)
        WRITE(OUT,'(A,i5.5,A,f15.5,A,i5.5,A,A)'),
     .           ' WRITE: RESTART eutro  IREC = ',IREC,
     .           ' Time = ',time,
     .           ' NetCDF REC = ', rstTflag,
     .           ' in ', TRIM(ADJUSTL(RSTFILNA))
        IF(rstTflag.EQ.0) rstTflag=1
        rstTflag=rstTflag+1
        IF(rstTflag.GT.2) rstTflag=1
        NXPRTR = NXPRTR + IPRNTRSECS
        ENDIF
      ELSE
        REWIND 15
        WRITE(15)  CARAY
      ENDIF

C        IF LAST TIME THROUGH THE TUNER SUBROUTINE -
C           DEALLOCATE ARRAYS AS APPROPRIATE
      IF(INITB.EQ.2)  THEN
        DEALLOCATE(SK1415,SK2614,SK150,SK2114,SK15P,SK200)
        DEALLOCATE(SK210,SK220,SK240,SK250,SR260,SK2324,SK26OC)
        IF(IGDOPT.EQ.1)  THEN
         DEALLOCATE(SAL_GDA,PHYT1_GDA,PHYT2_GDA,PHYT3_GDA)
         DEALLOCATE(TPOP_GDA,TDOP_GDA,TPON_GDA,TDON_GDA)
         DEALLOCATE(TPOC_GDA,TDOC_GDA,DPO4_GDA,DNH4_GDA)
         DEALLOCATE(NO23_GDA,DSI_GDA,O2EQ_GDA,BOTBODHS_GDA)
         DEALLOCATE(TGPP_GDA,TNPP_GDA,TRESP_GDA,SKE_GDA)
         DEALLOCATE(ECMTMP_GDA,ECMSAL_GDA,REDOC_GDA,REPOC_GDA)  !SCQ
        ENDIF
        IF(IDDOPT.EQ.1)  THEN
         DEALLOCATE(ECMSAL_DDA)
         DEALLOCATE(RPOP_DDA,LPOP_DDA,RDOP_DDA,LDOP_DDA,DPO4_DDA)
         DEALLOCATE(RPON_DDA,LPON_DDA,RDON_DDA,LDON_DDA,DNH4_DDA)
         DEALLOCATE(NO23_DDA,BSI_DDA,DSI_DDA,RPOC_DDA,LPOC_DDA)
         DEALLOCATE(RDOC_DDA,LDOC_DDA,REPOC_DDA,REDOC_DDA,EXDOC_DDA)
         DEALLOCATE(O2EQ_DDA,DO_DDA,ECMTEM_DDA,PO4T_DDA,NH4T_DDA)
         DEALLOCATE(SIT_DDA,DO_DMIN,DO_DMAX)
         DEALLOCATE(PHYT1_DMIN,PHYT2_DMIN,PHYT3_DMIN)
         DEALLOCATE(POP_DMIN,DOP_DMIN,DPO4_DMIN)
         DEALLOCATE(PON_DMIN,DON_DMIN,DNH4_DMIN,NO23_DMIN)
         DEALLOCATE(TP_DMIN,TN_DMIN,BSI_DMIN,DSI_DMIN)
         DEALLOCATE(POC_DMIN,DOC_DMIN,TOC_DMIN,O2EQ_DMIN)
         DEALLOCATE(HYDSAL_DMIN,HYDTEMP_DMIN)
         DEALLOCATE(CCHL1_DMIN,CCHL2_DMIN,CCHL3_DMIN)
         DEALLOCATE(CHLA1_DMIN,CHLA2_DMIN,CHLA3_DMIN)
         DEALLOCATE(PHYT1_DMAX,PHYT2_DMAX,PHYT3_DMAX)
         DEALLOCATE(POP_DMAX,DOP_DMAX,DPO4_DMAX)
         DEALLOCATE(PON_DMAX,DON_DMAX,DNH4_DMAX,NO23_DMAX)
         DEALLOCATE(TP_DMAX,TN_DMAX,BSI_DMAX,DSI_DMAX)
         DEALLOCATE(POC_DMAX,DOC_DMAX,TOC_DMAX,O2EQ_DMAX)
         DEALLOCATE(HYDSAL_DMAX,HYDTEMP_DMAX)
         DEALLOCATE(CCHL1_DMAX,CCHL2_DMAX,CCHL3_DMAX)
         DEALLOCATE(CHLA1_DMAX,CHLA2_DMAX,CHLA3_DMAX)
        ENDIF
      ENDIF
      RETURN

  900 WRITE(OUT,9990)
 9990 FORMAT(///5X,'INPUT ERROR WHILE READING IGDOPT,IDDOPT'//)
      CALL EXIT
  999 STOP 'PROGRAM TERMINATED ABNORMALLY'

C       ERROR ON TEMPERATURE READ
  910 WRITE(OUT,9100)  
 9100 FORMAT(' Error encountered reading kebase.inp'/)
      CALL EXIT
      END
      SUBROUTINE INIT_STD_EUTRO
!
      USE netcdf
!
      SAVE

      INCLUDE 'RCACM'
      INCLUDE 'NetCDFCM'
C        STATE-VARIABLES
      REAL
     .      SAL(NX,NY,NZ)   , CDSAL(NX,NY,NZ)
     .    , PHYT1(NX,NY,NZ) , CDPHYT1(NX,NY,NZ)
     .    , PHYT2(NX,NY,NZ) , CDPHYT2(NX,NY,NZ)
     .    , PHYT3(NX,NY,NZ) , CDPHYT3(NX,NY,NZ)
     .    , PO4T(NX,NY,NZ)  , CDPO4T(NX,NY,NZ)
     .    , NH4T(NX,NY,NZ)  , CDNH4T(NX,NY,NZ)
     .    , NO23(NX,NY,NZ)  , CDNO23(NX,NY,NZ)
     .    , SIT(NX,NY,NZ)   , CDSIT(NX,NY,NZ)
      EQUIVALENCE
     .  (CARAY(1,1,1,1),SAL(1,1,1))   ,(CDARAY(1,1,1,1),CDSAL(1,1,1))
     . ,(CARAY(1,1,1,2),PHYT1(1,1,1)) ,(CDARAY(1,1,1,2),CDPHYT1(1,1,1))
     . ,(CARAY(1,1,1,3),PHYT2(1,1,1)) ,(CDARAY(1,1,1,3),CDPHYT2(1,1,1))
     . ,(CARAY(1,1,1,4),PHYT3(1,1,1)) ,(CDARAY(1,1,1,4),CDPHYT3(1,1,1))
     . ,(CARAY(1,1,1,9),PO4T(1,1,1))  ,(CDARAY(1,1,1,9),CDPO4T(1,1,1))
     . ,(CARAY(1,1,1,14),NH4T(1,1,1)) ,(CDARAY(1,1,1,14),CDNH4T(1,1,1))
     . ,(CARAY(1,1,1,15),NO23(1,1,1)) ,(CDARAY(1,1,1,15),CDNO23(1,1,1))
     . ,(CARAY(1,1,1,17),SIT(1,1,1))  ,(CDARAY(1,1,1,17),CDSIT(1,1,1))

C        LINKAGE FOR EUTROPHICATION ALGAL GROWTH ROUTINES
      REAL
     .    DPO4(NX,NY,NZ),DNH4(NX,NY,NZ)
     .   ,DSI(NX,NY,NZ)
      EQUIVALENCE
     .    (CKINARRAY(1,1,1,1),DPO4(1,1,1))
     .   ,(CKINARRAY(1,1,1,2),DNH4(1,1,1))
     .   ,(CKINARRAY(1,1,1,3),DSI(1,1,1))

C        LABELED COMMON FOR EUTROPHICATION ALGAL GROWTH ROUTINES
      REAL
     .    PCRB1(NX,NY,NZ),PCRB2(NX,NY,NZ)
     .   ,PCRB3(NX,NY,NZ)
     .   ,NCRB1(NX,NY,NZ),NCRB2(NX,NY,NZ)
     .   ,NCRB3(NX,NY,NZ)
     .   ,SCRB1(NX,NY,NZ),SCRB2(NX,NY,NZ)
     .   ,SCRB3(NX,NY,NZ)
     .   ,GPP1(NX,NY,NZ),GPP2(NX,NY,NZ) 
     .   ,GPP3(NX,NY,NZ)
     .   ,DPP1(NX,NY,NZ),DPP2(NX,NY,NZ) 
     .   ,DPP3(NX,NY,NZ)
     .   ,RESP(NX,NY,NZ),GRAZ(NX,NY,NZ) 
     .   ,ALG1VS(NX,NY,NZ),ALG2VS(NX,NY,NZ) 
     .   ,ALG3VS(NX,NY,NZ)
      INTEGER
     .    ISTP20(NX,NY,NZ)
      REAL
     .    CHLAVEG(NX,NY,NZ),CHLMING(NX,NY,NZ)   
     .   ,CHLMAXG(NX,NY,NZ),STP20(NX,NY,NZ)
     .   ,CCHL1S(NX,NY,NZ),CCHL2S(NX,NY,NZ)
     .   ,CCHL3S(NX,NY,NZ)
     .   ,PO4SS(NX,NY,NZ),SISS(NX,NY,NZ)
     .   ,RNUTR1(NX,NY,NZ),RNUTR2(NX,NY,NZ)
     .   ,RNUTR3(NX,NY,NZ)
     .   ,RLGHT1(NX,NY,NZ),RLGHT2(NX,NY,NZ)
     .   ,RLGHT3(NX,NY,NZ)
     .   ,ATTENL(NX,NY,NZ),SKE(NX,NY,NZ),KEBASE(NX,NY)
     .   ,PNH41(NX,NY,NZ),PNH42(NX,NY,NZ)
     .   ,PNH43(NX,NY,NZ)
      REAL
     .    K1RBT(450),K1GRZCT(450),K2RBT(450),K2GRZCT(450)
     .   ,K3RBT(450),K3GRZCT(450)
      COMMON /EUTRO/ 
     .    PCRB1,PCRB2,PCRB3,NCRB1,NCRB2,NCRB3,SCRB1,SCRB2,SCRB3
     .   ,ISTP20,STP20,GPP1,GPP2,GPP3,DPP1,DPP2,DPP3,RESP,GRAZ
     .   ,ALG1VS,ALG2VS,ALG3VS,RNUTR1,RNUTR2,RNUTR3
     .   ,RLGHT1,RLGHT2,RLGHT3,ISURF,ATTENL,SKE,KEBASE
     .   ,CHLAVEG,CHLMING,CHLMAXG,CCHL1S,CCHL2S,CCHL3S
     .   ,PNH41,PNH42,PNH43,PO4SS,SISS,WIND ! SCQ
     .   ,K1RBT,K1GRZCT,K2RBT,K2GRZCT,K3RBT,K3GRZCT,KLWIND

      REAL
     .    CRBP1(3),CRBN1(3),CRBS1(3),CRBP2(3),CRBN2(3),CRBS2(3)
     .   ,CRBP3(3),CRBN3(3),CRBS3(3)
     .   ,TEMP1(NX,NY),TEMP2(NX,NY)

      EQUIVALENCE 
     .     (CRBP1(1),CRBP11) , (CRBP1(2),CRBP12) , (CRBP1(3),CRBP13)
     .   , (CRBN1(1),CRBN11) , (CRBN1(2),CRBN12) , (CRBN1(3),CRBN13)
     .   , (CRBS1(1),CRBS11) , (CRBS1(2),CRBS12) , (CRBS1(3),CRBS13)
     .   , (CRBP2(1),CRBP21) , (CRBP2(2),CRBP22) , (CRBP2(3),CRBP23)
     .   , (CRBN2(1),CRBN21) , (CRBN2(2),CRBN22) , (CRBN2(3),CRBN23)
     .   , (CRBS2(1),CRBS21) , (CRBS2(2),CRBS22) , (CRBS2(3),CRBS23)
     .   , (CRBP3(1),CRBP31) , (CRBP3(2),CRBP32) , (CRBP3(3),CRBP33)
     .   , (CRBN3(1),CRBN31) , (CRBN3(2),CRBN32) , (CRBN3(3),CRBN33)
     .   , (CRBS3(1),CRBS31) , (CRBS3(2),CRBS32) , (CRBS3(3),CRBS33)

      REAL
     .     K1C,K1T,K1BETA1,K1BETA2,IS1,ISAT1,KMN1,KMP1,KMS1
     .    ,K1RB,K1RG,K1RT,K1GRZC,K1GRZT
     .    ,K2C,K2T,K2BETA1,K2BETA2,IS2,ISAT2,KMN2,KMP2,KMS2
     .    ,K2RB,K2RG,K2RT,K2GRZC,K2GRZT
     .    ,K3C,K3T,K3BETA1,K3BETA2,IS3,ISAT3,KMN3,KMP3,KMS3
     .    ,K3RB,K3RG,K3RT,K3GRZC,K3GRZT
     .    ,KADPO4,KADSI,ISURF,ITOT,ITOTSF,KAOPT,KEOPT,KETVF,WIND,KLWIND
      EQUIVALENCE 
     .   (CONST(1),AGMOPT)  , (CONST(2),ACTALG)  , (CONST(3),KAOPT)   ,
     .   (CONST(4),KEOPT)   , (CONST(5),OPTION5) , (CONST(6),OPTION6)
      EQUIVALENCE 
     .   (CONST(9),TOPT1)   , (CONST(10),K1BETA1), (CONST(11),K1BETA2),
     .   (CONST(12),K1C)    , (CONST(13),K1T)    , (CONST(14),IS1)    ,
     .   (CONST(15),KMN1)   , (CONST(16),KMP1)   , (CONST(17),KMS1)   ,
     .   (CONST(18),K1RB)   , (CONST(19),K1RT)   , (CONST(20),K1RG)   ,
     .   (CONST(21),K1GRZC) , (CONST(22),K1GRZT) , (CONST(23),CCHL1)  ,
     .   (CONST(24),CRBP11) , (CONST(25),CRBP12) , (CONST(26),CRBP13) ,
     .   (CONST(27),CRBN11) , (CONST(28),CRBN12) , (CONST(29),CRBN13) ,
     .   (CONST(30),CRBS11) , (CONST(31),CRBS12) , (CONST(32),CRBS13) ,
     .   (CONST(33),XKC1)   , (CONST(34),VSBAS1) , (CONST(35),VSNTR1)
      EQUIVALENCE
     .   (CONST(41),TOPT2)  , (CONST(42),K2BETA1), (CONST(43),K2BETA2),
     .   (CONST(44),K2C)    , (CONST(45),K2T)    , (CONST(46),IS2)    ,
     .   (CONST(47),KMN2)   , (CONST(48),KMP2)   , (CONST(49),KMS2)   ,
     .   (CONST(50),K2RB)   , (CONST(51),K2RT)   , (CONST(52),K2RG)   ,
     .   (CONST(53),K2GRZC) , (CONST(54),K2GRZT) , (CONST(55),CCHL2)  ,
     .   (CONST(56),CRBP21) , (CONST(57),CRBP22) , (CONST(58),CRBP23) ,
     .   (CONST(59),CRBN21) , (CONST(60),CRBN22) , (CONST(61),CRBN23) ,
     .   (CONST(62),CRBS21) , (CONST(63),CRBS22) , (CONST(64),CRBS23) ,
     .   (CONST(65),XKC2)   , (CONST(66),VSBAS2) , (CONST(67),VSNTR2)
      EQUIVALENCE
     .   (CONST(73),TOPT3)  , (CONST(74),K3BETA1), (CONST(75),K3BETA2),
     .   (CONST(76),K3C)    , (CONST(77),K3T)    , (CONST(78),IS3)    ,
     .   (CONST(79),KMN3)   , (CONST(80),KMP3)   , (CONST(81),KMS3)   ,
     .   (CONST(82),K3RB)   , (CONST(83),K3RT)   , (CONST(84),K3RG)   ,
     .   (CONST(85),K3GRZC) , (CONST(86),K3GRZT) , (CONST(87),CCHL3)  ,
     .   (CONST(88),CRBP31) , (CONST(89),CRBP32) , (CONST(90),CRBP33) ,
     .   (CONST(91),CRBN31) , (CONST(92),CRBN32) , (CONST(93),CRBN33) ,
     .   (CONST(94),CRBS31) , (CONST(95),CRBS32) , (CONST(96),CRBS33) ,
     .   (CONST(97),XKC3)   , (CONST(98),VSBAS3) , (CONST(99),VSNTR3)
      EQUIVALENCE
     .   (CONST(156),FLOCEX), 
     .   (CONST(169),VSBAST), (CONST(177),KADPO4),(CONST(178),KADSI)

      REAL
     .    KEBS(NX,NY)
      EQUIVALENCE 
     .   (PARAM2D(1,1,6),KEBS(1,1))
      REAL
     .    SSLDS(NX,NY,NZ)
      EQUIVALENCE 
     .   (PARAM3D(1,1,1,1),SSLDS(1,1,1))

      REAL
     .   XEMPRC(NX,NY,NZ)    , SAL_DDA(NX,NY,NZ)   ,
     .   PHYT1_DDA(NX,NY,NZ) , PHYT2_DDA(NX,NY,NZ) ,
     .   PHYT3_DDA(NX,NY,NZ) ,
     .   SAL_DMIN(NX,NY,NZ)  , SAL_DMAX(NX,NY,NZ)  , 
     .   CHLA1_DDA(NX,NY,NZ) , CHLA2_DDA(NX,NY,NZ) ,
     .   CHLA3_DDA(NX,NY,NZ) ,
     .   CCHL1_DDA(NX,NY,NZ) , CCHL2_DDA(NX,NY,NZ) ,
     .   CCHL3_DDA(NX,NY,NZ)
      REAL    VARRAY(NX,NY,NZ,25)
      EQUIVALENCE    (SCRATCH_KIN(1,1,1,1),VARRAY(1,1,1,1))
      EQUIVALENCE
     . (VARRAY(1,1,1,1),XEMPRC(1,1,1)) ,(VARRAY(1,1,1,2),SAL_DDA(1,1,1))
     .,(VARRAY(1,1,1,3),PHYT1_DDA(1,1,1))
     .,(VARRAY(1,1,1,4),PHYT2_DDA(1,1,1))
     .,(VARRAY(1,1,1,5),PHYT3_DDA(1,1,1))
     .,(VARRAY(1,1,1,6),CHLA1_DDA(1,1,1))
     .,(VARRAY(1,1,1,7),CHLA2_DDA(1,1,1))
     .,(VARRAY(1,1,1,8),CHLA3_DDA(1,1,1))
     .,(VARRAY(1,1,1,9),CCHL1_DDA(1,1,1))
     .,(VARRAY(1,1,1,10),CCHL2_DDA(1,1,1))
     .,(VARRAY(1,1,1,11),CCHL3_DDA(1,1,1))
     .,(VARRAY(1,1,1,12),SAL_DMIN(1,1,1))
     .,(VARRAY(1,1,1,13),SAL_DMAX(1,1,1))

      REAL
     .    GPDP1_DDA(NX,NY,NZ)  , GPDP2_DDA(NX,NY,NZ)
     .   ,GPDP3_DDA(NX,NY,NZ)
     .   ,RNUTR1_DDA(NX,NY,NZ) , RNUTR2_DDA(NX,NY,NZ)
     .   ,RNUTR3_DDA(NX,NY,NZ)
!!============================================================
!! Yun Li, Test
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: TDIAG1, TDIAG2
     .   ,TDIAG3, TDIAG4, TDIAG5, TDIAG6
!!============================================================

      NPHYT = ACTALG+0.5

C        COMPUTE TERMS FOR VARIABLE NUTRIENT STOICHIOMETRY
       IF(CRBP12.GT.0) THEN
        IF(CRBP12.GT.CRBP11)  THEN
          CRBP12 = CRBP12-CRBP11
        ELSE
          WRITE(OUT,1001)  CRBP11,CRBP12
 1001     FORMAT(///10X,'ERROR...CRBP11 > CRBP12',F6.1,' > ',F6.1)
        ENDIF
       ENDIF
       IF(CRBN12.GT.0) THEN
        IF(CRBN12.GT.CRBN11)  THEN
         CRBN12 = CRBN12-CRBN11
        ELSE
          WRITE(OUT,1002)  CRBN11,CRBN12
 1002     FORMAT(///10X,'ERROR...CRBN11 > CRBN12',F6.2,' > ',F6.2)
        ENDIF
       ENDIF
       IF(CRBS12.GT.0) THEN
        IF(CRBS12.GT.CRBS11)  THEN
         CRBS12 = CRBS12-CRBS11
        ELSE
          WRITE(OUT,1003)  CRBS11,CRBS12
 1003     FORMAT(///10X,'ERROR...CRBS11 > CRBS12',F6.2,' > ',F6.2)
        ENDIF
       ENDIF
       IF(CRBP22.GT.0) THEN
        IF(CRBP22.GT.CRBP21)  THEN
         CRBP22 = CRBP22-CRBP21
        ELSE
          WRITE(OUT,1004)  CRBP21,CRBP22
 1004     FORMAT(///10X,'ERROR...CRBP11 > CRBP12',F6.1,' > ',F6.1)
        ENDIF
       ENDIF
       IF(CRBN22.GT.0) THEN
        IF(CRBN22.GT.CRBN21)  THEN
         CRBN22 = CRBN22-CRBN21
        ELSE
          WRITE(OUT,1005)  CRBN21,CRBN22
 1005     FORMAT(///10X,'ERROR...CRBN11 > CRBN12',F6.2,' > ',F6.2)
        ENDIF
       ENDIF
       IF(CRBS22.GT.0) THEN
        IF(CRBS22.GT.CRBS21)  THEN
         CRBS22 = CRBS22-CRBS21
        ELSE
          WRITE(OUT,1006)  CRBS21,CRBS22
 1006     FORMAT(///10X,'ERROR...CRBS11 > CRBS12',F6.2,' > ',F6.2)
        ENDIF
       ENDIF
       IF(CRBP32.GT.0) THEN
        IF(CRBP32.GT.CRBP31)  THEN
          CRBP32 = CRBP32-CRBP31
        ELSE
          WRITE(OUT,1007)  CRBP31,CRBP32
 1007     FORMAT(///10X,'ERROR...CRBP31 > CRBP32',F6.1,' > ',F6.1)
        ENDIF
       ENDIF
       IF(CRBN32.GT.0) THEN
        IF(CRBN32.GT.CRBN31)  THEN
         CRBN32 = CRBN32-CRBN31
        ELSE
          WRITE(OUT,1008)  CRBN31,CRBN32
 1008     FORMAT(///10X,'ERROR...CRBN31 > CRBN32',F6.2,' > ',F6.2)
        ENDIF
       ENDIF
       IF(CRBS32.GT.0) THEN
        IF(CRBS32.GT.CRBS31)  THEN
         CRBS32 = CRBS32-CRBS31
        ELSE
          WRITE(OUT,1009)  CRBS31,CRBS32
 1009     FORMAT(///10X,'ERROR...CRBS31 > CRBS32',F6.2,' > ',F6.2)
        ENDIF
       ENDIF

C        COMPUTE ALGAL NUTRIENT TO CARBON RATIOS
       DO 10 IZ=1,NZ
        DO 10 IY=1,NY
         DO 10 IX=1,NX
          PCRB1(IX,IY,IZ) = 1./CRBP11
          NCRB1(IX,IY,IZ) = 1./CRBN11
          SCRB1(IX,IY,IZ) = 1./CRBS11
          PCRB2(IX,IY,IZ) = 1./CRBP21
          NCRB2(IX,IY,IZ) = 1./CRBN21
          SCRB2(IX,IY,IZ) = 1./CRBS21
          PCRB3(IX,IY,IZ) = 1./CRBP31
          NCRB3(IX,IY,IZ) = 1./CRBN31
          SCRB3(IX,IY,IZ) = 1./CRBS31
   10  CONTINUE      
   
C        COMPUTE KLWIND FROM WIND SPEED

      WIND = BFUNC(3)  !VECTOR CONTAINING INTERCECT TIME FUNCTION
      KLWIND = 0.728*SQRT(WIND) - 0.317*WIND + 0.0372*WIND*WIND

C        SETUP TEMPERATURE-CORRECTED REACTION RATES IN TABLE-LOOKUP FORM
      DO 35 ITEMP=1,450
        TEMP = (FLOAT(ITEMP-1)/10.+0.05) - 20.
        K1RBT(ITEMP) = K1RB*K1RT**TEMP
        K1GRZCT(ITEMP) = K1GRZC*K1GRZT**TEMP
        K2RBT(ITEMP) = K2RB*K2RT**TEMP
        K2GRZCT(ITEMP) = K2GRZC*K2GRZT**TEMP
        K3RBT(ITEMP) = K3RB*K3RT**TEMP
        K3GRZCT(ITEMP) = K3GRZC*K3GRZT**TEMP
   35 CONTINUE
   
   
C INITIALIZE ARRAY FOR DETAILED DUMP AVERAGING, IF REQUIRED
      IF(IDDOPT.EQ.1)  THEN
        DO 40 IZ=1,NZ
          DO 40 IY=1,NY
            DO 40 IX=1,NX
              RNUTR1_DDA(IX,IY,IZ) = 0.
              RNUTR2_DDA(IX,IY,IZ) = 0.
              RNUTR3_DDA(IX,IY,IZ) = 0.
              GPDP1_DDA(IX,IY,IZ) = 0.
              GPDP2_DDA(IX,IY,IZ) = 0.
              GPDP3_DDA(IX,IY,IZ) = 0.
!---------------------------------------------------------------
! Yun Li, June-24-2011, as compared with Jeremy's version
C        LOAD CCHL#S WITH UNIFORM C:CHL RATIO FOR
C        COMPUTATION OF CHLA# MINS AND MAXS
              CCHL1S(IX,IY,IZ)=CCHL1
              CCHL2S(IX,IY,IZ)=CCHL2
              CCHL3S(IX,IY,IZ)=CCHL3
!---------------------------------------------------------------
   40   CONTINUE
      ENDIF

      RETURN

      ENTRY STD_EUTRO_MAIN

C        LIGHT SATURATION VALUES
      ISAT1 = IS1
      ISAT2 = IS2
      ISAT3 = IS3

      IF(NXCALL13T.LE.TIME)   THEN
        CALL RCA13(NXCALL13T)
      ENDIF
      ITOTSF = (TIME-NXFUNT(1))*MFUNC(1) + BFUNC(1)
      F = (TIME-NXFUNT(2))*MFUNC(2) + BFUNC(2)
      WIND = (TIME-NXFUNT(3))*MFUNC(3) + BFUNC(3)
      KETVF = (TIME-NXFUNT(4))*MFUNC(4) + BFUNC(4)
!!===================================================================
!! Yun Li, Test
!      WRITE(*,*) '     ITOTSF = ', ITOTSF
!      WRITE(*,*) '          F = ', F
!      WRITE(*,*) '       WIND = ', WIND
!      WRITE(*,*) '      KETVF = ', KETVF
!!===================================================================

      IF(IS1.EQ.0.)  ISAT1=ITOTSF
      IF(IS2.EQ.0.)  ISAT2=ITOTSF
      IF(IS3.EQ.0.)  ISAT3=ITOTSF
      TSUNRISE = 0.5-F/2.
      TSUNSET = 0.5+F/2.
      TDAY = MOD(TIME,1.0)
      IF(TDAY.LT.TSUNRISE .OR. TDAY.GT.TSUNSET)  THEN
        ISURF = 0.0
      ELSE
        ISURF = ITOTSF/F/0.635 * SIN(3.14159*(TDAY-TSUNRISE)/F)
      ENDIF

C        COMPUTE KLWIND FROM WIND SPEED

      KLWIND = 0.728*SQRT(WIND) - 0.317*WIND + 0.0372*WIND*WIND

C        UPDATE KEBASE AS APPROPRIATE
      IF(KEOPT.EQ.2.)  THEN
        DO IY=1,NY
         DO IX=1,NX
          IF(FSM(IX,IY).EQ.1.)  KEBASE(IX,IY) = KETVF
         ENDDO
        ENDDO
      ELSEIF(KEOPT.EQ.3.)  THEN
        DO IY=1,NY
         DO IX=1,NX
          IF(FSM(IX,IY).EQ.1.)  KEBASE(IX,IY) = KETVF*KEBS(IX,IY)
         ENDDO
        ENDDO
      ENDIF

C        COMPUTE ALGAL NUTRIENT TO CARBON RATIOS AND AVAILABLE NUTRIENTS

cc c$doacross local(iz,iy,ix,algalp,dfpo4,algaln,algals,dfsi)
      DO 75 IZ=1,NZ
       DO 75 IY=1,NY
        DO 75 IX=1,NX
          IF(FSM(IX,IY).NE.1.)  GO TO 75

C        PHOSPHORUS

          IF(CRBP12.NE.0. .OR. CRBP22.NE.0.)  THEN
            CALL STOICH(NPHYT,PO4T(IX,IY,IZ),KADPO4,SSLDS(IX,IY,IZ)
     .         ,PHYT1(IX,IY,IZ),PHYT2(IX,IY,IZ),0.0
     .         ,CRBP1,CRBP2,CRBP3,PCRB1(IX,IY,IZ)
     .         ,PCRB2(IX,IY,IZ),PCRB3(IX,IY,IZ))
         ENDIF

C        FRACTION OF PO4T BOUND IN ALGAL BIOMASS
          ALGALP = PCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .           + PCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)
	     
C        FRACTION OF DISSOLVED INORGANIC PHOSPHORUS
          DFPO4 = 1./(1.+KADPO4*SSLDS(IX,IY,IZ))

C        AVAILABLE INORGANIC PHOSPHORUS
          DPO4(IX,IY,IZ) = MAX(0.0,DFPO4*(PO4T(IX,IY,IZ)-ALGALP))

C        SORBED PHOSPHORUS
          PO4SS(IX,IY,IZ) = PO4T(IX,IY,IZ) - ALGALP - DPO4(IX,IY,IZ)

C        NITROGEN

          IF(CRBN12.NE.0. .OR. CRBN22.NE.0.)  THEN
           CALL STOICH(NPHYT,NH4T(IX,IY,IZ)+NO23(IX,IY,IZ),0.0
     .         ,SSLDS(IX,IY,IZ)
     .         ,PHYT1(IX,IY,IZ),PHYT2(IX,IY,IZ),0.0
     .         ,CRBN1,CRBN2,CRBN3,NCRB1(IX,IY,IZ)
     .         ,NCRB2(IX,IY,IZ),NCRB3(IX,IY,IZ))
          ENDIF

C        FRACTION OF NH4T BOUND IN ALGAL BIOMASS
          ALGALN = NCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .           + NCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)

C        AVAILABLE AMMONIA
          DNH4(IX,IY,IZ) = MAX(0.0,(NH4T(IX,IY,IZ) - ALGALN))
		  ! IF (DNH4(IX,IY,IZ) .GE. 10000.0) THEN
		      ! WRITE(*,*) 'STOP TOO LARGE', IX, IY, IZ, DNH4(IX,IY,IZ)
			  ! WRITE(*,*) 'STOP TOO LARGE', NH4T(IX,IY,IZ), ALGALN
		  ! ENDIF

C        SILICA

          IF(CRBS12.NE.0. .OR. CRBS22.NE.0.)  THEN
            CALL STOICH(NPHYT,SIT(IX,IY,IZ),KADSI,SSLDS(IX,IY,IZ)
     .         ,PHYT1(IX,IY,IZ),PHYT2(IX,IY,IZ),0.0
     .         ,CRBS1,CRBS2,CRBS3,SCRB1(IX,IY,IZ)
     .         ,SCRB2(IX,IY,IZ),SCRB3(IX,IY,IZ))
          ENDIF

C        FRACTION OF SIT BOUND IN ALGAL BIOMASS
          ALGALS = SCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .           + SCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)

C        COMPUTE FRACTION OF DISSOLVED AVAILABLE SILICA
          DFSI = 1./(1.+KADSI*SSLDS(IX,IY,IZ))

C        AVAILABLE SILICA
          DSI(IX,IY,IZ) = MAX(0.0,DFSI*(SIT(IX,IY,IZ)-ALGALS))

C        SORBED SILICA
          SISS(IX,IY,IZ) = SIT(IX,IY,IZ) - ALGALS - DSI(IX,IY,IZ)		  
		  
   75   CONTINUE
 
C        GET LIGHT ATTENUATION COEFFICIENTS

c$doacross local(iy,ix,iz,chla,chla1,chla2,chla3,itot)
c$& , share(chlaveg,chlming,chlmaxg)
      DO 105 IY=1,NY
       DO 105 IX=1,NX
        DO 104 IZ=1,NZ
C        COMPUTE TOTAL CHLOROPHYLL BASED ON
C        FIXED CARBON TO CHLOROPHYLL RATIO 
          CHLA1 = PHYT1(IX,IY,IZ)/CCHL1
          CHLA2 = PHYT2(IX,IY,IZ)/CCHL2
          CHLA3 = 0.0/CCHL3
          CHLA = CHLA1+CHLA2+CHLA3
          CHLAVEG(IX,IY,IZ) = CHLAVEG(IX,IY,IZ) + CHLA*1000.
          CHLMING(IX,IY,IZ) = AMIN1(CHLMING(IX,IY,IZ),CHLA*1000.)
          CHLMAXG(IX,IY,IZ) = AMAX1(CHLMAXG(IX,IY,IZ),CHLA*1000.)
        IF(FSM(IX,IY).LE.0.)  GO TO 104

C        INCLUDE SELF-SHADING EFFECT ON EXTINCTION COEFF
          SKE(IX,IY,IZ) = KEBASE(IX,IY)
     .        + 1000.*(XKC1*CHLA1+XKC2*CHLA2+XKC3*CHLA3)
 
C        LIGHT ATTENUATION
          IF(IZ.EQ.1)   THEN
             ITOT=ISURF
          ELSE
             ITOT=ATTENL(IX,IY,IZ-1)
          ENDIF

          ATTENL(IX,IY,IZ) = ITOT*EXP(-SKE(IX,IY,IZ)*HBAR(IX,IY)*DZ(IZ))

  104   CONTINUE
  105 CONTINUE

!!=======================================================================
!! Test, Yun Li,
      IF(IDISK.EQ.1 .OR. IDISK.EQ.3)  THEN
        WRITE(OUT,'(A,i5.5,A,f15.5,A,i5.5,A,A)'),
     .            ' WRITE: TOTAL diag     IREC = ',IREC,
     .            ' Time = ',time,
     .            ' NetCDF REC = ', ncIREC,
     .            ' in ', TRIM(ADJUSTL(DIAFILNA))
        status=nf90_open(TRIM(ADJUSTL(DIAFILNA)),nf90_write,ncID_dia)
        CALL nccheck_status(status,DIAFILNA,RCANA)
        CALL ncwrt_t1dvar(ncID_dia,ideutro_TIME ,TIME )
        CALL ncwrt_g3dvar(ncID_dia,iddia_ATTENL ,ATTENL)
        CALL ncwrt_g3dvar(ncID_dia,iddia_RESP1  ,SKE)		
        status=nf90_close(ncID_dia)
        CALL nccheck_status(status,DIAFILNA,RCANA)
      ENDIF
!      ALLOCATE(TDIAG1(NX,NY,NZ))
!      ALLOCATE(TDIAG2(NX,NY,NZ))
!      ALLOCATE(TDIAG3(NX,NY,NZ))
!      ALLOCATE(TDIAG4(NX,NY,NZ))
!      ALLOCATE(TDIAG5(NX,NY,NZ))
!      ALLOCATE(TDIAG6(NX,NY,NZ))
!!=======================================================================
 
C
C             SYSTEM 2 - PHYTOPLANKTON - WINTER DIATOMS
C

C        GROWTH...TEMPERATURE AND LIGHT

c$doacross local(iy,ix,iz,gitmax,itot,xemp1,xemp2,xemp3,temp1,temp2)
      DO 115 IZ=1,NZ
      DO 110 IY=1,NY
      DO 110 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 110

C        TEMPERATURE CORRECT GROWTH RATE
      IF(HYDTEMP(IX,IY,IZ).LE.TOPT1) 
     .      GITMAX = K1C*EXP(-K1BETA1*(HYDTEMP(IX,IY,IZ)-TOPT1)**2.)
      IF(HYDTEMP(IX,IY,IZ).GT.TOPT1) 
     .      GITMAX = K1C*EXP(-K1BETA2*(TOPT1-HYDTEMP(IX,IY,IZ))**2.) 
 
C        LIGHT ATTENUATION
      IF(IZ.EQ.1)   THEN
         ITOT=ISURF
      ELSE
         ITOT=ATTENL(IX,IY,IZ-1)
      ENDIF

C        COMPUTE GROWTH RATE REDUCTION DUE TO LIGHT CONDITIONS
      TEMP1(IX,IY) = SKE(IX,IY,IZ)*HBAR(IX,IY)*DZ(IZ)
      TEMP2(IX,IY) = ITOT/ISAT1

      RLGHT1(IX,IY,IZ) = 2.718*(EXP(-TEMP2(IX,IY)*EXP(-TEMP1(IX,IY)))
     .   - EXP(-TEMP2(IX,IY)))/TEMP1(IX,IY)

C        GROWTH...NUTRIENT EFFECTS

C        COMPUTE MICHAELIS TERMS
      XEMP1 = (DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))
     .       /(KMN1+DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))
      XEMP2 = DPO4(IX,IY,IZ)/(KMP1+DPO4(IX,IY,IZ))
      XEMP3 = DSI(IX,IY,IZ)/(KMS1+DSI(IX,IY,IZ))

C        COMPUTE GROWTH RATE REDUCTION DUE TO NUTRIENT LIMITATION 
C        USE 'MINIMUM' FORM RATHER THAN 'MULTIPLICATIVE' FORM 
      RNUTR1(IX,IY,IZ) = AMIN1(XEMP1,XEMP2,XEMP3)

C        EFFECT OF NUTRIENT LIMITATION ON SETTLING
      ALG1VS(IX,IY,IZ) = (VSBAS1 + VSNTR1*(1.-RNUTR1(IX,IY,IZ)))
     .   *VSBAST**STP20(IX,IY,IZ)

C        GROSS GROWTH RATE ... COMBINE FACTORS
      GPP1(IX,IY,IZ) = RNUTR1(IX,IY,IZ)*RLGHT1(IX,IY,IZ)
     .                             *GITMAX*PHYT1(IX,IY,IZ)
      
C        DEATH...RESPIRATION AND GRAZING

C        RESPIRATION
      RESP(IX,IY,IZ) = K1RG*GPP1(IX,IY,IZ) +
     .                 K1RBT(ISTP20(IX,IY,IZ))*PHYT1(IX,IY,IZ)

C        GRAZING
      GRAZ(IX,IY,IZ) = K1GRZCT(ISTP20(IX,IY,IZ))*PHYT1(IX,IY,IZ)

C        NET LOSS
      DPP1(IX,IY,IZ) = (RESP(IX,IY,IZ)+GRAZ(IX,IY,IZ))

C        FORMULATE DERIVATIVE ... NET GROWTH (GP-DP)
      CDPHYT1(IX,IY,IZ) = ((1.-FLOCEX)*GPP1(IX,IY,IZ)-DPP1(IX,IY,IZ))
      GPDP1_DDA(IX,IY,IZ) = GPDP1_DDA(IX,IY,IZ) +
     .                          +  CDPHYT1(IX,IY,IZ)/PHYT1(IX,IY,IZ)

!!=======================================================================
!! Test, Yun Li,
!      IF(FSM(IX,IY).NE.0.0) THEN
!        TDIAG1(IX,IY,IZ) = GITMAX 
!        TDIAG2(IX,IY,IZ) = RESP(IX,IY,IZ)
!        TDIAG3(IX,IY,IZ) = GRAZ(IX,IY,IZ)
!        TDIAG4(IX,IY,IZ) = XEMP1
!        TDIAG5(IX,IY,IZ) = XEMP2
!        TDIAG6(IX,IY,IZ) = XEMP3
!      ELSE
!        TDIAG1(IX,IY,IZ) = spval
!        TDIAG2(IX,IY,IZ) = spval
!        TDIAG3(IX,IY,IZ) = spval
!        TDIAG4(IX,IY,IZ) = spval
!        TDIAG5(IX,IY,IZ) = spval
!        TDIAG6(IX,IY,IZ) = spval
!      ENDIF
!!=======================================================================
	 	 
  110 CONTINUE

  115 CONTINUE
  	  
	  
!!=======================================================================
!! Test, Yun Li,
      IF(IDISK.EQ.1 .OR. IDISK.EQ.3)  THEN
        status=nf90_open(TRIM(ADJUSTL(DIAFILNA)),nf90_write,ncID_dia)
        CALL nccheck_status(status,DIAFILNA,RCANA)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_GPP1   ,GPP1  )
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_RNUTR1 ,RNUTR1)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_RLGHT1 ,RLGHT1)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_GITMAX1,TDIAG1)
        ! CALL ncwrt_g3dvar(ncID_dia,idPHYT1      ,PHYT1 )
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_RESP1  ,TDIAG2)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_GRAZ1  ,TDIAG3)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_XEMP11 ,TDIAG4)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_XEMP12 ,TDIAG5)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_XEMP13 ,TDIAG6)
        status=nf90_close(ncID_dia)
        CALL nccheck_status(status,DIAFILNA,RCANA)
      ENDIF
!!=======================================================================

C
C             SYSTEM 3 - PHYTOPLANKTON - SUMMER FLAGELLATES
C
 
c$doacross local(iz,iy,ix,gitmax,itot,xemp1,xemp2,xemp3,resp2,graz2
c$&             ,temp1,temp2,K2CX)
      DO 125 IZ=1,NZ
      DO 120 IY=1,NY
      DO 120 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 120

C        GROWTH...TEMPERATURE AND LIGHT

C        TEMPERATURE CORRECT GROWTH RATE
      IF(HYDTEMP(IX,IY,IZ).LE.TOPT2)
     .      GITMAX = K2C*EXP(-K2BETA1*(HYDTEMP(IX,IY,IZ)-TOPT2)**2.)
      IF(HYDTEMP(IX,IY,IZ).GT.TOPT2)
     .      GITMAX = K2C*EXP(-K2BETA2*(TOPT2-HYDTEMP(IX,IY,IZ))**2.) 

C        LIGHT ATTENUATION
      IF(IZ.EQ.1)   THEN
         ITOT=ISURF
      ELSE
         ITOT=ATTENL(IX,IY,IZ-1)
      ENDIF

C        COMPUTE GROWTH RATE REDUCTION DUE TO LIGHT CONDITIONS
      TEMP1(IX,IY) = SKE(IX,IY,IZ)*HBAR(IX,IY)*DZ(IZ)
      TEMP2(IX,IY) = ITOT/ISAT2
      RLGHT2(IX,IY,IZ) = 2.718*(EXP(-TEMP2(IX,IY)*EXP(-TEMP1(IX,IY)))
     .   - EXP(-TEMP2(IX,IY)))/TEMP1(IX,IY)

C        GROWTH...NUTRIENT EFFECTS

C        COMPUTE MICHAELIS TERMS
      XEMP1 = (DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))
     .              /(KMN2+DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))
      XEMP2 = DPO4(IX,IY,IZ)/(KMP2+DPO4(IX,IY,IZ)) 
      XEMP3 = DSI(IX,IY,IZ)/(KMS2+DSI(IX,IY,IZ))

C        COMPUTE GROWTH RATE REDUCTION DUE TO NUTRIENT LIMITATION 
C        USE 'MINIMUM' FORM RATHER THAN 'MULTIPLICATIVE' FORM 
      RNUTR2(IX,IY,IZ) = AMIN1(XEMP1,XEMP2,XEMP3)

C        EFFECT OF NUTRIENT LIMITATION ON SETTLING
      ALG2VS(IX,IY,IZ) = (VSBAS2 + VSNTR2*(1.-RNUTR2(IX,IY,IZ)))
     .   *VSBAST**STP20(IX,IY,IZ)

C        GROSS GROWTH RATE ... COMBINE FACTORS
      GPP2(IX,IY,IZ) = RNUTR2(IX,IY,IZ)*RLGHT2(IX,IY,IZ)
     .                             *GITMAX*PHYT2(IX,IY,IZ)


C        DEATH...RESPIRATION AND GRAZING

C        RESPIRATION
      RESP2 = K2RG*GPP2(IX,IY,IZ) +
     .        K2RBT(ISTP20(IX,IY,IZ))*PHYT2(IX,IY,IZ)
      RESP(IX,IY,IZ) = RESP(IX,IY,IZ) + RESP2

C        GRAZING
      GRAZ2 = K2GRZCT(ISTP20(IX,IY,IZ))*PHYT2(IX,IY,IZ) 
      GRAZ(IX,IY,IZ) = GRAZ(IX,IY,IZ) + GRAZ2

C        NET LOSS
      DPP2(IX,IY,IZ) = RESP2+GRAZ2

C        FORMULATE DERIVATIVE ... NET GROWTH (GP-DP)
      CDPHYT2(IX,IY,IZ) = ((1.-FLOCEX)*GPP2(IX,IY,IZ)-DPP2(IX,IY,IZ))
      GPDP2_DDA(IX,IY,IZ) = GPDP2_DDA(IX,IY,IZ) +
     .                          +  CDPHYT2(IX,IY,IZ)/PHYT2(IX,IY,IZ)

!!=======================================================================
!! Test, Yun Li,
!      IF(FSM(IX,IY).NE.0.0) THEN
!        TDIAG1(IX,IY,IZ) = GITMAX
!        TDIAG2(IX,IY,IZ) = RESP2
!        TDIAG3(IX,IY,IZ) = GRAZ2
!        TDIAG4(IX,IY,IZ) = XEMP1
!        TDIAG5(IX,IY,IZ) = XEMP2
!        TDIAG6(IX,IY,IZ) = XEMP3
!      ELSE
!        TDIAG1(IX,IY,IZ) = spval
!        TDIAG2(IX,IY,IZ) = spval
!        TDIAG3(IX,IY,IZ) = spval
!        TDIAG4(IX,IY,IZ) = spval
!        TDIAG5(IX,IY,IZ) = spval
!        TDIAG6(IX,IY,IZ) = spval
!      ENDIF
!!=======================================================================

  120 CONTINUE

  125 CONTINUE
!!=======================================================================
!! Test, Yun Li,
      IF(IDISK.EQ.1 .OR. IDISK.EQ.3)  THEN
        status=nf90_open(TRIM(ADJUSTL(DIAFILNA)),nf90_write,ncID_dia)
        CALL nccheck_status(status,DIAFILNA,RCANA)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_GPP2   ,GPP2  )
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_RNUTR2 ,RNUTR2)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_RLGHT2 ,RLGHT2)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_GITMAX2,TDIAG1)
        ! CALL ncwrt_g3dvar(ncID_dia,idPHYT2      ,PHYT2 )
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_RESP2  ,TDIAG2)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_GRAZ2  ,TDIAG3)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_XEMP21 ,TDIAG4)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_XEMP22 ,TDIAG5)
        ! CALL ncwrt_g3dvar(ncID_dia,iddia_XEMP23 ,TDIAG6)
        status=nf90_close(ncID_dia)
        CALL nccheck_status(status,DIAFILNA,RCANA)
      ENDIF

!      DEALLOCATE(TDIAG1)
!      DEALLOCATE(TDIAG2)
!      DEALLOCATE(TDIAG3)
!      DEALLOCATE(TDIAG4)
!      DEALLOCATE(TDIAG5)
!      DEALLOCATE(TDIAG6)
!!=======================================================================

C
C             SYSTEM 4 - PHYTOPLANKTON - FALL ASSEMBLAGE
C
 
c$doacross local(iz,iy,ix,gitmax,itot,xemp1,xemp2,xemp3,resp2,graz2
c$&             ,temp1,temp2,K2CX)
      DO 135 IZ=1,NZ
      DO 130 IY=1,NY
      DO 130 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 130

C        GROWTH...TEMPERATURE AND LIGHT

C        TEMPERATURE CORRECT GROWTH RATE
!      IF(HYDTEMP(IX,IY,IZ).LE.TOPT3)
!     .      GITMAX = K3C*EXP(-K3BETA1*(HYDTEMP(IX,IY,IZ)-TOPT3)**2.)
!      IF(HYDTEMP(IX,IY,IZ).GT.TOPT3)
!     .      GITMAX = K3C*EXP(-K3BETA2*(TOPT3-HYDTEMP(IX,IY,IZ))**2.) 

C        LIGHT ATTENUATION
      IF(IZ.EQ.1)   THEN
         ITOT=ISURF
      ELSE
         ITOT=ATTENL(IX,IY,IZ-1)
      ENDIF

C        COMPUTE GROWTH RATE REDUCTION DUE TO LIGHT CONDITIONS
!      TEMP1(IX,IY) = SKE(IX,IY,IZ)*HBAR(IX,IY)*DZ(IZ)
!      TEMP2(IX,IY) = ITOT/ISAT3
      RLGHT3(IX,IY,IZ) = 0.0

C        GROWTH...NUTRIENT EFFECTS

C        COMPUTE MICHAELIS TERMS
!      XEMP1 = (DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))
!     .              /(KMN3+DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))
!      XEMP2 = DPO4(IX,IY,IZ)/(KMP3+DPO4(IX,IY,IZ)) 
!      XEMP3 = DSI(IX,IY,IZ)/(KMS3+DSI(IX,IY,IZ))

C        COMPUTE GROWTH RATE REDUCTION DUE TO NUTRIENT LIMITATION 
C        USE 'MINIMUM' FORM RATHER THAN 'MULTIPLICATIVE' FORM 
      RNUTR3(IX,IY,IZ) = 0.0

C        EFFECT OF NUTRIENT LIMITATION ON SETTLING
      ALG3VS(IX,IY,IZ) = 0.0

C        GROSS GROWTH RATE ... COMBINE FACTORS
      GPP3(IX,IY,IZ) = 0.0

C        DEATH...RESPIRATION AND GRAZING
C        RESPIRATION
      RESP3 = 0.0
      RESP(IX,IY,IZ) = RESP(IX,IY,IZ) + RESP3

C        GRAZING
      GRAZ3 = 0.0
      GRAZ(IX,IY,IZ) = GRAZ(IX,IY,IZ) + GRAZ3

C        NET LOSS
      DPP3(IX,IY,IZ) = 0.0

C        FORMULATE DERIVATIVE ... NET GROWTH (GP-DP)
      CDPHYT3(IX,IY,IZ) = 0.0
      GPDP3_DDA(IX,IY,IZ) = GPDP3_DDA(IX,IY,IZ) +
     .                          +  CDPHYT3(IX,IY,IZ)/PHYT3(IX,IY,IZ)	 
	 
  130 CONTINUE

  135 CONTINUE

      IF(IDDOPT.EQ.1)  THEN
c$doacross local(iz,iy,ix) , share(rnutr1_dda,rnutr2_dda,rnutr3_dda)
        DO 140 IZ=1,NZ
         DO 140 IY=1,NY
          DO 140 IX=1,NX
          RNUTR1_DDA(IX,IY,IZ) = RNUTR1_DDA(IX,IY,IZ) + RNUTR1(IX,IY,IZ)
          RNUTR2_DDA(IX,IY,IZ) = RNUTR2_DDA(IX,IY,IZ) + RNUTR2(IX,IY,IZ)
          RNUTR3_DDA(IX,IY,IZ) = RNUTR3_DDA(IX,IY,IZ) + RNUTR3(IX,IY,IZ)
  140   CONTINUE
      ENDIF

      IF(IDISK.EQ.2 .OR. IDISK.EQ.3)  THEN
         DO 141 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         APPNET = ((GPP1(IX,IY,IZ)-DPP1(IX,IY,IZ)) 
     .          +  (GPP2(IX,IY,IZ)-DPP2(IX,IY,IZ))
     .          +  (GPP3(IX,IY,IZ)-DPP3(IX,IY,IZ)))/(HBAR(IX,IY)*DZ(IZ))
         IF(IDDOPT.EQ.0)  THEN
           CALL RCAWBUF(1,SAL(IX,IY,IZ),SKE(IX,IY,IZ),
     .        ALG1VS(IX,IY,IZ),ALG2VS(IX,IY,IZ),APPNET)
         ELSE
           CALL RCAWBUF(1,SAL_DDA(IX,IY,IZ)/IAVGDDCNTR,SKE(IX,IY,IZ),
     .        ALG1VS(IX,IY,IZ),ALG2VS(IX,IY,IZ),APPNET)
         ENDIF
  141    CONTINUE
         DO 142 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         GPDP=(GPP1(IX,IY,IZ)-DPP1(IX,IY,IZ))/MAX(PHYT1(IX,IY,IZ),1.E-9)
         IF(IDDOPT.EQ.0)  THEN
           CALL RCAWBUF(2,PHYT1(IX,IY,IZ),1000.*PHYT1(IX,IY,IZ)/CCHL1,
     .        RLGHT1(IX,IY,IZ),RNUTR1(IX,IY,IZ),GPDP)
         ELSE
           CALL RCAWBUF(2,PHYT1_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .        1000.*(PHYT1_DDA(IX,IY,IZ)/IAVGDDCNTR)/CCHL1,
     .        RLGHT1(IX,IY,IZ),RNUTR1_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .        GPDP1_DDA(IX,IY,IZ)/IAVGDDCNTR)
         ENDIF
  142    CONTINUE
         DO 143 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         GPDP=(GPP2(IX,IY,IZ)-DPP2(IX,IY,IZ))/MAX(PHYT2(IX,IY,IZ),1.E-9)
         IF(IDDOPT.EQ.0)  THEN
           CALL RCAWBUF(3,PHYT2(IX,IY,IZ),1000.*PHYT2(IX,IY,IZ)/CCHL2,
     .        RLGHT2(IX,IY,IZ),RNUTR2(IX,IY,IZ),GPDP)
         ELSE
           CALL RCAWBUF(3,PHYT2_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .        1000.*(PHYT2_DDA(IX,IY,IZ)/IAVGDDCNTR)/CCHL2,
     .        RLGHT2(IX,IY,IZ),RNUTR2_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .        GPDP2_DDA(IX,IY,IZ)/IAVGDDCNTR)
         ENDIF
  143    CONTINUE
         DO 145 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         GPDP=0.0*(GPP3(IX,IY,IZ)-DPP3(IX,IY,IZ))/MAX(0.0,1.E-9)
         IF(IDDOPT.EQ.0)  THEN
           CALL RCAWBUF(4,0.0,0.0*PHYT3(IX,IY,IZ)/CCHL3,
     .        RLGHT3(IX,IY,IZ),RNUTR3(IX,IY,IZ),GPDP)
         ELSE
           CALL RCAWBUF(4,0.0,
     .        0.0,
     .        RLGHT3(IX,IY,IZ),RNUTR3_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .        GPDP3_DDA(IX,IY,IZ)/IAVGDDCNTR)
         ENDIF
  145    CONTINUE
      ENDIF

      DO 150 IZ=1,NZ
       DO 150 IY=1,NY
        DO 150 IX=1,NX
         IF(FSM(IX,IY).EQ.1.)  THEN
C        COMPUTE AMMONIA PREFERENCE 
          PNH41(IX,IY,IZ) =
     .        DNH4(IX,IY,IZ)*NO23(IX,IY,IZ)
     .               /((KMN1+DNH4(IX,IY,IZ))*(KMN1+NO23(IX,IY,IZ)))
     .      + DNH4(IX,IY,IZ)*KMN1
     .        /((DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))*(KMN1+NO23(IX,IY,IZ))) 
          PNH42(IX,IY,IZ) =
     .        DNH4(IX,IY,IZ)*NO23(IX,IY,IZ)
     .               /((KMN2+DNH4(IX,IY,IZ))*(KMN2+NO23(IX,IY,IZ)))
     .      + DNH4(IX,IY,IZ)*KMN2
     .        /((DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))*(KMN2+NO23(IX,IY,IZ))) 
          PNH43(IX,IY,IZ) =
     .        DNH4(IX,IY,IZ)*NO23(IX,IY,IZ)
     .               /((KMN3+DNH4(IX,IY,IZ))*(KMN3+NO23(IX,IY,IZ)))
     .      + DNH4(IX,IY,IZ)*KMN3
     .        /((DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))*(KMN3+NO23(IX,IY,IZ))) 
         ENDIF
  150 CONTINUE
C INITIALIZE ARRAY FOR DETAILED DUMP AVERAGING, IF REQUIRED
      IF(IDISK.EQ.2 .OR. IDISK.EQ.3)  THEN
        IF(IDDOPT.EQ.1)  THEN
          DO 155 IZ=1,NZ
            DO 155 IY=1,NY
              DO 155 IX=1,NX
                RNUTR1_DDA(IX,IY,IZ) = 0.
                RNUTR2_DDA(IX,IY,IZ) = 0.
                RNUTR3_DDA(IX,IY,IZ) = 0.
                GPDP1_DDA(IX,IY,IZ) = 0.
                GPDP2_DDA(IX,IY,IZ) = 0.
                GPDP3_DDA(IX,IY,IZ) = 0.
  155     CONTINUE
        ENDIF
      ENDIF

      RETURN
      END

      SUBROUTINE INIT_LC_EUTRO
!
      USE netcdf
!
      SAVE

      INCLUDE 'RCACM'
      INCLUDE 'NetCDFCM'
C        STATE-VARIABLES
      REAL
     .      SAL(NX,NY,NZ)   , CDSAL(NX,NY,NZ)
     .    , PHYT1(NX,NY,NZ) , CDPHYT1(NX,NY,NZ)
     .    , PHYT2(NX,NY,NZ) , CDPHYT2(NX,NY,NZ)
     .    , PHYT3(NX,NY,NZ) , CDPHYT3(NX,NY,NZ)
     .    , PO4T(NX,NY,NZ)  , CDPO4T(NX,NY,NZ)
     .    , NH4T(NX,NY,NZ)  , CDNH4T(NX,NY,NZ)
     .    , NO23(NX,NY,NZ)  , CDNO23(NX,NY,NZ)
     .    , SIT(NX,NY,NZ)   , CDSIT(NX,NY,NZ)
      EQUIVALENCE
     .  (CARAY(1,1,1,1),SAL(1,1,1))   ,(CDARAY(1,1,1,1),CDSAL(1,1,1))
     . ,(CARAY(1,1,1,2),PHYT1(1,1,1)) ,(CDARAY(1,1,1,2),CDPHYT1(1,1,1))
     . ,(CARAY(1,1,1,3),PHYT2(1,1,1)) ,(CDARAY(1,1,1,3),CDPHYT2(1,1,1))
     . ,(CARAY(1,1,1,4),PHYT3(1,1,1)) ,(CDARAY(1,1,1,4),CDPHYT3(1,1,1))
     . ,(CARAY(1,1,1,9),PO4T(1,1,1))  ,(CDARAY(1,1,1,9),CDPO4T(1,1,1))
     . ,(CARAY(1,1,1,14),NH4T(1,1,1)) ,(CDARAY(1,1,1,14),CDNH4T(1,1,1))
     . ,(CARAY(1,1,1,15),NO23(1,1,1)) ,(CDARAY(1,1,1,15),CDNO23(1,1,1))
     . ,(CARAY(1,1,1,17),SIT(1,1,1))  ,(CDARAY(1,1,1,17),CDSIT(1,1,1))

C        LINKAGE FOR EUTROPHICATION ALGAL GROWTH ROUTINES
      REAL
     .    DPO4(NX,NY,NZ),DNH4(NX,NY,NZ),DSI(NX,NY,NZ)
      EQUIVALENCE
     .    (CKINARRAY(1,1,1,1),DPO4(1,1,1))
     .   ,(CKINARRAY(1,1,1,2),DNH4(1,1,1))
     .   ,(CKINARRAY(1,1,1,3),DSI(1,1,1))

C        LABELED COMMON FOR EUTROPHICATION ALGAL GROWTH ROUTINES
C                       AND LINKAGE TO SEDIMENT FLUX SUBMODEL
      REAL
     .    PCRB1(NX,NY,NZ),PCRB2(NX,NY,NZ)
     .   ,PCRB3(NX,NY,NZ)
     .   ,NCRB1(NX,NY,NZ),NCRB2(NX,NY,NZ)
     .   ,NCRB3(NX,NY,NZ)
     .   ,SCRB1(NX,NY,NZ),SCRB2(NX,NY,NZ)
     .   ,SCRB3(NX,NY,NZ)
     .   ,GPP1(NX,NY,NZ),GPP2(NX,NY,NZ) 
     .   ,GPP3(NX,NY,NZ)
     .   ,DPP1(NX,NY,NZ),DPP2(NX,NY,NZ) 
     .   ,DPP3(NX,NY,NZ)
     .   ,RESP(NX,NY,NZ),GRAZ(NX,NY,NZ) 
     .   ,ALG1VS(NX,NY,NZ),ALG2VS(NX,NY,NZ) 
     .   ,ALG3VS(NX,NY,NZ)
      INTEGER
     .    ISTP20(NX,NY,NZ)
      REAL
     .    CHLAVEG(NX,NY,NZ),CHLMING(NX,NY,NZ)   
     .   ,CHLMAXG(NX,NY,NZ),STP20(NX,NY,NZ)
     .   ,CCHL1S(NX,NY,NZ),CCHL2S(NX,NY,NZ)
     .   ,CCHL3S(NX,NY,NZ)
     .   ,PO4SS(NX,NY,NZ),SISS(NX,NY,NZ)
     .   ,RNUTR1(NX,NY,NZ),RNUTR2(NX,NY,NZ)
     .   ,RNUTR3(NX,NY,NZ)
     .   ,RLGHT1(NX,NY,NZ),RLGHT2(NX,NY,NZ)
     .   ,RLGHT3(NX,NY,NZ)
      REAL
     .    ATTENL(NX,NY,NZ),SKE(NX,NY,NZ),KEBASE(NX,NY)
     .   ,PNH41(NX,NY,NZ),PNH42(NX,NY,NZ)
     .   ,PNH43(NX,NY,NZ)
      REAL
     .    K1RBT(450),K1GRZCT(450),K2RBT(450),K2GRZCT(450)
     .   ,K3RBT(450),K3GRZCT(450)
      COMMON /EUTRO/ 
     .    PCRB1,PCRB2,PCRB3,NCRB1,NCRB2,NCRB3,SCRB1,SCRB2,SCRB3
     .   ,ISTP20,STP20,GPP1,GPP2,GPP3,DPP1,DPP2,DPP3,RESP,GRAZ
     .   ,ALG1VS,ALG2VS,ALG3VS,RNUTR1,RNUTR2,RNUTR3
     .   ,RLGHT1,RLGHT2,RLGHT3,ISURF,ATTENL,SKE,KEBASE
     .   ,CHLAVEG,CHLMING,CHLMAXG,CCHL1S,CCHL2S,CCHL3S
     .   ,PNH41,PNH42,PNH43,PO4SS,SISS,WIND !SCQ
     .   ,K1RBT,K1GRZCT,K2RBT,K2GRZCT,K3RBT,K3GRZCT,KLWIND
!!============================================================
!! Yun Li, Test
     .   ,ITOTSF
      REAL, ALLOCATABLE, DIMENSION(:,:,:) :: TDIAG1, TDIAG2
     .   ,TDIAG3, TDIAG4, TDIAG5, TDIAG6, TDIAG7, TDIAG8
     .   ,TDIAG9
!!============================================================

      REAL
     .     K1CNSAT,K1C,K1BETA1,K1BETA2,IS1,ISAT1,KMN1,KMP1,KMS1
     .    ,K1RB,K1RG,K1RT,K1GRZC,K1GRZT,K1TEQ,NCRB1EQ
     .    ,K2CNSAT,K2C,K2BETA1,K2BETA2,IS2,ISAT2,KMN2,KMP2,KMS2
     .    ,K2RB,K2RG,K2RT,K2GRZC,K2GRZT,K2TEQ,NCRB2EQ
     .    ,K3CNSAT,K3C,K3BETA1,K3BETA2,IS3,ISAT3,KMN3,KMP3,KMS3
     .    ,K3RB,K3RG,K3RT,K3GRZC,K3GRZT,K3TEQ,NCRB3EQ
     .    ,LYMOLQ,ISAT,ISURF,ITOTSF,ITOTSF1,KAOPT,KEOPT,KETVF
     .    ,ITOT,ITOTN1,ITOTN2,ITOTN3,KADPO4,KADSI,KLWIND,WIND
      EQUIVALENCE 
     .   (CONST(1),AGMOPT)  , (CONST(2),ACTALG)  , (CONST(3),KAOPT)   ,
     .   (CONST(4),KEOPT)   , (CONST(5),OPTION5) , (CONST(6),OPTION6)
      EQUIVALENCE 
     .   (CONST(9),TOPT1)   , (CONST(10),K1BETA1), (CONST(11),K1BETA2),
     .   (CONST(12),GPRE1)  , (CONST(13),GPR01)  , (CONST(14),IS1)    ,
     .   (CONST(15),KMN1)   , (CONST(16),KMP1)   , (CONST(17),KMS1)   ,
     .   (CONST(18),K1RB)   , (CONST(19),K1RT)   , (CONST(20),K1RG)   ,
     .   (CONST(21),K1GRZC) , (CONST(22),K1GRZT) , (CONST(23),FSC1)   ,
     .   (CONST(24),WCCHL1) , (CONST(25),WCP1)   , (CONST(26),WCN1)   ,
     .   (CONST(27),WCS1)   , (CONST(28),QF1)    , (CONST(29),XKC1)   ,
     .   (CONST(30),VSBAS1) , (CONST(31),VSNTR1)
      EQUIVALENCE
     .   (CONST(41),TOPT2)  , (CONST(42),K2BETA1), (CONST(43),K2BETA2),
     .   (CONST(44),GPRE2)  , (CONST(45),GPR02)  , (CONST(46),IS2)    ,
     .   (CONST(47),KMN2)   , (CONST(48),KMP2)   , (CONST(49),KMS2)   ,
     .   (CONST(50),K2RB)   , (CONST(51),K2RT)   , (CONST(52),K2RG)   ,
     .   (CONST(53),K2GRZC) , (CONST(54),K2GRZT) , (CONST(55),FSC2)   ,
     .   (CONST(56),WCCHL2) , (CONST(57),WCP2)   , (CONST(58),WCN2)   ,
     .   (CONST(59),WCS2)   , (CONST(60),QF2)    , (CONST(61),XKC2)   ,
     .   (CONST(62),VSBAS2) , (CONST(63),VSNTR2)
      EQUIVALENCE
     .   (CONST(73),TOPT3)  , (CONST(74),K3BETA1), (CONST(75),K3BETA2),
     .   (CONST(76),GPRE3)  , (CONST(77),GPR03)  , (CONST(78),IS3)    ,
     .   (CONST(79),KMN3)   , (CONST(80),KMP3)   , (CONST(81),KMS3)   ,
     .   (CONST(82),K3RB)   , (CONST(83),K3RT)   , (CONST(84),K3RG)   ,
     .   (CONST(85),K3GRZC) , (CONST(86),K3GRZT) , (CONST(87),FSC3)   ,
     .   (CONST(88),WCCHL3) , (CONST(89),WCP3)   , (CONST(90),WCN3)   ,
     .   (CONST(91),WCS3)   , (CONST(92),QF3)    , (CONST(93),XKC3)   ,
     .   (CONST(94),VSBAS3) , (CONST(95),VSNTR3)
      EQUIVALENCE
     .   (CONST(156),FLOCEX),
     .   (CONST(169),VSBAST), (CONST(177),KADPO4), (CONST(178),KADSI)

      REAL
     .    KEBS(NX,NY)
      EQUIVALENCE 
     .   (PARAM2D(1,1,6),KEBS(1,1))
      REAL
     .    SSLDS(NX,NY,NZ)
      EQUIVALENCE 
     .   (PARAM3D(1,1,1,1),SSLDS(1,1,1))

      REAL
     .    GPDP1_DDA(NX,NY,NZ)  , GPDP2_DDA(NX,NY,NZ)
     .   ,GPDP3_DDA(NX,NY,NZ)
     .   ,RNUTR1_DDA(NX,NY,NZ) , RNUTR2_DDA(NX,NY,NZ)
     .   ,RNUTR3_DDA(NX,NY,NZ)

      REAL
     .   XEMPRC(NX,NY,NZ)    , SAL_DDA(NX,NY,NZ)  ,
     .   PHYT1_DDA(NX,NY,NZ) , PHYT2_DDA(NX,NY,NZ),
     .   PHYT3_DDA(NX,NY,NZ) ,
     .   SAL_DMIN(NX,NY,NZ)  , SAL_DMAX(NX,NY,NZ) ,
     .   CHLA1_DDA(NX,NY,NZ) , CHLA2_DDA(NX,NY,NZ),
     .   CHLA3_DDA(NX,NY,NZ) ,
     .   CCHL1_DDA(NX,NY,NZ) , CCHL2_DDA(NX,NY,NZ),
     .   CCHL3_DDA(NX,NY,NZ)
      REAL    VARRAY(NX,NY,NZ,25)
      EQUIVALENCE    (SCRATCH_KIN(1,1,1,1),VARRAY(1,1,1,1))
      EQUIVALENCE
     . (VARRAY(1,1,1,1),XEMPRC(1,1,1)) ,(VARRAY(1,1,1,2),SAL_DDA(1,1,1))
     .,(VARRAY(1,1,1,3),PHYT1_DDA(1,1,1))
     .,(VARRAY(1,1,1,4),PHYT2_DDA(1,1,1))
     .,(VARRAY(1,1,1,5),PHYT3_DDA(1,1,1))
     .,(VARRAY(1,1,1,6),CHLA1_DDA(1,1,1))
     .,(VARRAY(1,1,1,7),CHLA2_DDA(1,1,1))
     .,(VARRAY(1,1,1,8),CHLA3_DDA(1,1,1))
     .,(VARRAY(1,1,1,9),CCHL1_DDA(1,1,1))
     .,(VARRAY(1,1,1,10),CCHL2_DDA(1,1,1))
     .,(VARRAY(1,1,1,11),CCHL3_DDA(1,1,1))
     .,(VARRAY(1,1,1,12),SAL_DMIN(1,1,1))
     .,(VARRAY(1,1,1,13),SAL_DMAX(1,1,1))

      NPHYT = ACTALG+0.5

C        SET INITIAL ALGAL NUTRIENT TO CARBON RATIOS
       DO 10 IZ=1,NZ
        DO 10 IY=1,NY
         DO 10 IX=1,NX
          CCHL1S(IX,IY,IZ) = WCCHL1
          PCRB1(IX,IY,IZ) = 1./WCP1
          NCRB1(IX,IY,IZ) = 1./WCN1
          SCRB1(IX,IY,IZ) = 1./WCS1
          CCHL2S(IX,IY,IZ) = WCCHL2
          PCRB2(IX,IY,IZ) = 1./WCP2
          NCRB2(IX,IY,IZ) = 1./WCN2
          SCRB2(IX,IY,IZ) = 1./WCS2
          CCHL3S(IX,IY,IZ) = WCCHL3
          PCRB3(IX,IY,IZ) = 1./WCP3
          NCRB3(IX,IY,IZ) = 1./WCN3
          SCRB3(IX,IY,IZ) = 1./WCS3
   10  CONTINUE
   
C        OXYGEN TO CARBON RATIO (2*16/12)
      OCRB = 2.6667*1.1


C        CONVERT LIGHT SATURATION VALUES TO MOL QUANTA/M2 UNITS
      LYMOLQ = 1./5.2
      ISAT1 = IS1*LYMOLQ
      ISAT2 = IS2*LYMOLQ
      ISAT3 = IS3*LYMOLQ

      ITOTN3 = BFUNC(1)*LYMOLQ
      ITOTN2 = BFUNC(1)*LYMOLQ
      ITOTN1 = BFUNC(1)*LYMOLQ
      DAYTIME = 0.0

      K1TEQ =  1.0
      K2TEQ =  1.0
      K3TEQ =  1.0

      ITOTSF = BFUNC(1)*LYMOLQ
      F = BFUNC(2)
      WIND = BFUNC(3)

C        COMPUTE KLWIND FROM WIND SPEED

      KLWIND = 0.728*SQRT(WIND) - 0.317*WIND + 0.0372*WIND*WIND

C        SETUP TEMPERATURE-CORRECTED REACTION RATES IN TABLE-LOOKUP FORM
      DO 25 ITEMP=1,450
        TEMP = (FLOAT(ITEMP-1)/10.+0.05) - 20.
        K1GRZCT(ITEMP) = K1GRZC*K1GRZT**TEMP
        K2GRZCT(ITEMP) = K2GRZC*K2GRZT**TEMP
        K3GRZCT(ITEMP) = K3GRZC*K3GRZT**TEMP
   25 CONTINUE

C INITIALIZE ARRAY FOR DETAILED DUMP AVERAGING, IF REQUIRED
      IF(IDDOPT.EQ.1)  THEN
        DO 40 IZ=1,NZ
          DO 40 IY=1,NY
            DO 40 IX=1,NX
              RNUTR1_DDA(IX,IY,IZ) = 0.
              RNUTR2_DDA(IX,IY,IZ) = 0.
              RNUTR3_DDA(IX,IY,IZ) = 0.
              GPDP1_DDA(IX,IY,IZ) = 0.
              GPDP2_DDA(IX,IY,IZ) = 0.
              GPDP3_DDA(IX,IY,IZ) = 0.
   40   CONTINUE
      ENDIF


      RETURN

      ENTRY  LC_EUTRO_MAIN

C        IF NECESSARY UPDATE EXOGENOUS VARIABLES (SUNLIGHT,
C           FRACTION DAYLIGHT, ETC.)
      IF(NXCALL13T.LE.TIME)   THEN
        CALL RCA13(NXCALL13T)
      ENDIF
      ITOTSF = ((TIME-NXFUNT(1))*MFUNC(1) + BFUNC(1))*LYMOLQ
      F = (TIME-NXFUNT(2))*MFUNC(2) + BFUNC(2)
      WIND = (TIME-NXFUNT(3))*MFUNC(3) + BFUNC(3)
      KETVF = (TIME-NXFUNT(4))*MFUNC(4) + BFUNC(4)

C        COMPUTE KLWIND FROM WIND SPEED

      KLWIND = 0.728*SQRT(WIND) - 0.317*WIND + 0.0372*WIND*WIND

C        UPDATE KEBASE AS APPROPRIATE
      IF(KEOPT.EQ.2.)  THEN
        DO IY=1,NY
         DO IX=1,NX
          IF(FSM(IX,IY).EQ.1.)  KEBASE(IX,IY) = KETVF
         ENDDO
        ENDDO
      ELSEIF(KEOPT.EQ.3.)  THEN
        DO IY=1,NY
         DO IX=1,NX
          IF(FSM(IX,IY).EQ.1.)  KEBASE(IX,IY) = KETVF*KEBS(IX,IY)
         ENDDO
        ENDDO
      ENDIF

C        ADJUSTABLE LIGHT SATURATION = AVERAGE OF THREE PREVIOUS DAYS
C        TOTAL SOLAR RADIATION (CONVERT TO MOL QUANTA/M2 UNITS)
!!===================================================================
!! Yun Li, Test
!      WRITE(*,*) '======== eutro.f Ln(4807) ======= '
!      WRITE(*,*) '     ITOTSF = ', ITOTSF
!      WRITE(*,*) '          F = ', F
!      WRITE(*,*) '       WIND = ', WIND
!      WRITE(*,*) '      KETVF = ', KETVF
      ISAT = (0.1*ITOTN3 + 0.2*ITOTN2 + 0.7*ITOTN1)
!!===================================================================

!! Yun      ISAT = (0.1*ITOTN3 + 0.2*ITOTN2 + 0.7*ITOTN1)/3.
      IF(IS1.EQ.0.)  ISAT1=ISAT
      IF(IS2.EQ.0.)  ISAT2=ISAT
      IF(IS3.EQ.0.)  ISAT3=ISAT
      TSUNRISE = 0.5-F/2.
      TSUNSET = 0.5+F/2.
      TDAY = MOD(TIME,1.0)
      IF(TDAY.LT.TSUNRISE .OR. TDAY.GT.TSUNSET)  THEN
        ISURF = 0.0
      ELSE
        ISURF = (ITOTSF/F/0.635 * SIN(3.14159*(TDAY-TSUNRISE)/F))
      ENDIF

      IF(DTWQ.EQ.0.0)  THEN
        DAYTIME = DAYTIME + DT
      ELSE
        DAYTIME = DAYTIME + DTWQ
      ENDIF
      IF(DAYTIME.GE.1.0)  THEN
        ITOTN3 = ITOTN2
        ITOTN2 = ITOTN1
        ITOTN1 = ITOTSF1
        DAYTIME = DAYTIME -1.0
      ENDIF
      ITOTSF1 = ITOTSF

C        COMPUTE ALGAL NUTRIENT TO CARBON RATIOS AND AVAILABLE NUTRIENTS
cc c$doacross local(iz,iy,ix,algalp,dfpo4,algaln,algals,dfsi)
      DO 75 IZ=1,NZ
       DO 75 IY=1,NY
        DO 75 IX=1,NX
          IF(FSM(IX,IY).NE.1.)  GO TO 75

C        PHOSPHORUS

C        FRACTION OF PO4T BOUND IN ALGAL BIOMASS
          ALGALP = PCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .           + PCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)

C        FRACTION OF DISSOLVED INORGANIC PHOSPHORUS
          DFPO4 = 1./(1.+KADPO4*SSLDS(IX,IY,IZ))

C        AVAILABLE INORGANIC PHOSPHORUS
          DPO4(IX,IY,IZ) = MAX(0.0,DFPO4*(PO4T(IX,IY,IZ)-ALGALP))

C        SORBED PHOSPHORUS
          PO4SS(IX,IY,IZ) = PO4T(IX,IY,IZ) - ALGALP - DPO4(IX,IY,IZ)

C        NITROGEN

C        FRACTION OF NH4T BOUND IN ALGAL BIOMASS
          ALGALN = NCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .           + NCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)

C        AVAILABLE AMMONIA
          DNH4(IX,IY,IZ) = MAX(0.0,(NH4T(IX,IY,IZ) - ALGALN))
		  ! IF (DNH4(IX,IY,20) .GE. 10000.0) THEN
		      ! WRITE(*,*) 'STOP TOO LARGE', IX, IY, DNH4(IX,IY,20)
		  ! ENDIF

C        SILICA

C        FRACTION OF SIT BOUND IN ALGAL BIOMASS
          ALGALS = SCRB1(IX,IY,IZ)*PHYT1(IX,IY,IZ)
     .           + SCRB2(IX,IY,IZ)*PHYT2(IX,IY,IZ)

C        COMPUTE FRACTION OF DISSOLVED AVAILABLE SILICA
          DFSI = 1./(1.+KADSI*SSLDS(IX,IY,IZ))

C        AVAILABLE SILICA
          DSI(IX,IY,IZ) = MAX(0.0,DFSI*(SIT(IX,IY,IZ)-ALGALS))

C        SORBED SILICA
          SISS(IX,IY,IZ) = SIT(IX,IY,IZ) - ALGALS - DSI(IX,IY,IZ)

   75   CONTINUE
 
C        GET LIGHT ATTENUATION COEFFICIENTS

c$doacross local(iy,ix,iz,chla,chla1,chla2,chla3,itot)
c$& , share(chlaveg,chlming,chlmaxg)
      DO 105 IY=1,NY
       DO 105 IX=1,NX
        IF(FSM(IX,IY).LE.0.)  GO TO 105
        DO 104 IZ=1,NZ

C        COMPUTE TOTAL CHLOROPHYLL BASED ON
C        FIXED CARBON TO CHLOROPHYLL RATIO 
          CHLA1 = PHYT1(IX,IY,IZ)/CCHL1S(IX,IY,IZ)
          CHLA2 = PHYT2(IX,IY,IZ)/CCHL2S(IX,IY,IZ)
          CHLA3 = 0.0/CCHL3S(IX,IY,IZ)
          CHLA=1000.*(CHLA1+CHLA2+CHLA3)
          CHLAVEG(IX,IY,IZ) = CHLAVEG(IX,IY,IZ) + CHLA
          CHLMING(IX,IY,IZ) = AMIN1(CHLMING(IX,IY,IZ),CHLA)
          CHLMAXG(IX,IY,IZ) = AMAX1(CHLMAXG(IX,IY,IZ),CHLA)
   
C        INCLUDE SELF-SHADING EFFECT ON EXTINCTION COEFF
          SKE(IX,IY,IZ) = KEBASE(IX,IY) + 1000.*
     .         (XKC1*CHLA1+XKC2*CHLA2+XKC3*CHLA3)

C        LIGHT ATTENUATION
          IF(IZ.EQ.1)   THEN
             ITOT=ISURF
          ELSE
             ITOT=ATTENL(IX,IY,IZ-1)
          ENDIF

          ATTENL(IX,IY,IZ) = ITOT*EXP(-SKE(IX,IY,IZ)*HBAR(IX,IY)*DZ(IZ))

  104   CONTINUE
  105 CONTINUE

!!=======================================================================
!! Test, Yun Li,
!      ALLOCATE(TDIAG1(NX,NY,NZ))
!      ALLOCATE(TDIAG2(NX,NY,NZ))
!      ALLOCATE(TDIAG3(NX,NY,NZ))
!      ALLOCATE(TDIAG4(NX,NY,NZ))
!      ALLOCATE(TDIAG5(NX,NY,NZ))
!      ALLOCATE(TDIAG6(NX,NY,NZ))
!      ALLOCATE(TDIAG7(NX,NY,NZ))
!      ALLOCATE(TDIAG8(NX,NY,NZ))
!      ALLOCATE(TDIAG9(NX,NY,NZ))
!!=======================================================================

C
C             SYSTEM 2 - PHYTOPLANKTON - WINTER DIATOMS
C

C        GROWTH...NUTRIENTS AND LIGHT

c$doacross local(iy,ix,iz,gitmax,itot,temp1,davei,xemp1,xemp2,xemp3)
c$& ,local(k1cnsat,k1c,algvsn)
c$& ,local(cchl1eq,pcrb1eq,ncrb1eq,scrb1eq,respr) , share(gpdp1_dda)
      DO 115 IZ=1,NZ
      DO 110 IY=1,NY
      DO 110 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 110

C        COMPUTE MICHAELIS TERMS
      XEMP1 = (DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))
     .       /(KMN1+DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))

      XEMP2 = DPO4(IX,IY,IZ)/(KMP1+DPO4(IX,IY,IZ))

      XEMP3 = DSI(IX,IY,IZ)/(KMS1+DSI(IX,IY,IZ))

C        COMPUTE GROWTH RATE REDUCTION DUE TO NUTRIENT LIMITATION 
C        USE 'MINIMUM' FORM RATHER THAN 'MULTIPLICATIVE' FORM 
      RNUTR1(IX,IY,IZ) = AMIN1(XEMP1,XEMP2,XEMP3)

C        EFFECT OF NUTRIENT LIMITATION ON SETTLING
      ALG1VS(IX,IY,IZ) = (VSBAS1 + VSNTR1*(1.-RNUTR1(IX,IY,IZ)))
     .   *VSBAST**STP20(IX,IY,IZ)
C        DEPTH AVERAGED LIGHT
      IF(IZ.EQ.1)   THEN
         ITOT=ISURF
      ELSE
         ITOT=ATTENL(IX,IY,IZ-1)
      ENDIF
      TEMP1 = SKE(IX,IY,IZ)*HBAR(IX,IY)*DZ(IZ)
      DAVEI = ITOT*(1.-EXP(-TEMP1))/TEMP1

C        COMPUTE NET NUTRIENT SATUATED GROWTH RATE AT AMBIENT LIGHT CONDITIONS
      K1CNSAT = ((GPRE1*(1.-K1RG)*(1.-FSC1)*DAVEI) / (GPRE1/GPR01 +
     .  DAVEI*(1.+GPRE1/ISAT1/GPR01)))

C        TEMPERATURE CORRECT GROWTH RATE
      IF(HYDTEMP(IX,IY,IZ).LE.TOPT1) 
     .     K1CNSAT = K1CNSAT*EXP(-K1BETA1*(HYDTEMP(IX,IY,IZ)-TOPT1)**2.)
      IF(HYDTEMP(IX,IY,IZ).GT.TOPT1) 
     .     K1CNSAT = K1CNSAT*EXP(-K1BETA2*(TOPT1-HYDTEMP(IX,IY,IZ))**2.)
 
C        CORRECT GROWTH RATE FOR BASAL RESPIRATION
      K1CNSAT = K1CNSAT - K1RB

C        COMPUTE NUTRIENT LIMITED RATE
      K1C = RNUTR1(IX,IY,IZ) * K1CNSAT

C        COMPUTE EQUILIBRIUM ALGAL STOICHIOMETRY
      CCHL1EQ = WCCHL1 / (1.-(1.-QF1)*(1.-RNUTR1(IX,IY,IZ))
     .    - FSC1 - (K1C+K1RB)/((1.-K1RG)*GPRE1))
      PCRB1EQ = (QF1 + (1.-QF1)*XEMP2) / WCP1
      NCRB1EQ = (QF1 + (1.-QF1)*XEMP1) / WCN1
      SCRB1EQ = (QF1 + (1.-QF1)*XEMP3) / WCS1

C        COMPUTE CURRENT STATE OF ALGAL STOICHIOMETRY
      IF(DTWQ.EQ.0.0)  THEN
        CCHL1S(IX,IY,IZ) = (CCHL1S(IX,IY,IZ) + DT*K1TEQ*CCHL1EQ)/
     .                                                   (1.+DT*K1TEQ)
        PCRB1(IX,IY,IZ) = (PCRB1(IX,IY,IZ) + DT*K1TEQ*PCRB1EQ)/
     .                                                   (1.+DT*K1TEQ)
        NCRB1(IX,IY,IZ) = (NCRB1(IX,IY,IZ) + DT*K1TEQ*NCRB1EQ)/
     .                                                   (1.+DT*K1TEQ)
        SCRB1(IX,IY,IZ) = (SCRB1(IX,IY,IZ) + DT*K1TEQ*SCRB1EQ)/
     .                                                   (1.+DT*K1TEQ)
      ELSE
        CCHL1S(IX,IY,IZ) = (CCHL1S(IX,IY,IZ) + DTWQ*K1TEQ*CCHL1EQ)/
     .                                                 (1.+DTWQ*K1TEQ)
        PCRB1(IX,IY,IZ) = (PCRB1(IX,IY,IZ) + DTWQ*K1TEQ*PCRB1EQ)/
     .                                                 (1.+DTWQ*K1TEQ)
        NCRB1(IX,IY,IZ) = (NCRB1(IX,IY,IZ) + DTWQ*K1TEQ*NCRB1EQ)/
     .                                                 (1.+DTWQ*K1TEQ)
        SCRB1(IX,IY,IZ) = (SCRB1(IX,IY,IZ) + DTWQ*K1TEQ*SCRB1EQ)/
     .                                                 (1.+DTWQ*K1TEQ)
      ENDIF

C        RESPIRATION
      RESPR = (K1RB + K1RG*K1C)/(1.-K1RG)
      RESP(IX,IY,IZ) = RESPR*PHYT1(IX,IY,IZ)

C        GROSS GROWTH RATE
      GPP1(IX,IY,IZ) = (K1C + RESPR)*PHYT1(IX,IY,IZ)

C        GRAZING
      GRAZ(IX,IY,IZ) = K1GRZCT(ISTP20(IX,IY,IZ))*PHYT1(IX,IY,IZ)

C        TOTAL LOSS
      DPP1(IX,IY,IZ) = (RESP(IX,IY,IZ)+GRAZ(IX,IY,IZ))

C        FORMULATE DERIVATIVE ... NET GROWTH (GP-DP)
      CDPHYT1(IX,IY,IZ) = ((1.-FLOCEX)*GPP1(IX,IY,IZ)-DPP1(IX,IY,IZ))
      GPDP1_DDA(IX,IY,IZ) = GPDP1_DDA(IX,IY,IZ)
     .                          +  CDPHYT1(IX,IY,IZ)/PHYT1(IX,IY,IZ)

!!=======================================================================
!! Test, Yun Li,
!      IF(FSM(IX,IY).NE.0.0) THEN
!        TDIAG1(IX,IY,IZ) = RESPR 
!        TDIAG2(IX,IY,IZ) = K1C
!        TDIAG3(IX,IY,IZ) = K1CNSAT
!        TDIAG4(IX,IY,IZ) = RESP(IX,IY,IZ) 
!        TDIAG5(IX,IY,IZ) = GRAZ(IX,IY,IZ)
!        TDIAG6(IX,IY,IZ) = XEMP1
!        TDIAG7(IX,IY,IZ) = XEMP2
!        TDIAG8(IX,IY,IZ) = XEMP3
!        TDIAG9(IX,IY,IZ) = DAVEI
!      ELSE
!        TDIAG1(IX,IY,IZ) = spval
!        TDIAG2(IX,IY,IZ) = spval
!        TDIAG3(IX,IY,IZ) = spval
!        TDIAG4(IX,IY,IZ) = spval
!        TDIAG5(IX,IY,IZ) = spval
!        TDIAG6(IX,IY,IZ) = spval
!        TDIAG7(IX,IY,IZ) = spval
!        TDIAG8(IX,IY,IZ) = spval
!        TDIAG9(IX,IY,IZ) = spval
!      ENDIF
!!=======================================================================

  110 CONTINUE

  115 CONTINUE
!!=======================================================================
!! Test, Yun Li,
      IF(IDISK.EQ.1 .OR. IDISK.EQ.3)  THEN
       WRITE(OUT,'(A,i5.5,A,f15.5,A,i5.5,A,A)'),
     .           ' WRITE: TOTAL diag     IREC = ',IREC,
     .           ' Time = ',time,
     .           ' NetCDF REC = ', ncIREC,
     .           ' in ', TRIM(ADJUSTL(DIAFILNA))
       status=nf90_open(TRIM(ADJUSTL(DIAFILNA)),nf90_write,ncID_dia)
       CALL nccheck_status(status,DIAFILNA,RCANA)
       CALL ncwrt_t1dvar(ncID_dia,ideutro_TIME,TIME )
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_GPP1   ,GPP1  )
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_RESPR1 ,TDIAG1)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_K1C    ,TDIAG2)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_RNUTR1 ,RNUTR1)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_K1CNSAT,TDIAG3)
       ! CALL ncwrt_g3dvar(ncID_dia,idPHYT1      ,PHYT1 )
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_RESP1  ,TDIAG4)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_GRAZ1  ,TDIAG5)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_XEMP11 ,TDIAG6)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_XEMP12 ,TDIAG7)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_XEMP13 ,TDIAG8)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_DAVEI1 ,TDIAG9)
       status=nf90_close(ncID_dia)
       CALL nccheck_status(status,DIAFILNA,RCANA)
      ENDIF
!!=======================================================================

C
C             SYSTEM 3 - PHYTOPLANKTON - SUMMER ASSEMBLAGE
C
 
C        GROWTH...NUTRIENTS AND LIGHT

c$doacross local(iy,ix,iz,gitmax,itot,temp1,davei,xemp1,xemp2,xemp3)
c$& ,local(graz2,k2cnsat,k2c)
c$& ,local(cchl2eq,pcrb2eq,ncrb2eq,scrb2eq,respr) , share(gpdp2_dda)
      DO 125 IZ=1,NZ
      DO 120 IY=1,NY
      DO 120 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 120

C        COMPUTE MICHAELIS TERMS
      XEMP1 = (DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))
     .       /(KMN2+DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))

      XEMP2 = DPO4(IX,IY,IZ)/(KMP2+DPO4(IX,IY,IZ))

      XEMP3 = DSI(IX,IY,IZ)/(KMS2+DSI(IX,IY,IZ))

C        COMPUTE GROWTH RATE REDUCTION DUE TO NUTRIENT LIMITATION 
C        USE 'MINIMUM' FORM RATHER THAN 'MULTIPLICATIVE' FORM 
      RNUTR2(IX,IY,IZ) = AMIN1(XEMP1,XEMP2,XEMP3)

C        EFFECT OF NUTRIENT LIMITATION ON SETTLING
      ALG2VS(IX,IY,IZ) = (VSBAS2 + VSNTR2*(1.-RNUTR2(IX,IY,IZ)))
     .   *VSBAST**STP20(IX,IY,IZ)

C        DEPTH AVERAGED LIGHT
      IF(IZ.EQ.1)   THEN
         ITOT=ISURF
      ELSE
         ITOT=ATTENL(IX,IY,IZ-1)
      ENDIF
      TEMP1 = SKE(IX,IY,IZ)*HBAR(IX,IY)*DZ(IZ)
      DAVEI = ITOT*(1.-EXP(-TEMP1))/TEMP1

C        COMPUTE NET NUTRIENT SATUATED GROWTH RATE AT AMBIENT LIGHT CONDITIONS
      K2CNSAT = ((GPRE2*(1.-K2RG)*(1.-FSC2)*DAVEI) / (GPRE2/GPR02 +
     .  DAVEI*(1.+GPRE2/ISAT2/GPR02)))

C        TEMPERATURE CORRECT GROWTH RATE
      IF(HYDTEMP(IX,IY,IZ).LE.TOPT2) 
     .     K2CNSAT = K2CNSAT*EXP(-K2BETA1*(HYDTEMP(IX,IY,IZ)-TOPT2)**2.)
      IF(HYDTEMP(IX,IY,IZ).GT.TOPT2) 
     .     K2CNSAT = K2CNSAT*EXP(-K2BETA2*(TOPT2-HYDTEMP(IX,IY,IZ))**2.)
 
C        CORRECT GROWTH RATE FOR BASAL RESPIRATION
      K2CNSAT = K2CNSAT - K2RB

C        COMPUTE NUTRIENT LIMITED RATE
      K2C = RNUTR2(IX,IY,IZ) * K2CNSAT

C        COMPUTE EQUILIBRIUM ALGAL STOICHIOMETRY
      CCHL2EQ = WCCHL2 / (1.-(1.-QF2)*(1.-RNUTR2(IX,IY,IZ))
     .    - FSC2 - (K2C+K2RB)/((1.-K2RG)*GPRE2))
      PCRB2EQ = (QF2 + (1.-QF2)*XEMP2) / WCP2
      NCRB2EQ = (QF2 + (1.-QF2)*XEMP1) / WCN2
      SCRB2EQ = (QF2 + (1.-QF2)*XEMP3) / WCS2

C        COMPUTE CURRENT STATE OF ALGAL STOICHIOMETRY
      IF(DTWQ.EQ.0.0)  THEN
        CCHL2S(IX,IY,IZ) = (CCHL2S(IX,IY,IZ) + DT*K2TEQ*CCHL2EQ)/
     .                                                   (1.+DT*K2TEQ)
        PCRB2(IX,IY,IZ) = (PCRB2(IX,IY,IZ) + DT*K2TEQ*PCRB2EQ)/
     .                                                   (1.+DT*K2TEQ)
        NCRB2(IX,IY,IZ) = (NCRB2(IX,IY,IZ) + DT*K2TEQ*NCRB2EQ)/
     .                                                   (1.+DT*K2TEQ)
        SCRB2(IX,IY,IZ) = (SCRB2(IX,IY,IZ) + DT*K2TEQ*SCRB2EQ)/
     .                                                   (1.+DT*K2TEQ)
      ELSE
        CCHL2S(IX,IY,IZ) = (CCHL2S(IX,IY,IZ) + DTWQ*K2TEQ*CCHL2EQ)/
     .                                                 (1.+DTWQ*K2TEQ)
        PCRB2(IX,IY,IZ) = (PCRB2(IX,IY,IZ) + DTWQ*K2TEQ*PCRB2EQ)/
     .                                                 (1.+DTWQ*K2TEQ)
        NCRB2(IX,IY,IZ) = (NCRB2(IX,IY,IZ) + DTWQ*K2TEQ*NCRB2EQ)/
     .                                                 (1.+DTWQ*K2TEQ)
        SCRB2(IX,IY,IZ) = (SCRB2(IX,IY,IZ) + DTWQ*K2TEQ*SCRB2EQ)/
     .                                                 (1.+DTWQ*K2TEQ)
      ENDIF

      RESPR = (K2RB + K2RG*K2C)/(1.-K2RG)
      RESP(IX,IY,IZ) =  RESP(IX,IY,IZ) + RESPR*PHYT2(IX,IY,IZ)

C        GROSS GROWTH RATE
      GPP2(IX,IY,IZ) = (K2C + RESPR)*PHYT2(IX,IY,IZ)

C        GRAZING
      GRAZ2 = K2GRZCT(ISTP20(IX,IY,IZ))*PHYT2(IX,IY,IZ)
      GRAZ(IX,IY,IZ) = GRAZ(IX,IY,IZ) + GRAZ2

C        TOTAL LOSS
      DPP2(IX,IY,IZ) = RESPR*PHYT2(IX,IY,IZ) + GRAZ2

C        FORMULATE DERIVATIVE ... NET GROWTH (GP-DP)
      CDPHYT2(IX,IY,IZ) = (1.-FLOCEX)*GPP2(IX,IY,IZ)-DPP2(IX,IY,IZ)
      GPDP2_DDA(IX,IY,IZ) = GPDP2_DDA(IX,IY,IZ) +
     .                          +  CDPHYT2(IX,IY,IZ)/PHYT2(IX,IY,IZ)
!!=======================================================================
!! Test, Yun Li,
!      IF(FSM(IX,IY).NE.0.0) THEN
!       TDIAG1(IX,IY,IZ) = RESPR
!        TDIAG2(IX,IY,IZ) = K2C
!        TDIAG3(IX,IY,IZ) = K2CNSAT
!        TDIAG4(IX,IY,IZ) = RESPR*PHYT2(IX,IY,IZ)
!        TDIAG5(IX,IY,IZ) = GRAZ2
!        TDIAG6(IX,IY,IZ) = XEMP1 
!        TDIAG7(IX,IY,IZ) = XEMP2
!        TDIAG8(IX,IY,IZ) = XEMP3
!        TDIAG9(IX,IY,IZ) = DAVEI
!      ELSE
!        TDIAG1(IX,IY,IZ) = spval
!        TDIAG2(IX,IY,IZ) = spval
!        TDIAG3(IX,IY,IZ) = spval
!        TDIAG4(IX,IY,IZ) = spval
!        TDIAG5(IX,IY,IZ) = spval
!        TDIAG6(IX,IY,IZ) = spval
!        TDIAG7(IX,IY,IZ) = spval
!        TDIAG8(IX,IY,IZ) = spval
!        TDIAG9(IX,IY,IZ) = spval
!      ENDIF
!!=======================================================================

  120 CONTINUE

  125 CONTINUE
!!=======================================================================
!! Test, Yun Li,
      IF(IDISK.EQ.1 .OR. IDISK.EQ.3)  THEN
       status=nf90_open(TRIM(ADJUSTL(DIAFILNA)),nf90_write,ncID_dia)
       CALL nccheck_status(status,DIAFILNA,RCANA)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_GPP2   ,GPP2  )
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_RESPR2 ,TDIAG1)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_K2C    ,TDIAG2)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_RNUTR2 ,RNUTR2)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_K2CNSAT,TDIAG3)
       ! CALL ncwrt_g3dvar(ncID_dia,idPHYT2      ,PHYT2 )
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_RESP2  ,TDIAG4)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_GRAZ2  ,TDIAG5)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_XEMP21 ,TDIAG6)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_XEMP22 ,TDIAG7)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_XEMP23 ,TDIAG8)
       ! CALL ncwrt_g3dvar(ncID_dia,iddia_DAVEI2 ,TDIAG9)
       status=nf90_close(ncID_dia)
       CALL nccheck_status(status,DIAFILNA,RCANA)
      ENDIF

!      DEALLOCATE(TDIAG1)
!      DEALLOCATE(TDIAG2)
!      DEALLOCATE(TDIAG3)
!      DEALLOCATE(TDIAG4)
!      DEALLOCATE(TDIAG5)
!      DEALLOCATE(TDIAG6)
!      DEALLOCATE(TDIAG7)
!      DEALLOCATE(TDIAG8)
!      DEALLOCATE(TDIAG9)
!!=======================================================================

C
C             SYSTEM 4 - PHYTOPLANKTON - FALL ASSEMBLAGE
C
 
C        GROWTH...NUTRIENTS AND LIGHT

c$doacross local(iy,ix,iz,gitmax,itot,temp1,davei,xemp1,xemp2,xemp3)
c$& ,local(graz3,k3cnsat,k3c)
c$& ,local(cchl3eq,pcrb3eq,ncrb3eq,scrb3eq,respr) , share(gpdp3_dda)
      DO 135 IZ=1,NZ
      DO 130 IY=1,NY
      DO 130 IX=1,NX
      IF(FSM(IX,IY).LE.0.)   GO TO 130

C        COMPUTE MICHAELIS TERMS
!      XEMP1 = (DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))
!     .       /(KMN3+DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))

!      XEMP2 = DPO4(IX,IY,IZ)/(KMP3+DPO4(IX,IY,IZ))

!      XEMP3 = DSI(IX,IY,IZ)/(KMS3+DSI(IX,IY,IZ))

C        COMPUTE GROWTH RATE REDUCTION DUE TO NUTRIENT LIMITATION 
C        USE 'MINIMUM' FORM RATHER THAN 'MULTIPLICATIVE' FORM 
      RNUTR3(IX,IY,IZ) = 0.0

C        EFFECT OF NUTRIENT LIMITATION ON SETTLING
      ALG3VS(IX,IY,IZ) = 0.0

C        DEPTH AVERAGED LIGHT
      IF(IZ.EQ.1)   THEN
         ITOT=ISURF
      ELSE
         ITOT=ATTENL(IX,IY,IZ-1)
      ENDIF
!      TEMP1 = SKE(IX,IY,IZ)*HBAR(IX,IY)*DZ(IZ)
!      DAVEI = ITOT*(1.-EXP(-TEMP1))/TEMP1

C        COMPUTE NET NUTRIENT SATUATED GROWTH RATE AT AMBIENT LIGHT CONDITIONS
!      K3CNSAT = ((GPRE3*(1.-K3RG)*(1.-FSC3)*DAVEI) / (GPRE3/GPR03 +
!     .  DAVEI*(1.+GPRE3/ISAT3/GPR03)))

C        TEMPERATURE CORRECT GROWTH RATE
!      IF(HYDTEMP(IX,IY,IZ).LE.TOPT3) 
!     .     K3CNSAT = K3CNSAT*EXP(-K3BETA1*(HYDTEMP(IX,IY,IZ)-TOPT3)**2.)
!      IF(HYDTEMP(IX,IY,IZ).GT.TOPT3) 
!     .     K3CNSAT = K3CNSAT*EXP(-K3BETA2*(TOPT3-HYDTEMP(IX,IY,IZ))**2.)
 
C        CORRECT GROWTH RATE FOR BASAL RESPIRATION
!      K3CNSAT = K3CNSAT - K3RB

C        COMPUTE NUTRIENT LIMITED RATE
      K3C = RNUTR3(IX,IY,IZ) * K3CNSAT

C        COMPUTE EQUILIBRIUM ALGAL STOICHIOMETRY
!      CCHL3EQ = WCCHL3 / (1.-(1.-QF3)*(1.-RNUTR3(IX,IY,IZ))
!     .    - FSC3 - (K3C+K3RB)/((1.-K3RG)*GPRE3))
!      PCRB3EQ = (QF3 + (1.-QF3)*XEMP2) / WCP3
!      NCRB3EQ = (QF3 + (1.-QF3)*XEMP1) / WCN3
!      SCRB3EQ = (QF3 + (1.-QF3)*XEMP3) / WCS3

C        COMPUTE CURRENT STATE OF ALGAL STOICHIOMETRY
!      IF(DTWQ.EQ.0.0)  THEN
!        CCHL3S(IX,IY,IZ) = (CCHL3S(IX,IY,IZ) + DT*K3TEQ*CCHL3EQ)/
!     .                                                   (1.+DT*K3TEQ)
!        PCRB3(IX,IY,IZ) = (PCRB3(IX,IY,IZ) + DT*K3TEQ*PCRB3EQ)/
!     .                                                   (1.+DT*K3TEQ)
!        NCRB3(IX,IY,IZ) = (NCRB3(IX,IY,IZ) + DT*K3TEQ*NCRB3EQ)/
!     .                                                   (1.+DT*K3TEQ)
!        SCRB3(IX,IY,IZ) = (SCRB3(IX,IY,IZ) + DT*K3TEQ*SCRB3EQ)/
!     .                                                   (1.+DT*K3TEQ)
!      ELSE
!        CCHL3S(IX,IY,IZ) = (CCHL3S(IX,IY,IZ) + DTWQ*K3TEQ*CCHL3EQ)/
!     .                                                 (1.+DTWQ*K3TEQ)
!        PCRB3(IX,IY,IZ) = (PCRB3(IX,IY,IZ) + DTWQ*K3TEQ*PCRB3EQ)/
!     .                                                 (1.+DTWQ*K3TEQ)
!        NCRB3(IX,IY,IZ) = (NCRB3(IX,IY,IZ) + DTWQ*K3TEQ*NCRB3EQ)/
!     .                                                 (1.+DTWQ*K3TEQ)
!        SCRB3(IX,IY,IZ) = (SCRB3(IX,IY,IZ) + DTWQ*K3TEQ*SCRB3EQ)/
!    .                                                 (1.+DTWQ*K3TEQ)
!      ENDIF

!      RESPR = (K3RB + K3RG*K3C)/(1.-K3RG)
      RESP(IX,IY,IZ) =  RESP(IX,IY,IZ) + 0.0

C        GROSS GROWTH RATE
      GPP3(IX,IY,IZ) = 0.0

C        GRAZING
      GRAZ3 = 0.0
      GRAZ(IX,IY,IZ) = GRAZ(IX,IY,IZ) + GRAZ3

C        TOTAL LOSS
      DPP3(IX,IY,IZ) = 0.0 

C        FORMULATE DERIVATIVE ... NET GROWTH (GP-DP)
      CDPHYT3(IX,IY,IZ) = 0.0
      GPDP3_DDA(IX,IY,IZ) = GPDP3_DDA(IX,IY,IZ) +
     .                          +  CDPHYT3(IX,IY,IZ)/PHYT3(IX,IY,IZ)

  130 CONTINUE

  135 CONTINUE

      IF(IDDOPT.EQ.1)  THEN
c$doacross local(iz,iy,ix) , share(rnutr1_dda,rnutr2_dda,rnutr3_dda)
        DO 140 IZ=1,NZ
         DO 140 IY=1,NY
          DO 140 IX=1,NX
          RNUTR1_DDA(IX,IY,IZ) = RNUTR1_DDA(IX,IY,IZ) + RNUTR1(IX,IY,IZ)
          RNUTR2_DDA(IX,IY,IZ) = RNUTR2_DDA(IX,IY,IZ) + RNUTR2(IX,IY,IZ)
          RNUTR3_DDA(IX,IY,IZ) = RNUTR3_DDA(IX,IY,IZ) + RNUTR3(IX,IY,IZ)
  140   CONTINUE
      ENDIF
 
      IF(IDISK.EQ.2 .OR. IDISK.EQ.3)  THEN
        DO 141 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         APPNET = (GPP1(IX,IY,IZ) + GPP2(IX,IY,IZ) + GPP3(IX,IY,IZ)
     .          - RESP(IX,IY,IZ))/(HBAR(IX,IY)*DZ(IZ))
         IF(IDDOPT.EQ.0)  THEN
           CALL RCAWBUF(1,SAL(IX,IY,IZ),SKE(IX,IY,IZ),
     .          ALG1VS(IX,IY,IZ),ALG2VS(IX,IY,IZ),APPNET)
         ELSE
           CALL RCAWBUF(1,SAL_DDA(IX,IY,IZ)/IAVGDDCNTR,SKE(IX,IY,IZ),
     .          SAL_DMIN(IX,IY,IZ),SAL_DMAX(IX,IY,IZ),APPNET)
         ENDIF
  141   CONTINUE
        DO 143 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
           GPDP=(GPP1(IX,IY,IZ)-DPP1(IX,IY,IZ))/
     .                          MAX(PHYT1(IX,IY,IZ),1.E-9)
           CALL RCAWBUF(2,PHYT1(IX,IY,IZ),
     .        1000.*PHYT1(IX,IY,IZ)/CCHL1S(IX,IY,IZ),
     .        CCHL1S(IX,IY,IZ),RNUTR1(IX,IY,IZ),GPDP)
         ELSE
           CALL RCAWBUF(2,PHYT1_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          CHLA1_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          CCHL1_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          RNUTR1_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          GPDP1_DDA(IX,IY,IZ)/IAVGDDCNTR)
         ENDIF
  143   CONTINUE
        DO 145 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
           GPDP=(GPP2(IX,IY,IZ)-DPP2(IX,IY,IZ))/
     .                          MAX(PHYT2(IX,IY,IZ),1.E-9)
           CALL RCAWBUF(3,PHYT2(IX,IY,IZ),
     .        1000.*PHYT2(IX,IY,IZ)/CCHL2S(IX,IY,IZ),
     .        CCHL2S(IX,IY,IZ),RNUTR2(IX,IY,IZ),GPDP)
         ELSE
           CALL RCAWBUF(3,PHYT2_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          CHLA2_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          CCHL2_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          RNUTR2_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          GPDP2_DDA(IX,IY,IZ)/IAVGDDCNTR)
         ENDIF
  145   CONTINUE
        DO 147 IDMP=1,NDMPS
         IX = IFDMPS(IDMP,1)
         IY = IFDMPS(IDMP,2)
         IZ = IFDMPS(IDMP,3)
         IF(IDDOPT.EQ.0)  THEN
           GPDP=(GPP3(IX,IY,IZ)-DPP3(IX,IY,IZ))/
     .                          MAX(0.0,1.E-9)
           CALL RCAWBUF(4,0.0,
     .        0.0,
     .        CCHL3S(IX,IY,IZ),RNUTR3(IX,IY,IZ),GPDP)
         ELSE
           CALL RCAWBUF(4,0.0,
     .          CHLA3_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          CCHL3_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          RNUTR3_DDA(IX,IY,IZ)/IAVGDDCNTR,
     .          GPDP3_DDA(IX,IY,IZ)/IAVGDDCNTR)
         ENDIF
  147   CONTINUE
      ENDIF

C        COMPUTE AMMONIA PREFERENCE 
      DO 150 IZ=1,NZ
       DO 150 IY=1,NY
        DO 150 IX=1,NX
        IF(FSM(IX,IY).EQ.1.)  THEN
         PNH41(IX,IY,IZ) =
     .        DNH4(IX,IY,IZ)*NO23(IX,IY,IZ)
     .               /((KMN1+DNH4(IX,IY,IZ))*(KMN1+NO23(IX,IY,IZ)))
     .      + DNH4(IX,IY,IZ)*KMN1
     .        /((DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))*(KMN1+NO23(IX,IY,IZ))) 
         PNH42(IX,IY,IZ) =
     .        DNH4(IX,IY,IZ)*NO23(IX,IY,IZ)
     .               /((KMN2+DNH4(IX,IY,IZ))*(KMN2+NO23(IX,IY,IZ)))
     .      + DNH4(IX,IY,IZ)*KMN2
     .        /((DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))*(KMN2+NO23(IX,IY,IZ))) 
         PNH43(IX,IY,IZ) =
     .        DNH4(IX,IY,IZ)*NO23(IX,IY,IZ)
     .               /((KMN3+DNH4(IX,IY,IZ))*(KMN3+NO23(IX,IY,IZ)))
     .      + DNH4(IX,IY,IZ)*KMN3
     .        /((DNH4(IX,IY,IZ)+NO23(IX,IY,IZ))*(KMN3+NO23(IX,IY,IZ))) 
        ENDIF
  150 CONTINUE

C INITIALIZE ARRAY FOR DETAILED DUMP AVERAGING, IF REQUIRED
      IF(IDISK.EQ.2 .OR. IDISK.EQ.3)  THEN
        IF(IDDOPT.EQ.1)  THEN
          DO 155 IZ=1,NZ
            DO 155 IY=1,NY
              DO 155 IX=1,NX
                RNUTR1_DDA(IX,IY,IZ) = 0.
                RNUTR2_DDA(IX,IY,IZ) = 0.
                RNUTR3_DDA(IX,IY,IZ) = 0.
                GPDP1_DDA(IX,IY,IZ) = 0.
                GPDP2_DDA(IX,IY,IZ) = 0.
                GPDP3_DDA(IX,IY,IZ) = 0.
  155     CONTINUE
        ENDIF
      ENDIF

      RETURN
      END
